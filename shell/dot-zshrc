#!/usr/bin/env zsh

lgreen_conditionally_start_profiler() {
    if [ "$ZPROF" = true ]; then
        zmodload zsh/zprof
    fi
}

lgreen_conditionally_stop_profiler() {
    if [ "$ZPROF" = true ]; then
        unset ZPROF
        zprof
    fi
}

lgreen_setup_p10k() {
    # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
    # Initialization code that may require console input (password prompts, [y/n]
    # confirmations, etc.) must go above this block; everything else may go below.
    if [ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]; then
        source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    fi
}

lgreen_init_p10k() {
    # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
    [ ! -f ~/.p10k.zsh ] || source ~/.p10k.zsh
}

lgreen_profile_zsh() {
  shell=${1-$SHELL}
  ZPROF=true $shell -i -c exit
}

lgreen_setup_zsh() {
    # Set zle to use Emacs keybinds
    bindkey -e

    # Homebrew doctor recommends the below
    umask 002

    # Workaround for WSL issue:https://github.com/microsoft/WSL/issues/1887
    if [ "$UNAME" = "Linux" ]; then
        if [ "$(< /proc/version)" = "*@(Microsoft|WSL)*" ]; then
            unsetopt BG_NICE
        fi
    else
        true
    fi

    # We want history, yes, but not shared between shell instances
    unsetopt incappendhistory
    unsetopt sharehistory
}

lgreen_init_fzf() {
    # Note: FZF exports are done in shell_common
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
}

lgreen_setup_common_shell() {
    # Source common shell script
    [ -f "$HOME/.shell_common" ] && source $HOME/.shell_common
}

lgreen_setup_zinit() {
#--------------------------------------------
# Zinit:
# https://github.com/zdharma/zinit
#--------------------------------------------
    if [ ! -f "$HOME/.zinit/bin/zinit.zsh" ]; then
        echo
        echo "The ZSH plugin manger, Zinit, is not installed."
        echo "Do you want to install it now? [Y/n] "
        read REPLY
        case $REPLY in
            [Nn]) return;;
        esac

        print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
        command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
        command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful. Restart shell to load plugins.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"; return
    fi
    source $HOME/.zinit/bin/zinit.zsh

    autoload -Uz _zinit
    (( ${+_comps} )) && _comps[zinit]=_zinit

    # Ice it up?
    #unset ZPLUGIN_ICE
    export ZPLUGIN_ICE=1

    zinit for \
        OMZ::lib/history.zsh \
        OMZ::lib/functions.zsh \
        OMZ::lib/misc.zsh \
        OMZ::lib/completion.zsh \
        OMZ::lib/git.zsh

    # Some info on zinit's parameters
    # - lucid: hides output from the loading of the plugin

    # OMZ::Color man-pages
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid
    zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh

    # zsh-completions
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid blockf
    zinit light zsh-users/zsh-completions

    # zsh-autosuggestions
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid atload"_zsh_autosuggest_start"
    zinit light zsh-users/zsh-autosuggestions

    # Syntax highlighting
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" atinit"zpcompinit" lucid
    zinit light zdharma/fast-syntax-highlighting

    # Theme: powerlevel10k
    zinit ice depth=1
    zinit light romkatv/powerlevel10k

    # Z
    zinit light agkozak/zsh-z

    # For GNU ls (the binaries can be gls, gdircolors)
    zinit ice atclone"gdircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
    zinit light trapd00r/LS_COLORS
}

lgreen_zsh_show_my_functions() {
    print -l ${(k)functions} | fzf -q "^lgreen"
}

lgreen_fix_compaudit_insecure_directories() {
    compaudit
    echo "Removing group write permissions.."
    compaudit | xargs chmod g-w
    echo "Done."
}

lgreen_source_local_zsh() {
    # Source local config file if is present
    [ -f "$HOME/.zshrc_local" ] && source $HOME/.zshrc_local
}

lgreen_zsh_init_completions() {
    if type brew &>/dev/null; then
        FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
    fi

    # Initialize completions
    autoload -Uz compinit && compinit

    if [ "$(command -v zinit)" ]; then
        zinit cdreplay -q
    fi
}

lgreen_setup_emacs_vterm() {
    if [[ "$INSIDE_EMACS" = 'vterm' ]] \
        && [[ -n ${EMACS_VTERM_PATH} ]] \
        && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
        source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh

        find_file() {
            vterm_cmd find-file "$(realpath "${@:-.}")"
        }

        say() {
            vterm_cmd message "%s" "$*"
        }
    fi
}

#-------------------
# Main
#-------------------
# On CentOS 7 we are stuck with an old version of ZSH,
# so run a new local one if available.
if [ "$ZSH_VERSION" = "5.0.2" ]; then
    if [ -f "$HOME/local/bin/zsh" ]; then
        $HOME/local/bin/zsh
        return
    fi
fi

# Emacs Tramp: needs a simple prompt so just setup common shell
# and return
if [ "$TERM" = "dumb" ]; then
    lgreen_setup_common_shell
    unsetopt zle && PS1='$ '
    return
fi

lgreen_conditionally_start_profiler
lgreen_setup_zinit
lgreen_setup_p10k
lgreen_setup_zsh
lgreen_setup_common_shell
lgreen_init_p10k
lgreen_init_fzf
lgreen_setup_direnv_for_zsh
lgreen_source_local_zsh
lgreen_zsh_init_completions
lgreen_setup_emacs_vterm
lgreen_conditionally_stop_profiler
