#!/usr/bin/env bash

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck disable=SC2155
# shellcheck disable=SC2154

#############################################################
# Common shell setup file to be sourced from
# both bash and zsh profile.
#############################################################

lgreen_track_shell_sourced_count() {
    # Add a variable to track how many times the shell
    # setup has been invoked
    if [ -z "$LGREEN_SHELL_SOURCED_COUNT" ]; then
        export LGREEN_SHELL_SOURCED_COUNT=1
    else
        ((LGREEN_SHELL_SOURCED_COUNT++))
    fi
}

# Source profile if it has not been sourced yet
lgreen_source_profile_if_not_sourced() {
    if ! [ "$LGREEN_PROFILE_SOURCED_COUNT" ]; then
        echo "WARNING: Profile has not been sourced, so sourcing it now..."
        source "$HOME/.profile"
    fi
}

lgreen_one_time_system_setup_check() {
    if [ ! -f "$HOME/.lgreen_one_time_system_setup" ]; then
        echo "**** WARNING *****"
        echo "Fresh system detected: please run one time setup steps."

        # FIXME Add better support for running one time setup
        # Setup TMUX terminfo for user and sudo
        # /usr/bin/tic -x "$HOME/.tmux-256color"
        # sudo /usr/bin/tic -x "$HOME/.tmux-256color"
    fi
}

lgreen_one_time_system_setup_mark_good() {
    touch "$HOME/.lgreen_one_time_system_setup"
}

lgreen_conditionally_start_attach_tmux() {
    if [ -n "$SSH_TTY" ] && [ -z "$TMUX" ] && [ -z "$INSIDE_EMACS" ]; then
        tmux -V
        tmux attach || tmux new -s Alpha
    fi
}

lgreen_setup_fzf() {
    # Setup FZF to use fd
    if [ "$(command -v fd)" ]; then
        export FZF_DEFAULT_COMMAND="fd --hidden --no-ignore-vcs --exclude '.git' --exclude 'node_modules'"
    fi
}

lgreen_setup_perforce_config() {
    export P4CONFIG=.p4config
}

# Keychain to start ssh-agent
lgreen_start_ssh_agent() {
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        if [ "$(command -v keychain)" ]; then
            eval "$(keychain --nogui --quiet --eval --inherit any id_rsa_personal id_rsa)"
        fi
    elif [ "$UNAME" = "Linux" ]; then
        if [ "$(command -v keychain)" ]; then
            eval "keychain --nogui --quiet --quick id_rsa id_ed25519"
            source "$HOME/.keychain/$(hostname)-sh"
        fi
    fi
}

lgreen_setup_ntfy() {
    if [ "$(command -v ntfy)" ]; then
        eval "$(ntfy shell-integration -L600)"
    fi
}

lgreen_setup_direnv_for_bash() {
    if [ "$(command -v direnv)" ]; then
        eval "$(direnv hook bash)"
    fi
}

lgreen_setup_direnv_for_zsh() {
    if [ "$(command -v direnv)" ]; then
        eval "$(direnv hook zsh)"
    fi
}

lgreen_setup_autoenv() {
    if [ "$(command -v brew)" ]; then
        activation_file="$(brew --prefix autoenv)/activate.sh"
        if [ -f "$activation_file" ]; then
            source "$activation_file"
        fi
    fi
}

lgreen_setup_pyenv() {
    if [ "$(command -v pyenv)" ]; then
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
        if [ "$UNAME" = "Darwin" ]; then
            eval "$(pyenv init -)"
        elif [ "$UNAME" = "Linux" ]; then
            eval "$(pyenv init --path)"
        fi
        eval "$(pyenv virtualenv-init -)"
    fi
}

lgreen_setup_jenv() {
    if [ "$(command -v jenv)" ]; then
        eval "$(jenv init -)"
        export JAVA_HOME="$HOME/.jenv/versions/$(jenv version-name)"
    fi
}

lgreen_setup_rbenv() {
    if [ "$(command -v rbenv)" ]; then
        # Below instruction is from output of doing `brew install rbenv`
        export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
        eval "$(rbenv init -)"
        export PATH="$PATH:$HOME/.rbenv/shims"
    fi
}

lgreen_setup_non_sys_openssl() {
    if [ "$(command -v brew)" ]; then
        OPENSSL_PATH=$(brew --prefix openssl@1.1)
        export PATH="${OPENSSL_PATH}/bin:$PATH"
    fi
}

lgreen_setup_non_sys_sqlite() {
    if [ "$(command -v brew)" ]; then
        SQLITE_PATH=$(brew --prefix sqlite)
        export PATH="${SQLITE_PATH}/bin:$PATH"
    fi
}

lgreen_setup_dev_env_node_js() {
    if [ "$(command -v nvm)" ]; then
        export NVM_DIR="$HOME/.nvm"

        # mac specific?
        [ -s "/usr/local/opt/nvm/nvm.sh" ] && source "/usr/local/opt/nvm/nvm.sh"
        [ -s "/usr/local/opt/nvm/etc/bash_completion" ] && source "/usr/local/opt/nvm/etc/bash_completion"

        # linuxbrew
        [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"                                       # This loads nvm
        [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

    fi
}

lgreen_setup_dev_env_rust() {
    if [ -f "$HOME/.cargo/env" ]; then
        source "$HOME/.cargo/env"
    fi
    if [ -d "$HOME/.cargo/bin" ]; then
        export PATH="$PATH:$HOME/.cargo/bin"
    fi
}

lgreen_setup_dev_env_go() {
    export GOPATH="${HOME}/.go"
    export GOROOT="$(brew --prefix golang)/libexec"
    export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"
    test -d "${GOPATH}" || mkdir "${GOPATH}"
    test -d "${GOPATH}/src/github.com" || mkdir -p "${GOPATH}/src/github.com"
}

lgreen_setup_dev_env_clang() {
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        export PATH="/usr/local/opt/llvm/bin:$PATH"
        export Clang_DIR="/usr/local/opt/llvm//lib/cmake/clang"

    elif [ "$UNAME" = "Linux" ]; then
        # Removed clang install on Linux.
        # Anyway this version specific paths don't seem like the right way to do this.
        # UPDATE (1/9/23): Hmm, not quite sure why I put this back... could it be for 'clangd'?

        export PATH=/home/linuxbrew/.linuxbrew/Cellar/llvm@14/14.0.6/bin:$PATH
        export LD_LIBRARY_PATH=/home/linuxbrew/.linuxbrew/Cellar/llvm@14/14.0.6/lib:$LD_LIBRARY_PATH
    fi
}

lgreen_time_shell() {
    for _ in $(seq 1 10); do time "$@" -i -c exit; done
}

lgreen_color_test() {
    echo Terminal Colors:

    #   Copied from http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
    T='gYw' # The test text

    echo -e "\n                 40m     41m     42m     43m\
        44m     45m     46m     47m"

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
        '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
        '  36m' '1;36m' '  37m' '1;37m'; do
        FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
            echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m"
        done
        echo
    done
    echo

    echo Testing TrueColor mode \(24 bit\):
    awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
        r = 255-(colnum*255/76);
        g = (colnum*510/76);
        b = (colnum*255/76);
        if (g>255) g = 510-g;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
}'
}

lgreen_term_title_clear() {
    printf "\033]0;\007"
}

lgreen_run_gradlew() {
    ./gradlew "$@"
}

lgreen_source_os_shell() {
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        # shellcheck source=shell_osx
        [ -f "$HOME/.shell_osx" ] && source "$HOME/.shell_osx"
    elif [ "$UNAME" = "Linux" ]; then
        # shellcheck source=shell_linux
        [ -f "$HOME/.shell_linux" ] && source "$HOME/.shell_linux"
    elif [[ "$UNAME" == *"_NT"* ]]; then
        # shellcheck source=shell_msys2
        [ -f "$HOME/.shell_msys2" ] && source "$HOME/.shell_msys2"
    fi
}

lgreen_p4_client() {
    p4 set -q P4CLIENT | cut -c10-
}

lgreen_p4_user() {
    p4 set -q P4USER | cut -c8-
}

lgreen_p4_last_change() {
    p4 changes -u "${lgreen_p4_user}" -c "${lgreen_p4_client}" -m 1 -L | cut -d\  -f2
}

# If we are running in Emacs then set it as the editor so that any sub-process e.g. git/perforce
# will use the current Emacs instance.
# TODO We also need to set a simpler shell environment if we are inside Emacs and not inside VTerm
# For example don't load ZSH nor any fancy prompts
lgreen_setup_running_inside_emacs() {
    if [ -n "$INSIDE_EMACS" ]; then
        export EDITOR="emacsclient"
        export GIT_EDITOR=$EDITOR
    fi
}

lgreen_rg_with_pager() {
    if [ -t 1 ]; then
        command rg -p "$@" | less -RFX
    else
        command rg "$@"
    fi
}

lgreen_setup_tmux_theme_switcher() {
    if [ -n "$TMUX" ]; then
        if [ -f "$HOME/.tmux/scripts/theme_light_dark_switcher.sh" ]; then
            source "$HOME/.tmux/scripts/theme_light_dark_switcher.sh"
        fi
    fi
}

lgreen_setup_tmux_theme_catpuccin_latte() {
    local sed_cmd="sed"
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        sed_cmd="gsed"
    fi
    $sed_cmd -i 's/mocha/latte/g' ~/.tmux.local.conf
    tmux source-file ~/.tmux.conf
}

lgreen_setup_tmux_theme_catpuccin_mocha() {
    local sed_cmd="sed"
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        sed_cmd="gsed"
    fi
    $sed_cmd -i 's/latte/mocha/g' ~/.tmux.local.conf
    tmux source-file ~/.tmux.conf
}

lgreen_setup_lscolors_theme_one_light() {
    if [ "$(command -v vivid)" ]; then
        export LS_COLORS=$(vivid generate one-light)
    fi
}

lgreen_setup_lscolors_theme_one_dark() {
    if [ "$(command -v vivid)" ]; then
        export LS_COLORS=$(vivid generate one-dark)
    fi
}

lgreen_show_lscolors_themes() {
    for theme in $(vivid themes); do
        echo "theme: $theme"
        LS_COLORS=$(vivid generate "$theme")
        ls
        echo
    done
}

lgreen_setup_fzf_theme_dark() {
    export FZF_DEFAULT_OPTS='--color=dark --color=fg:-1,bg:-1'
}

lgreen_setup_fzf_theme_light() {
    export FZF_DEFAULT_OPTS='--color=light --color=fg:-1,bg:-1'
}

lgreen_setup_fzf_theme_one_light() {
    # This is just my own hack of the OneDark theme i.e.
    # I replaced the fg and bg colors.
    export FZF_DEFAULT_OPTS='
        --color=fg:-1,bg:-1
        --color=hl:#c678dd,fg+:#4b5263,bg+:#ffffff,hl+:#d858fe
        --color=info:#98c379,prompt:#61afef,pointer:#be5046
        --color=marker:#e5c07b,spinner:#61afef,header:#61afef '
}

lgreen_setup_fzf_theme_one_dark() {
    export FZF_DEFAULT_OPTS='
        --color=fg:-1,bg:-1
        --color=hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe
        --color=info:#98c379,prompt:#61afef,pointer:#be5046
        --color=marker:#e5c07b,spinner:#61afef,header:#61afef '
}

lgreen_setup_bat_theme_one_half_light() {
    export BAT_THEME="OneHalfLight"
}

lgreen_setup_bat_theme_one_half_dark() {
    export BAT_THEME="OneHalfDark"
}

lgreen_setup_shell_theme_mode_light() {
    export LGREEN_SHELL_THEME_MODE="light"
    lgreen_setup_lscolors_theme_one_light
    lgreen_setup_fzf_theme_one_light
    lgreen_setup_bat_theme_one_half_light
    if [ -n "$TMUX" ]; then
        # lgreen_source_tmux_theme_light
        lgreen_setup_tmux_theme_catpuccin_latte
    fi
}

lgreen_setup_shell_theme_mode_dark() {
    export LGREEN_SHELL_THEME_MODE="dark"
    lgreen_setup_lscolors_theme_one_dark
    lgreen_setup_fzf_theme_one_dark
    lgreen_setup_bat_theme_one_half_dark
    if [ -n "$TMUX" ]; then
        # lgreen_source_tmux_theme_dark
        lgreen_setup_tmux_theme_catpuccin_mocha
    fi
}

lgreen_toggle_shell_theme_mode() {
    if [ "$LGREEN_SHELL_THEME_MODE" = "light" ]; then
        lgreen_setup_shell_theme_mode_dark
    else
        lgreen_setup_shell_theme_mode_light
    fi
}

lgreen_man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

lgreen_setup_aliases() {
    # shellcheck disable=SC2139
    alias e="$EDITOR"
    alias ec=emacsclient
    alias g=git
    alias groot='pushd "$(git rev-parse --show-toplevel)"'
    alias rg=lgreen_rg_with_pager
    alias gw=lgreen_run_gradlew
    alias tt=lgreen_toggle_shell_theme_mode
    alias man=lgreen_man
    alias cdr='cd $(git rev-parse --show-toplevel)'
    alias locate="locate -i" # case-insensitive as default
    alias ssh='TERM=xterm-256color ssh'
    alias fzf="fzf --ansi"
    alias bazel="./bazel.sh"
    if [ "$(command -v bat)" ]; then
        alias cat=bat
    fi
    if [ "$(command -v nvim)" ]; then
        alias vim=nvim
        alias vi=nvim
        alias nvim-doom="CC=/opt/homebrew/bin/gcc-13 NVIM_APPNAME=doom-nvim nvim"
    fi

    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        alias ls='gls --color'
        alias ll='gls -lh --color'
        alias lla='gls -lha --color'
    else
        alias ls='ls --color'
        alias ll='ls -lh --color'
        alias lla='ls -lha --color'
    fi

    # shellcheck disable=SC2139
    if [ "$(command -v brew)" ]; then
        alias gdb="$(brew --prefix)/bin/gdb"
    fi

    # Set alias to lldb
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Darwin" ]; then
        if [ -f "/usr/local/opt/llvm/bin/lldb" ]; then
            alias lldb=/usr/local/opt/llvm/bin/lldb
        fi
    else
        # shellcheck disable=SC2139
        if [ "$(command -v brew)" ]; then
            alias lldb="$(brew --prefix)/bin/lldb"
        fi
    fi

    # On MSYS2 we need to help tmux along
    # Needed: to use TMUX in non mintty terminals
    if [[ "$UNAME" == *"_NT"* ]]; then
        alias tmux='script -c "tmux -u" /dev/null'
    fi
}

lgreen_source_local_shell() {
    if [ -f "$HOME/.shell_local" ]; then
        source "$HOME/.shell_local"
    fi
}

lgreen_source_work_shell() {
    if [ -f "$HOME/dev/work/setup/setup.sh" ]; then
        source "$HOME/dev/work/setup/setup.sh"
    fi
}

lgreen_ssh_tmux() {
    ssh -t "$@" "tmux -u attach-session || tmux -u new-session -s Alpha"
}

lgreen_local_tmux() {
    tmux new-session -A -s Alpha
}

lgreen_greet_user_at_shell_setup_end() {
    # Only show a greeting if this is an interactive terminal
    if [ -t 1 ] && [ -z "$LGREEN_NO_GREET" ] && [ "$LGREEN_SHELL_SOURCED_COUNT" -eq 1 ]; then
        if [ "$(command -v neofetch)" ]; then
            neofetch
        fi
    fi
}

lgreen_setup_chromium_depot_tools() {
    export PATH="$HOME/dev/pub/depot_tools/:$PATH"
}

lgreen_setup_doom_emacs() {
    export DOOMDIR="$HOME/.doom.d"
    export EMACSDIR="$HOME/.emacs.doom"
    export PATH="$PATH:$EMACSDIR/bin/"
}

# TODO Provide sanitize environment implementations for non-Linux as well
lgreen_sanitize_environment() {
    if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
    if [ "$UNAME" = "Linux" ]; then
        export PATH=/usr/bin:/bin
        unset LD_LIBRARY_PATH PKG_CONFIG_PATH
    fi
}

lgreen_setup_dev_env_all() {
    # TODO: Decide if autoenv is better direnv
    # Trying out autoenv over direnv, since autoenv allows sourcing of scripts
    # and direnv only allows exporting of environment variables.
    #
    # lgreen_setup_direnv_for_zsh
    lgreen_setup_autoenv
    lgreen_setup_pyenv
    lgreen_setup_jenv
    lgreen_setup_rbenv

    lgreen_setup_dev_env_rust
    lgreen_setup_dev_env_clang

    lgreen_setup_perforce_config

    lgreen_setup_non_sys_openssl
    lgreen_setup_non_sys_sqlite

    lgreen_setup_ntfy
}

lgreen_setup_tmux_all() {
    # TODO: Consider removing this as it is problematic:
    # Tmux is often writing output to the screen.
    # We should be using Emacs more anyway.
    # lgreen_conditionally_start_attach_tmux
    lgreen_setup_tmux_theme_switcher
}

lgreen_show_fortune_quote() {
    if [ "$(command -v fortune)" ]; then
        if [ "$(command -v cowsay)" ]; then
            if [ -f "$HOME/.config/fortune/quotes" ]; then
                fortune ~/.config/fortune/quotes | cowsay
            fi
        fi
    fi
}

#-------------------
# Main
#-------------------
lgreen_track_shell_sourced_count
lgreen_source_profile_if_not_sourced
lgreen_one_time_system_setup_check
lgreen_source_os_shell
lgreen_start_ssh_agent
lgreen_setup_running_inside_emacs
lgreen_setup_aliases
lgreen_source_local_shell
lgreen_source_work_shell
lgreen_setup_tmux_all

# TODO Read light/dark mode from the system
# For now we just default to light mode
lgreen_setup_shell_theme_mode_light

lgreen_setup_doom_emacs

if [ -z "$UNAME" ]; then export UNAME=$(uname -s); fi
if [ "$UNAME" = "Linux" ]; then
    lgreen_setup_fzf
elif [ "$UNAME" = "Darwin" ]; then
    lgreen_setup_fzf
elif [[ "$UNAME" == *"_NT"* ]]; then
    lgreen_setup_dev_env_rust
fi

lgreen_setup_autoenv
lgreen_show_fortune_quote
