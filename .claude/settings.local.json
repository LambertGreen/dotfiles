{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(stow:*)",
      "Bash(git mv:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(for platform in ubuntu win posix)",
      "Bash(do mkdir -p configs/package_management_$platform/dot-package_management/{install,update})",
      "Bash(done)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(timeout 300 just test-update:*)",
      "Bash(timeout:*)",
      "Bash(bash:*)",
      "Bash(just health-check-log:*)",
      "Bash(ls:*)",
      "Bash(cp:*)",
      "Bash(mas search:*)",
      "Bash(chmod:*)",
      "Bash(./tools/package-management/test-configure-p1p2.sh:*)",
      "Bash(just test:*)",
      "Bash(docker run:*)",
      "Bash(python3:*)",
      "Bash(echo)",
      "Bash(just)",
      "Bash(git submodule add:*)",
      "Bash(sed:*)",
      "Bash(just:*)",
      "Bash(/mnt/c/tools/msys64/usr/bin/bash.exe -c 'cd /c/Users/lambert.green && ls -la | grep \"\"^\\l\"\" | grep -E \"\"^\\l.*\\.(zshrc|gitconfig|bashrc)\"\" | head -5')",
      "Bash(/mnt/c/tools/msys64/usr/bin/find.exe /c/users/lambert.green -maxdepth 1 -name \".zshrc\" -type l -exec readlink {} ;)",
      "Bash(/mnt/c/tools/msys64/usr/bin/find.exe /c/users/lambert.green -maxdepth 1 -type l -name \".*\")",
      "Bash(/mnt/c/tools/msys64/usr/bin/find.exe /c/users/lambert.green -maxdepth 1 -type l)",
      "Bash(/mnt/c/tools/msys64/usr/bin/bash.exe -c 'cd /c/users/lambert.green/dev/my/dotfiles && export DOTFILES_DIR=\"\"/c/users/lambert.green/dev/my/dotfiles\"\" && source tools/dotfiles-health/dotfiles-health.sh && _check_dotfile_symlink \"\"/c/users/lambert.green/.zshrc\"\" && echo \"\"PASS\"\" || echo \"\"FAIL\"\"')",
      "Bash(/mnt/c/tools/msys64/usr/bin/readlink.exe /c/users/lambert.green/.zshrc)",
      "Bash(/mnt/c/tools/msys64/usr/bin/bash.exe -c 'cd /c/users/lambert.green && eval \"\"find . -maxdepth 1 -type l -print\"\" 2>/dev/null | grep \"\"^\\./\\.\"\" | head -5')",
      "Bash(/mnt/c/tools/msys64/usr/bin/bash.exe -c 'cd /c/users/lambert.green && find . -maxdepth 1 -type l -print 2>/dev/null | grep \"\"^\\./\\.\"\" | head -5')",
      "Bash(powershell.exe:*)",
      "Bash(/mnt/c/tools/msys64/usr/bin/unix2dos.exe \"C:\\Users\\lambert.green\\dev\\my\\dotfiles\\scripts\\bootstrap\\install-just-windows.ps1\")",
      "Bash(/mnt/c/tools/msys64/usr/bin/unix2dos.exe \"C:\\Users\\lambert.green\\dev\\my\\dotfiles\\scripts\\bootstrap\\install-stow-windows.ps1\")",
      "Bash(git submodule:*)",
      "Bash(docker build:*)",
      "Bash(git add:*)",
      "Bash(docker rmi:*)",
      "Bash(true)",
      "Bash(test:*)",
      "Bash(touch:*)",
      "Bash(docker system:*)",
      "Bash(for combo in \"essential-ubuntu\" \"essential-arch\" \"developer-ubuntu\" \"developer-arch\")",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(/dev/null)",
      "Bash(echo \"❌ $combo build/test failed\")",
      "Bash(docker images:*)",
      "Bash(docker image inspect:*)",
      "Bash(docker ps:*)",
      "Bash(cd:*)",
      "WebSearch",
      "Bash(rm:*)",
      "Bash(brew search:*)",
      "Bash(brew list:*)",
      "Bash(brew:*)",
      "Bash(cat:*)",
      "Bash(git commit:*)",
      "Bash(LOG_PREFIX=\"TEST\" LOG_FILE=\"/tmp/test-logging.log\" bash -c 'source ./scripts/package-management/shared/logging.sh && initialize_log \"\"test-script.sh\"\" && log_info \"\"Testing enhanced logging\"\" && log_success \"\"This is a success message\"\" && log_warn \"\"This is a warning\"\" && log_error \"\"This is an error\"\" && finalize_log \"\"SUCCESS\"\"')",
      "Bash(DEFAULT_LOG_DIR=\"/tmp\" bash -c 'source /Users/lambert.green/dev/my/dotfiles/scripts/package-management/shared/log-utils.sh && filter_by_level ERROR /tmp/test-logging.log')",
      "Bash(DEFAULT_LOG_DIR=\"./.logs\" bash -c 'source ./scripts/package-management/shared/log-utils.sh && list_logs')",
      "Bash(./test-enhanced-logging.sh:*)",
      "Bash(/Users/lambert.green/dev/my/dotfiles/test-enhanced-logging.sh:*)",
      "Bash(source:*)",
      "Bash(log_summary:*)",
      "Bash(filter_by_level ERROR /Users/lambert.green/dev/my/dotfiles/.logs/enhanced-logging-demo-20250902-224911.log)",
      "Bash(LOG_PREFIX=\"TEST\" bash -c 'source scripts/package-management/shared/common.sh && log_info \"\"Testing enhanced logging through common.sh\"\" && log_success \"\"It works!\"\" && echo \"\"\"\" && echo \"\"Check log file:\"\" && echo \"\"${LOG_FILE}\"\"')",
      "Bash(LOG_PREFIX=\"TEST\" LOG_FILE=\"/tmp/simple-test.log\" bash -c 'source ./scripts/package-management/shared/logging.sh && log_section \"\"Testing Simplified Logging\"\" && log_info \"\"Every line is useful\"\" && log_subsection \"\"Command Output\"\" && echo \"\"brew output\"\" | log_command_output \"\"BREW\"\"')",
      "Bash(rg:*)",
      "Bash(zsh:*)",
      "Read(/Users/lambert.green/.cache/pre-commit/**)",
      "WebFetch(domain:github.com)",
      "Bash(git config:*)",
      "Bash(./test-interactive.sh)",
      "Bash(detect_pms:*)",
      "Bash(detect_all_pms)",
      "Bash(PATH=\"./test:$PATH\" python3 scripts/package-management/pm_detect.py)",
      "Bash(PATH=\"./test:$PATH\" python3 test-fake-check.py)",
      "Bash(PATH=\"./test:$PATH\" python3 test-e2e-fake.py)",
      "Bash(DOTFILES_PM_DISABLED=\"emacs,zinit,neovim\" python3 scripts/package-management/pm.py list)",
      "Bash(PATH=\"./test:$PATH\" fake-pm1 version)",
      "Bash(PATH=\"./test:$PATH\" fake-pm1 list)",
      "Bash(PATH=\"./test:$PATH\" fake-pm1 outdated)",
      "Bash(PATH=\"./test:$PATH\" fake-pm1 upgrade)",
      "Bash(PATH=\"./test:$PATH\" fake-pm2 reset)",
      "Bash(PATH=\"./test:$PATH\" fake-pm2 outdated)",
      "Bash(PATH=\"./test:$PATH\" fake-pm1 reset)",
      "Bash(for:*)",
      "Bash(do echo \"Removing scripts/package-management/$script\")",
      "Bash(do echo \"Moving $file → test/$file//test-/test_\")",
      "Bash(do echo \"Moving $module to src/dotfiles_pm/\")",
      "Bash(PATH=\"./test:$PATH\" python3 test/test_e2e_fake.py)",
      "Bash(PATH=\"./test:$PATH\" python3 -m pytest tests/ -v)",
      "Bash(do echo -n \"$script: \")",
      "Bash(if [ -f \"scripts/package-management/$script\" ])",
      "Bash(else echo \"✅ DELETED\")",
      "Bash(fi)",
      "Read(//Users/lambert.green/.dotfiles/logs/**)",
      "Bash(DOTFILES_DIR=/Users/lambert.green/dev/my/dotfiles python3 -m src.dotfiles_pm.pm upgrade brew)",
      "Bash(DOTFILES_TEST_MODE=true python3 -m src.dotfiles_pm.pm upgrade brew)",
      "Bash(export DOTFILES_TEST_MODE=true)",
      "Bash(gem:*)",
      "Bash(pipx list:*)",
      "Bash(cargo install:*)",
      "Bash(ruby --version)",
      "Bash(npm:*)",
      "Bash(pip3:*)",
      "Bash(pipx:*)",
      "Bash(cargo --version)"
    ],
    "deny": []
  }
}
