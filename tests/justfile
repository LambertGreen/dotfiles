# Testing Infrastructure Justfile
# This justfile contains all testing-related commands for the dotfiles project

# Set DOTFILES_DIR for all commands
export DOTFILES_DIR := justfile_directory() + "/.."

# Show available testing commands
[private]
default:
    @echo "🧪 Dotfiles Testing Infrastructure"
    @echo "=================================="
    @echo ""
    @echo "Available testing commands:"
    @just --list
    @echo ""
    @echo "💡 Quick start: just test-run-all"

# ═══════════════════════════════════════════════════════════════════════════════
# Core Testing Commands
# ═══════════════════════════════════════════════════════════════════════════════

# Run unit tests (uses mocks, fast feedback)
[group('1-🧪-Unit-Tests')]
test-run-unit:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running unit tests (mocked dependencies)..."
    eval "$(direnv export bash)"
    python3 -m pytest . -v || echo "⚠️  Some tests failed (expected during development)"

# Run unit tests with code coverage
[group('1-🧪-Unit-Tests')]
test-run-unit-coverage:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running unit tests with code coverage..."
    eval "$(direnv export bash)"
    python3 -m pytest . -v --cov=src --cov-report=term-missing --cov-report=html:htmlcov
    echo "📊 Coverage report generated in htmlcov/"

# Run functional tests (uses fake package managers)
[group('2-🔧-Functional-Tests')]
test-run-functional:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running functional tests (fake PMs)..."
    eval "$(direnv export bash)"
    export PATH="./test:$PATH"
    export DOTFILES_PM_ONLY_FAKES="true"
    export DOTFILES_PM_ENABLED="fake-pm1,fake-pm2"
    python3 -m src.dotfiles_pm.pm list
    echo "✅ Functional tests completed"

# Run functional tests with code coverage
[group('2-🔧-Functional-Tests')]
test-run-functional-coverage:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running functional tests with code coverage..."
    eval "$(direnv export bash)"
    export PATH="./test:$PATH"
    export DOTFILES_PM_ONLY_FAKES="true"
    export DOTFILES_PM_ENABLED="fake-pm1,fake-pm2"
    python3 -m pytest e2e/test_e2e_fake.py -v --cov=src --cov-report=term-missing --cov-report=html:htmlcov
    echo "📊 Coverage report generated in htmlcov/"

# Run integration tests (uses Docker containers)
[group('3-🐳-Integration-Tests')]
test-run-integration:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running integration tests (Docker containers)..."
    echo "TODO: Implement Docker-based integration tests"
    echo "   - test/ directory contains Docker test infrastructure"
    echo "   - Need to implement actual integration test commands"
    echo "   - Should test full system setup in containers"
    echo "✅ Integration test setup (TODO: implement actual tests)"

# ═══════════════════════════════════════════════════════════════════════════════
# Comprehensive Test Suites
# ═══════════════════════════════════════════════════════════════════════════════

# Run comprehensive test suite (all test types)
[group('4-🎯-Test-Suites')]
test-run-all:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running comprehensive test suite..."
    eval "$(direnv export bash)"
    echo "1. Unit tests..."
    just test-run-unit || echo "   Unit tests had issues (continuing...)"
    echo ""
    echo "2. Functional tests..."
    just test-run-functional || echo "   Functional tests had issues (continuing...)"
    echo ""
    echo "3. Integration tests..."
    just test-run-integration || echo "   Integration tests had issues (continuing...)"
    echo ""
    echo "4. Testing brew lock detection..."
    python3 -m src.dotfiles_pm.pms.brew_utils status || echo "   Brew utils test failed"
    echo ""
    echo "✅ Test suite completed"

# Run comprehensive test suite with code coverage
[group('4-🎯-Test-Suites')]
test-run-all-coverage:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧪 Running comprehensive test suite with code coverage..."
    eval "$(direnv export bash)"
    echo "1. Unit tests with coverage..."
    just test-run-unit-coverage || echo "   Unit tests had issues (continuing...)"
    echo ""
    echo "2. Functional tests with coverage..."
    just test-run-functional-coverage || echo "   Functional tests had issues (continuing...)"
    echo ""
    echo "3. Integration tests..."
    just test-run-integration || echo "   Integration tests had issues (continuing...)"
    echo ""
    echo "4. Testing brew lock detection..."
    python3 -m src.dotfiles_pm.pms.brew_utils status || echo "   Brew utils test failed"
    echo ""
    echo "📊 Final coverage report available in htmlcov/"
    echo "✅ Comprehensive test suite with coverage completed"

# ═══════════════════════════════════════════════════════════════════════════════
# Code Coverage Commands
# ═══════════════════════════════════════════════════════════════════════════════

# Run code coverage only (quick coverage check)
[group('5-📊-Coverage')]
test-coverage:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "📊 Running code coverage analysis..."
    eval "$(direnv export bash)"
    python3 -m pytest . -v --cov=src --cov-report=term-missing --cov-report=html:htmlcov --cov-fail-under=5
    echo "📊 Coverage report generated in htmlcov/"

# Open coverage report in browser
[group('5-📊-Coverage')]
test-coverage-open:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ -f "htmlcov/index.html" ]; then
        echo "🌐 Opening coverage report in browser..."
        open htmlcov/index.html || xdg-open htmlcov/index.html || echo "Please open htmlcov/index.html manually"
    else
        echo "❌ No coverage report found. Run 'just test-coverage' first."
        exit 1
    fi

# ═══════════════════════════════════════════════════════════════════════════════
# Testing Contexts
# ═══════════════════════════════════════════════════════════════════════════════

# Enter testing context (advanced Docker + integration tests)
[group('6-🔧-Contexts')]
test-context:
    @echo "🧪 Entering advanced testing context..."
    @echo "Use 'just' to see Docker-based integration tests"
    @cd test && exec $SHELL

# Return to main dotfiles context
[group('6-🔧-Contexts')]
goto-main:
    @echo "🏠 Returning to main dotfiles context..."
    @cd .. && exec $SHELL
