#+TITLE: Dotfiles
#+AUTHOR: Lambert Green
#+DESCRIPTION: Cross-platform system configuration management and package management system
#+STARTUP: overview


* Introduction

This is a cross-platform dotfiles and unified package management system - think of it as a better, more flexible =Topgrade=. It provides a single interface to manage packages across multiple package managers, while also handling dotfiles deployment and system configuration.

** Key Features

- **Unified Package Management** - Single command updates packages across all your package managers:
  - System: brew/cask, pacman/AUR, apt, mas (Mac App Store)
  - Languages: npm, pip, gem, cargo
  - Applications: zinit (zsh), elpaca (emacs), lazy.nvim (neovim)
- **Cross-Platform** - Consistent experience across macOS, Linux (Arch/Ubuntu), and Windows
- **Work-Friendly** - Separate work/personal contexts to handle corporate restrictions
- **Comprehensive Testing** - Docker validates multi-package-manager scenarios

** Key Technologies

- **GNU Stow** - Symlink management for dotfiles deployment
- **Just** - Command runner for consistent cross-platform operations
- **Docker** - Automated testing including multi-package-manager validation
- **Machine Classes** - Package definitions using native package manager formats (Brewfile, packages.txt, requirements.txt)

* Quick Start

** Quick Reference (for returning users)

#+begin_src sh
# Initial setup
./configure.sh                   # Configure machine class
./bootstrap.sh                   # Install essential tools
just stow                        # Deploy dotfiles
just install-packages            # Install all packages (system + dev)

# Daily operations
just check-packages              # Check all updates (system + dev)
just upgrade-packages            # Upgrade everything (system + dev)
just check-health                # Verify system health

# Granular control - System packages
just install-packages-user       # User packages only (no sudo)
just install-packages-admin      # Admin packages only
just upgrade-packages-user       # Upgrade user packages
just upgrade-packages-admin      # Upgrade admin packages

# Granular control - Dev packages
just install-dev-packages        # Install dev packages (emacs, nvim, zsh)
just check-dev-packages          # Check dev package updates
just upgrade-dev-packages        # Upgrade dev packages only
#+end_src

** 1. Clone the Repository

Clone to =~/dev/my/dotfiles= (recommended path):

#+begin_src sh
mkdir -p ~/dev/my
git clone --recursive https://github.com/LambertGreen/dotfiles.git ~/dev/my/dotfiles
cd ~/dev/my/dotfiles
#+end_src

** 2. Configure Your System

Interactive configuration:

#+begin_src sh
./configure.sh
#+end_src

The script will auto-detect your platform and present available machine classes to choose from.

Available machine classes include:
- ~docker_essential_{arch|ubuntu}~: Minimal containers with basic CLI tools
- ~docker_developer_{arch|ubuntu}~: Development containers with multiple package managers
- ~laptop_personal_mac~: Personal MacBook with full development setup
- ~laptop_work_mac~: Work MacBook with enterprise-appropriate tools
- ~desktop_{gaming_win|home_ubuntu|work_win}~: Desktop systems with GUI applications
- ~wsl_work_ubuntu~: Windows Subsystem for Linux development environment

Each machine class defines specific package lists optimized for that use case.

Configuration is saved to =.dotfiles.env= for future use.

** 3. Bootstrap Your System

Install essential tools and package managers:

#+begin_src sh
./bootstrap.sh
#+end_src

This reads your configuration and installs the appropriate tools (including =just=).

** 4. Deploy Configurations

Deploy dotfiles using the stow system:

#+begin_src sh
just stow
#+end_src

** 5. Install Packages

Install packages defined in your machine class:

#+begin_src sh
just install-packages         # Install everything (user, admin, and dev packages)

# OR separately:
just install-packages-user    # User packages only (no sudo required)
just install-packages-admin   # Admin packages only (may prompt for password)
just install-dev-packages     # Dev packages (Emacs, Neovim, Zsh plugins, etc.)
#+end_src

Note: `just install-packages` now includes development tool packages (Emacs, Neovim, Zsh plugins) automatically.

** 6. Verify Setup

Check that everything is configured correctly:

#+begin_src sh
just check-health
#+end_src


* Package Management

After initial setup, the system provides environment-driven package management with user/admin separation:

** Package Installation

Install packages for your machine class:

#+begin_src sh
# Install everything (recommended)
just install-packages          # Installs user, admin, and dev packages

# Or install separately:
just install-packages-user     # System packages - no sudo required
just install-packages-admin    # System packages - may prompt for password
just install-dev-packages      # App packages - Emacs, Neovim, Zsh plugins
#+end_src

The system now integrates:
- **System packages**: brew, apt, pacman, scoop (via user/admin split)
- **Dev packages**: Emacs (elpaca), Neovim (lazy.nvim), Zsh (zinit), Cargo, pipx
- All managed through a unified interface with `just install-packages`

** System Updates

Keep your system and packages up to date with a two-step process:

*** Check for Available Updates

First, see what updates are available:

#+begin_src sh
just check-packages     # Shows available updates for all packages
#+end_src

This is a safe, read-only operation that:
- Checks package manager registries for newer versions
- Shows which packages have updates available
- Does NOT install anything

*** Upgrade Packages

After reviewing available updates, upgrade when ready:

#+begin_src sh
# Upgrade everything (recommended)
just upgrade-packages

# Or upgrade separately:
just upgrade-packages-user    # User packages only
just upgrade-packages-admin   # Admin packages only (may prompt for password)
#+end_src

This will:
- Upgrade packages to their latest versions
- Clean up old versions where appropriate
- Admin upgrades may prompt for your password

*** Development Package Updates

For application-specific package managers (Emacs, Neovim, Zsh plugins):

#+begin_src sh
just check-dev-packages    # Check for updates in development tools
just upgrade-dev-packages  # Upgrade development tool packages
#+end_src

This manages packages for:
- Zsh plugins (via zinit)
- Emacs packages (via elpaca)
- Neovim plugins (via lazy.nvim)
- Cargo packages (Rust tools)
- pipx packages (Python CLI tools)

* Platform-Specific Notes

** macOS
- Uses Homebrew as primary package manager (brew/cask)
- GUI apps available in GUI_APPS categories
- Emacs via homebrew tap (emacs-plus@31)
- Platform-specific configs: git_osx, shell_osx, gnupg_osx

** Linux (Arch/Ubuntu)
- Arch: pacman (core) + AUR via yay helper
- Ubuntu: apt (core) + Homebrew Linux (additional packages)
- Emacs via AUR (emacs-plus) on Arch, apt on Ubuntu
- Platform-specific configs: git_linux, shell_linux, gnupg_linux

** Windows
- Scoop as primary package manager
- MSYS2 for Unix-like environment and additional packages
- Limited GUI application support
- Platform-specific configs: git_win, shell_msys2, gnupg_win

* Health Check

The health check tool validates your dotfiles setup:

#+begin_src sh
just check-health
#+end_src

It reports:
- Total symlinks managed by stow
- Any broken symlinks that need attention
- Overall system health status

** Cleaning Broken Links

Preview what would be removed:

#+begin_src sh
just cleanup-broken-links
#+end_src

Actually remove broken links:

#+begin_src sh
just cleanup-broken-links --remove
#+end_src

* Common Tasks

** Update Package Lists

The configuration system manages packages via machine class directories in `machine-classes/`. Each machine class contains package manager-specific files using native formats. To add new packages:

1. Identify the appropriate machine class (e.g., `docker_developer_ubuntu`, `laptop_personal_mac`)
2. Navigate to the appropriate package manager directory
3. Edit the package manager's native format file

Examples:
#+begin_src sh
# For Homebrew (macOS/Linux) - User packages (no sudo)
echo 'brew "your-new-package"' >> machine-classes/laptop_work_mac/brew/packages.user

# For Homebrew (macOS/Linux) - Admin packages (requires sudo)
echo 'cask "your-gui-app"' >> machine-classes/laptop_work_mac/brew/packages.admin

# For apt packages (Ubuntu)
echo "your-new-package" >> machine-classes/docker_developer_ubuntu/apt/packages.txt

# For pacman (Arch)
echo "your-new-package" >> machine-classes/docker_developer_arch/pacman/packages.txt
#+end_src

** Restow Configurations

If you've modified configs, restow to update symlinks:

#+begin_src sh
just stow    # Uses your configured platform automatically
#+end_src

** Show Current Configuration

View your current configuration settings:

#+begin_src sh
just show-config
#+end_src

* Troubleshooting

** Permission Denied Errors
- Ensure you have sudo access for bootstrap phase
- Package installation may require admin privileges

** Symlink Conflicts
- Use health check to identify issues
- Remove conflicting files or use force install
- Common conflicts: =.bashrc=, =.zshrc= from system defaults

** Work Machine Restrictions
- Configure only the components you need on work machines
- GUI applications may require admin access on some systems
- Advanced window managers and system tools are in advanced categories for optional installation


* Contributing

1. Make changes in appropriate config directory (`configs/common/`, `configs/osx_only/`, etc.)
2. Test using Docker test infrastructure: `cd test && just test-developer-arch`
3. Run health check to verify changes: `just check-health`
4. Update machine class package lists if adding new packages
5. Submit PR with description of changes

For more detailed information, see the comprehensive setup guide in [[file:README.old.org][README.old.org]].
