#+TITLE: Dotfiles

Contains config files and setup scripts for 3 platforms:
1. macOS
2. Windows
3. Linux

* Usage
This README provides steps to setup various applications and their associated configurations (the configurations are my own personal ones). To install and setup a specific application simply search this document based on the application name, and one will then get results filtered to the application e.g. if one searches for =Tmux=, then one will find the following: how to install it; how to install the =Tmux Plugin Manager=; how to symlink the config file;

* Install apps
** Install package manager
One each OS platform there are multiple options for package management. On Linux there is often a system package manager that comes with the specific Linux distribution, and on the other hand for macOS/Windows, there is no decent command-line based system package manager, but instead a GUI based app store. My preference is =Homebrew= for macOS/Linux and =Scoop= for Windows, because they both allow usage without the need for root/admin privileges on the machine.

*Update (3/30/2022)*:
I have now starting using =Nix= and =Home Manager= as it enabled me to install =Emacs= and =Tmux= with much less fuss on Linux.

*** Install =Homebrew= :Linux:macOS:
#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src
*** Install =Nix=/=Home Manager= :Linux:macOS:
**** Install =Nix= first
#+begin_src sh
sh <(curl -L https://nixos.org/nix/install) --daemon

# Note: for security reasons verify the installation script using GPG signatures
curl -o install-nix-2.3.16 https://releases.nixos.org/nix/nix-2.3.16/install
curl -o install-nix-2.3.16.asc https://releases.nixos.org/nix/nix-2.3.16/install.asc
gpg2 --recv-keys B541D55301270E0BCF15CA5D8170B4726D7198DE
gpg2 --verify ./install-nix-2.3.16.asc
sh ./install-nix-2.3.16
#+end_src
**** Install =Home manager=
#+begin_src sh
nix-env -iA nixpkgs.home-manager
#+end_src
*** Install =Chocolatey= :Windows:
#+begin_src ps
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
#+end_src
*** Install =Scoop= :Windows:
#+begin_src ps
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
#+end_src
*** Install =Pacman= (from =MSYS2=) :Windows:
We need to use =msys2= to install some =GNU= and =Unix= tools for Windows e.g. ~aspell~ and ~tmux~.
*Note* I moved from using =Scoop= to =Chocolatey= to avoid =Scoop='s shims and because =Chocolatey= installs in ~C:/toos/msys2~ which is a prefered shallower directory structure.
#+begin_src sh
choco install msys2
#+end_src
*** Install =Python Index Package manager= :Linux:macOS:Windows:
It comes with =Python= and can be run using:
#+begin_src sh
python3 -m pip <PIP command params>
#+end_src

** Install packages
Initially I listed out the actual commands for installing packages, and then moved to providing commands for generating an import file e.g. a Brewfile, but since one may need to use more than one package manager, I feel just listing the applications I want installed is sufficient, and in addition to that I am now checking in (in this very dotfiles repo) the export files from the package managers in use for quick importing.
*** Install packages using =Homebrew= :Linux:macOS:
**** Bulk install using =Brewfile=
Navigate to the ~brewfiles~ folder for the particular machine where the ~Brewfile~ export was generated, and run the import command e.g.:
#+begin_src sh
cd ./package_manager_exports/brewfiles/  # change directory to the exported brewfiles
cd MacbookAir                            # change directory for the relevant machine
# Edit Brewfile if needed to comment out uneeded packages
brew bundle                              # bulk install packages
#+end_src

***** Checked in =Brewfile='s
- [[file:Brewfiles/][Macbook Air]]
**** Creating/Updating =Brewfile=
#+begin_src sh
brew bundle dump
#+end_src

*** Install packages using =Nix=/=Home Manager=
=Nix= enables one to specify applications to be installed inside a config file: ~$HOME/.nixpkgs/home.nix~
#+begin_src nix
{ pkgs, ... }:

{
  nixpkgs.overlays = [
    (import (builtins.fetchTarball {
      url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
    }))
  ];

  home.packages = [
    pkgs.fd
    pkgs.tmux
  ];

  programs.emacs = {
    enable = true;
    package = pkgs.emacsGcc;
    extraPackages = (epkgs: [ epkgs.vterm ] );
  };
}
#+end_src
*** Install packages using =Scoop= :Windows:
**** Bulk install using export file
Navigate to the ~scoop~ folder for the particular machine where the export file was generated, and run the import command e.g.:
#+begin_src ps
cd ./package_manager_exports/scoop/  # change direcory to the exported scoop files
# Edit scoop file if needed
scoop install windows_rig.scoop      # bulk install
#+end_src
**** Creating/Updating Scoop export
#+begin_src ps
scoop export <filename>
#+end_src
*** Install packages using =Python PIP= :Linux:macOS:Windows:
**** Bulk install using export file
The =python= =pip= export file is called a =requirments= file:
#+begin_src sh
python3 -m pip install -r <path-to-requirements.txt>
#+end_src
**** Creating/Updating PIP export
#+begin_src sh
python3 -m pip freeze > requirements.txt
#+end_src

*** Install packages using =Chocolatey= :Windows:
*Note* We prefer to use =Chocolatey= over =Scoop= for =Msys= and =Git= to avoid any performance impact due to =Scoop= shims.
#+begin_src ps
choco install AutoHotKey --install-arguments '/uiAccess=1'
choco install msys2
choco install git
#+end_src
*** Install packages using =Pacman= :Windows:
#+begin_src sh
pacman -Syu # first update system
pacman -S base-devel tmux zsh vim man-pages-posix neofetch
pacman -S mingw-w64-x86_64-{giflib,gnutls,jbigkit,imagemagick,jansson,lib{jpeg-turbo,png,rsvg,tiff,xml2},toolchain,xpm-nox} # for building and running Emacs
#+end_src

** Install from sources
Sometime we have to install from sources on systems that have outdated packages and that =Homebrew= does not run on e.g. =CentOS 7=.
*** Installing =git=
#+BEGIN_SRC sh
export VER="2.27.0"
wget https://github.com/git/git/archive/v${VER}.tar.gz
tar -xvf v${VER}.tar.gz
rm -f v${VER}.tar.gz
cd git-*
make configure
sudo ./configure --prefix=/usr/local
sudo make
sudo make install
#+END_SRC
*** Installing =curl=
#+BEGIN_SRC sh
export VER="7.67.0"
wget https://curl.haxx.se/download/curl-${VER}.tar.gz
gunzip -c curl-${VER}.tar.gz | tar xvf -
cd curl-${VER}
./configure --with-ssl --prefix=/usr/local
make
sudo make install
#+END_SRC
*** Installing =Tmux=
**** Install =Tmux= from =Github=
#+BEGIN_SRC sh
git clone https://github.com/tmux/tmux.git
cd tmux
sh autogen.sh
./configure
make && sudo make install
#+END_SRC
**** Install =Tmux= from =Sourceforge=
#+BEGIN_SRC sh
# Install libevent
LIBEVENT_VERSION="2.0.21-stable"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget https://github.com/downloads/libevent/libevent/libevent-$LIBEVENT_VERSION.tar.gz
tar zxvf libevent-$LIBEVENT_VERSION.tar.gz
cd libevent-$LIBEVENT_VERSION
./configure --prefix=/usr/local
make && sudo make install

# Install Tmux
TMUX_VERSION="3.2"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget http://downloads.sourceforge.net/tmux/tmux-$TMUX_VERSION.tar.gz
tar zxvf tmux-$TMUX_VERSION.tar.gz
cd tmux-$TMUX_VERSION
LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" ./configure --prefix=/usr/local
make && sudo make install
#+END_SRC
*** Installing =ZSH=
#+BEGIN_SRC sh
ZSH_SRC_LINK="https://sourceforge.net/projects/zsh/files/latest/download"
ZSH_SRC_FILE="zsh.tar.xz"

TMP_DIR=$(mktemp -d) && cd $TMP_DIR
curl -Lo "$ZSH_SRC_FILE" "$ZSH_SRC_LINK"
tar xJvf "$ZSH_SRC_FILE" --strip-components 1
./configure --prefix="/usr/local" \
    CPPFLAGS="-I/usr/local/include" \
    LDFLAGS="-L/usr/local/lib"
make -j && sudo make install
#+END_SRC

*** Installing =fzf= from =Github=
#+BEGIN_SRC sh
git clone --depth 1 https://github.com/junegunn/fzf.git
cd fzf
./install
#+END_SRC
*** Installing =fd= using =Cargo=
#+BEGIN_SRC sh
cargo install fd-find
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
*** Installing =bat= using =Cargo=
#+BEGIN_SRC sh
cargo install bat
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
** Install python apps with =pip=
#+begin_src
python3 -m pip install dploy
python3 -m pip install ntfy
#+end_src
** List of used applications
*** Terminals
**** Common
#+begin_example
alacritty
#+end_example
**** Posix
#+begin_example
tmux
#+end_example
**** macOS
#+begin_example
iterm2
#+end_example
**** Windows
#+begin_example
WindowsTerminal
#+end_example

*** Shell
**** Common
#+begin_example
neofetch
#+end_example
**** Posix
#+begin_example
zsh
#+end_example
**** Windows
#+begin_example
Powershell
clink
#+end_example

*** Editor/File Utilities
**** Common
#+begin_example
emacs
neovim
vscode

coreutils
ispell
bat
dust
fd
fzf
ripgrep
tree
#+end_example
*** Communications
**** Common
#+begin_example
Slack
Whatsapp
#+end_example
**** Posix
#+begin_example
isync
mu
#+end_example

*** Fonts
**** Common
#+begin_example
Hack
Iosevka
#+end_example
*** System Utilities
**** Common
#+begin_example
curl
neofetch
openssh
ntfy
#+end_example
**** Posix
#+begin_example
htop
pstree
stow
tldr
#+end_example
**** macOS
#+begin_example
#+end_example
**** Linux
#+begin_example
keychain
#+end_example
**** Windows
#+begin_example
ack
aria2
findutils
wget
dploy
sudo

7zip
everything
processhacker
rapidee
sysinternals
windirstat
#+end_example

*** User Utilities
**** Common
#+begin_example
openssh
#+end_example
**** Posix
#+begin_example
coreutils
isync
mu
stow
sword
#+end_example
**** macOS
#+begin_example
#+end_example
**** Linux
#+begin_example
keychain
#+end_example
**** Windows
#+begin_example
7zip
everything
processhacker
rapidee
sudo
sysinternals
windirstat
#+end_example

*** Desktop Utilities
**** Common
#+begin_example
divvy
#+end_example
**** Posix
#+begin_example
#+end_example
**** macOS
#+begin_example
d12frosted/emacs-plus
daviderestivo/emacs-head
amethyst                     # unused - replaced by Hammerspoon
caffeine                     # unused - replaced by Hammerspoon
keycastr                     # unused - replaced by Hammerspoon
appcleaner
alfred
cursorcerer
lincastor                    # TODO Replace Lincastor with Hammerspoon
hammerspoon
shortcutdetective
basictex
#+end_example
**** Linux
#+begin_example
#+end_example
**** Windows
#+begin_example
autohotkey
carnac
keypirinha
powertoys
mousejiggler
sumatrapdf
vlc
wox
#+end_example

*** Development Utilities
**** Common
#+begin_example
automake
clang-format
cmake
direnv
docker
editorconfig
freetds@0.91
git
gradle
jenv
jq
ninja
node
openjdk
perl
pyenv
pyenv-virtualenv
python
qt4
pyqt4
rbenv
rbtools
ruby
ruby-build
universal-ctags
unixodbc
#+end_example
**** Posix
#+begin_example
gcc
gdb
llvm
#+end_example
**** macOS
#+begin_example
ptrace
xcode
#+end_example
**** Linux
#+begin_example
fswatch
strace
#+end_example
**** Windows
#+begin_example
vcredist2015
windbg
#+end_example

* Install app specific plugin managers
** Install =Tmux Plugin Manager= :automated:
The =Tmux= configuration file checks for the existence of the local directory, and if not present it runs the below command:
#+begin_src sh
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src

** Install =Zinit= a =Zsh= plugin manager :automated:
The ~./shell/dot-zshrc~ checks if =Zinit= is installed and prompts user to run below steps:
#+begin_src sh
mkdir ~/.zinit
git clone https://github.com/zdharma-continuum/zinit.git ~/.zinit/bin
#+end_src
** Install =Sword='s =installmgr=
#+begin_src sh
export SWORD_PATH=~/.sword
mkdir -p $SWORD_PATH/mods.d

echo yes |installmgr -init               # create a basic user config file
echo yes |installmgr -sc                 # sync config with list of known remote repos
#+end_src
** Install =Keypirinha='s =PackageControl= :Windows:
1. Open the ~Keypirinha: Console~ (Shortcut: ~F2~)
2. Enter the following:
#+begin_src python
import keypirinha as kp,keypirinha_net as kpn,os;p="PackageControl.keypirinha-package";d=kpn.build_urllib_opener().open("https://github.com/ueffel/Keypirinha-PackageControl/releases/download/1.0.4/"+p);pb=d.read();d.close();f=open(os.path.join(kp.installed_package_dir(),p),"wb");f.write(pb);f.close()
#+end_src

* Install app integrations
Some of these are auto-installed, by apps themselves according to their config, but the below are not.
** Shell integrations
*** Install =Fzf=
#+begin_src sh
$(brew --prefix)/opt/fzf/install
#+end_src

** Editor integrations
*** =Chemacs 2=
Note: Using =Chemacs= means one has to run modified instructions for installing an Emacs distribution e.g. =Doom= or =Spacemacs=
The install instructions for =Chemacs 2= state to clone the repository, but we add it as a git submodule into the ~dot-emacs.d~ directory, ready for usage with =stow=.

*** Install =Doom Emacs=
Note: If using =Chemacs= then the below is slightly different from the instructions from the web-site i.e. the target directory should not be ~.emacs.d~ since this is where =Chemacs= will be installed to.
#+begin_src sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.doom
~/.emacs.doom/bin/doom install
#+end_src

*** Install =Latex tools=
Note: The system should be installed via a package manager e.g. ~brew install basictex~, which provides the ~tlmgr~, which should then be used:
#+begin_src sh
sudo tlmgr update --self && \
    sudo tlmgr install \
    # for svg images
    dvisvgm \
    # for png images
    dvipng \
    # fonts
    collection-fontsrecommended \
    # source code highlighting
    minted
#+end_src

I am not sure if the below is needed?
#+begin_src sh
sudo tlmgr install wrapfig marvosym wasy wasysym
#+end_src
*** Setup =Email tools=
**** Authentication
***** macOS
****** TODO Fill in gaps via testing on a clean machine
****** Add mail app-password to keychain
******* Add app-password for mbsync from IMAP
#+begin_src sh
security find-generic-password -a lgreen -s mbsync-gmail-password -w <PASS>
#+end_src

******* Add app-password for SMTP server
#+begin_src sh
security add-internet-password -a lambert.green@gmail.com -l smtp.gmail.com -P 587 -r smtp -s smtp.gmail.com -w <PASS> -U
#+end_src
*** Setup =Bible (KJV)=
Dependencies: see installing of =Sword= in earlier section of this document.
#+begin_src sh
echo yes |installmgr -r CrossWire        # refresh remote source
echo yes |installmgr -ri CrossWire KJV   # install module from remote source
installmgr -l                            # list installed modules

#Test
diatheke -b KJV -k Jn 3:16
#+end_src

* Symlink dotfiles
Initially I had some hand written scripts for doing the symlinking, but am now using =GNU Stow= since it is a more standardized approach.

** Symlink dotfiles using =Gnu Stow= :Linux:macOS:
*** Stow =Posix= configs
#+begin_src sh
stow shell git git_my git_work tmux vim nvim emacs spelling
#+end_src
*Note*: =stow= on =msys2= does not actually create symlinks, and instead does a copy.

*** Stow =macOS= config
#+begin_src sh
stow shell_osx git_osx alacritty_osx hammerspoon
#+end_src

*** Stow =Linux= config
#+begin_src sh
stow shell_linux git_linux alacritty_linux
#+end_src

** Symlink dotfiles using =Dploy= :Windows:
Unfortunately there is no =Gnu Stow= for =Windows=, but the =dploy= python package comes to the rescue.
#+begin_src ps
# Pre-requisates
# - Install Dploy: ~pip instal dploy~
# - Run the below in an Admin session e.g. ~sudo powershell~

#-------------------
# Windows only stuff
#-------------------
dploy stow ./alacritty_win $home
dploy link ./autohotkey/dot-autohotkey $home/.autohotkey
dploy stow ./Keypirinha $home
dploy stow ./WindowsPowerShell $home
dploy stow ./WindowsTerminal $home

#-------------
# Vim + Neovim
#-------------
dploy link ./vim/dot-vimrc $home/_vimrc
dploy link ./vim/dot-gvimrc $home/_gvimrc
dploy stow ./nvim/.config/nvim $home/appdata/local/nvim

#-------------
# Emacs
#-------------
dploy link ./emacs/dot-emacs-profile $home/.emacs-profile
dploy link ./emacs/dot-emacs-profiles.el $home/.emacs-profiles.el
dploy link ./emacs/dot-emacs.default $home/.emacs.default
dploy link ./emacs/dot-doom.d $home/.doom.d

#-------------
# Git
#-------------
dploy link ./git/dot-gitignore $home/.gitignore
dploy link ./git/dot-common.gitconfig $home/.common.gitconfig
dploy link ./git_my/dot-my.gitconfig $home/.my.gitconfig
dploy link ./git_win/dot-gitconfig $home/.gitconfig

#-------------
# Shell (msys2)
#-------------
dploy link ./shell/dot-bash_profile $home/.bash_profile
dploy link ./shell/dot-bashrc $home/.bashrc
dploy link ./shell/dot-p10k.zsh $home/.p10k.zsh
dploy link ./shell/dot-profile $home/.profile
dploy link ./shell/dot-shell_common $home/.shell_common
dploy link ./shell/dot-zprofile $home/.zprofile
dploy link ./shell/dot-zshrc $home/.zshrc
dploy link ./shell_msys2/dot-profile_msys2 $home/.profile_msys2
dploy link ./shell_msys2/dot-shell_msys2 $home/.shell_msys2
#+end_src
* Special app configurations
** Setting up =tmux-256color= support
I have run into variations of issues trying to setup =24 bit true color= support, and so I am starting to capture specific here.

*** Setup on =macOS=
See https://github.com/htop-dev/htop/issues/251
#+begin_example
Aha. It seems the terminfo for tmux-256color that comes with the latest Homebrew ncurses, or even the one downloaded from invisible-island.net is not configured to work properly with htop. Very strange.

After a bit of looking around, it seems the best one to use is the one provided by the maintainer of tmux, found here: https://gist.github.com/nicm/ea9cf3c93f22e0246ec858122d9abea1

Using that one restores colours in htop for me. It can be installed by downloading the gist and running /usr/bin/tic -x <gist filename>.
#+end_example

The contents of the gist mentioned above are saved in file ~./tmux-256color~.
** Setting up =24 bit true color= for =Emacs= in terminal mode
The following file should be used to compile the appropriate terminfo
#+begin_src sh
# Use colon separators.
xterm-24bit|xterm with 24-bit direct color mode,
    use=xterm-256color,
    setb24=\E[48:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
    setf24=\E[38:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
# Use semicolon separators.
xterm-24bits|xterm with 24-bit direct color mode,
    use=xterm-256color,
    setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
    setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
#+end_src

Save the above in a file e.g ~terminfo-24bit.src~ and then run the below:
#+begin_src sh
tic -x -o ~/.terminfo terminfo-24bit.src
#+end_src

Now =Emacs= can be started with true-color using:
#+begin_src sh
TERM=xterm-24bit emacs -nw
#+end_src
** Setting up fonts for =Doom Emacs= on Windows
There are some manual steps that need to be done:
1. Run the below interactive functions:
#+begin_src elisp
(all-the-icons-install-fonts)      ;; for icons
(+ligatures/install-patched-font)  ;; for ligatures
#+end_src
2. Navigate to the directory where the fonts are downloaded to, and double-click each font file, and install them.
* Testing using Docker
** Pull docker base image
#+begin_src sh
docker pull archlinux/archlinux:base-devel
#+end_src
** Build docker image
#+begin_src sh
docker build --ssh default -t lambertgreen/dotfiles .
#+end_src
** Run docker container
#+begin_src sh
docker run -it lambertgreen/dotfiles
#+end_src

* TODOs
** DONE Test reproducibility by using =Docker=
CLOSED: [2021-06-02 Wed 16:05]
** DONE Fix first start of =Nvim= to no show errors
CLOSED: [2021-06-02 Wed 21:33]
** DONE Replace individual per package calls with combined single line installs
CLOSED: [2022-03-29 Tue 16:52]
For example ~scoop p1 p2 p3~
** DONE Consider adding =Chemacs2= and =Doom= as sub-modules
CLOSED: [2021-12-14 Tue 20:08]
So that simply doing ~stow emacs~ get things all done, or provide shorter setup blocks.

*** Notes
I have already added =Chemacs2= as a submodule, and it was convenient, so I think we should simply add =Doom= as well. But then what about =Spacemacs=?

** DONE Add package manager export files for your machines [4/4]
CLOSED: [2021-12-14 Tue 20:08]
   Let's add these as a quick backup of existing installed applications.
*** [X] Add =Brewfile= for MacBook Air
CLOSED: [2021-12-14 Tue 20:08]
*** [X] Add =Brewfile= for MacBook Pro
CLOSED: [2021-12-14 Tue 20:08]
*** [X] Add =Scoop= export file for Windows Gaming rig
CLOSED: [2021-12-14 Tue 20:08]
*** [X] Add =Brewfile= for Ubuntu WSL machine
CLOSED: [2021-12-14 Tue 20:08]
** TODO Double check =Scoop= sections on a Windows machine
** TODO Address that =Powershell= needs modules to be installed
#+begin_src  ps
install-module -Name PSFzf -Scope CurrentUser
#+end_src
Note: modules ~z, get-childitemcolor~ require the parameter ~-AllowClobber~ as well.
Note: alternatively we could check-in the modules into this repository given they will show up under the symlinked =WindowsPowerShell= directory.
** TODO Add =Nix= files to the repo
** TODO Address issue where SSH-Agent will not work in =Windows=
The steps to get =git= working fine with =ssh= in =Windows= are:
1. The ~Windows OpenSSH Agent~ service must be changed from status ~disabled~ to ~enabled~ and set to start automatically.
2. Git must be configured to use the Windows SSH executable:
#+begin_src ps
git config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe
#+end_src

*Update (3/31/22)*: there is a long standing issue with the Windows SSH. Recommendation is to install OpenSSH via =Scoop=/=Choco=.
