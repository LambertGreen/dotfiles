#+TITLE: Dotfiles
#+AUTHOR: Lambert Green
#+DESCRIPTION: Personal dotfiles repository for cross-platform development environment configuration using GNU Stow
#+STARTUP: overview

* Quick Start

** 1. Clone the Repository

Clone to =~/dev/my/dotfiles= (recommended path):

#+begin_src bash :dir ~ :results silent
# Create directory if it doesn't exist
mkdir -p ~/dev/my

# Clone if not already cloned
if [ ! -d ~/dev/my/dotfiles ]; then
    git clone --recursive https://github.com/LambertGreen/dotfiles.git ~/dev/my/dotfiles
else
    echo "Repository already exists at ~/dev/my/dotfiles"
fi
#+end_src

Navigate to the repository:

#+begin_src bash :dir ~/dev/my/dotfiles :results silent
cd ~/dev/my/dotfiles
pwd
#+end_src

** 2. Bootstrap Your System

Bootstrap installs essential tools needed for the dotfiles system.

Available bootstrap options:
- =<level>=: =basic=, =typical=, or =max=
- =<platform>=: =arch=, =ubuntu=, =osx=, =win=, or =msys2=

Example for typical macOS setup:

#+begin_src bash :dir ~/dev/my/dotfiles/bootstrap :results output
# Check available bootstrap commands
just --list | grep bootstrap
#+end_src

Run bootstrap (idempotent - safe to run multiple times):

#+begin_src bash :dir ~/dev/my/dotfiles/bootstrap :results output
# Example: Bootstrap typical macOS setup
# just bootstrap-typical-osx
echo "Run: just bootstrap-typical-osx"
#+end_src

** 3. Deploy Configurations

Deploy dotfiles using the stow system:

#+begin_src bash :dir ~/dev/my/dotfiles/configs :results output
# Check available stow commands for your platform
just --list | grep stow
#+end_src

Example for typical macOS setup (idempotent with =-R= flag):

#+begin_src bash :dir ~/dev/my/dotfiles/configs :results output
# Example: Deploy typical macOS configurations
# just osx stow-typical
echo "Run: just osx stow-typical"
#+end_src

** 4. Verify Setup

Check that everything is configured correctly:

#+begin_src bash :dir ~/dev/my/dotfiles :results output
just health-check
#+end_src

* Configuration Levels

** Basic
Essential shell environment and tools:
- Shell configuration (bash, zsh)
- Git configuration
- Tmux configuration
- Package management setup
- Just command runner
- Fortune (command line quotes)

** Typical
Everything in Basic plus terminal productivity tools:
- Text editors (Vim, Neovim)
- Development tools (ctags, ripgrep, fd)
- Email configuration
- Terminal utilities (htop, gdb, lldb)
- Spelling configuration
- macOS-specific: Finicky (default browser picker)

** Max
Everything in Typical plus GUI applications:
- JetBrains IDEs configuration
- macOS-specific: Alfred, Hammerspoon, Karabiner, Raycast
- Linux-specific: X Windows configuration
- Advanced package managers (Nix)
- Window managers (Yabai, Skhd)

* Platform-Specific Notes

** macOS
- Uses Homebrew as primary package manager
- GUI apps available at typical and max levels
- Karabiner/Kanata for keyboard customization (max level only due to work restrictions)

** Linux (Arch/Ubuntu)
- Arch uses yay for AUR packages
- Ubuntu uses apt as primary, Homebrew as secondary
- Both support Nix at max level

** Windows
- Uses Scoop as primary package manager
- MSYS2 for Unix-like environment
- Limited GUI application support

* Health Check

The health check tool validates your dotfiles setup:

#+begin_src bash :dir ~/dev/my/dotfiles :results output
just health-check
#+end_src

It reports:
- Total symlinks managed by stow
- Any broken symlinks that need attention
- Overall system health status

** Cleaning Broken Links

Preview what would be removed:

#+begin_src bash :dir ~/dev/my/dotfiles :results output
just cleanup-broken-links
#+end_src

Actually remove broken links (use with caution):

#+begin_src bash :dir ~/dev/my/dotfiles :results output
# just cleanup-broken-links --remove
echo "Run with --remove flag to actually delete broken links"
#+end_src

* Testing

Test configurations in Docker before applying to your system:

#+begin_src bash :dir ~/dev/my/dotfiles/test :results output
# List available test commands
just --list | grep test
#+end_src

Example tests:

#+begin_src bash :dir ~/dev/my/dotfiles/test :results output
# Test basic Arch setup
# just test-stow basic arch

# Test typical Ubuntu setup  
# just test-stow typical ubuntu

echo "Uncomment commands above to run tests"
#+end_src

* Common Tasks

** Update Package Lists

After installing new packages, export the list:

*** macOS (Homebrew)

#+begin_src bash :results silent
# Check if Brewfile exists and back it up
if [ -f ~/.package_management/install/Brewfile ]; then
    cp ~/.package_management/install/Brewfile ~/.package_management/install/Brewfile.bak
fi

# Dump current packages
brew bundle dump --force --file=~/.package_management/install/Brewfile
#+end_src

*** Arch (pacman/yay)

#+begin_src bash :results silent
# Export official packages
pacman -Qqen > ~/.package_management/install/packages-pacman.txt

# Export AUR packages  
pacman -Qqem > ~/.package_management/install/packages-aur.txt
#+end_src

** Restow Configurations

If you've modified configs, restow to update symlinks (idempotent with =-R= flag):

#+begin_src bash :dir ~/dev/my/dotfiles/configs :results output
# Example for macOS typical level
# just osx stow-typical
echo "Run: just <platform> stow-<level>"
#+end_src

** Force Reinstall

If you have conflicts or need a clean reinstall:

#+begin_src bash :dir ~/dev/my/dotfiles/configs :results output
# Example for macOS typical level with force
# just osx stow-typical-force
echo "Run: just <platform> stow-<level>-force"
#+end_src

* Troubleshooting

** Permission Denied Errors
- Ensure you have sudo access for bootstrap phase
- Package installation may require admin privileges

** Symlink Conflicts
- Use health check to identify issues:
  #+begin_src bash :dir ~/dev/my/dotfiles :results output
  just health-check 2>&1 | grep -i "broken\|conflict" || echo "No conflicts found"
  #+end_src
- Remove conflicting files or use force install
- Common conflicts: =.bashrc=, =.zshrc= from system defaults

** Work Machine Restrictions
- Use =basic= or =typical= levels on work machines
- =max= level includes tools that may require admin access
- Karabiner/Kanata are specifically in max level due to restrictions

* Project Structure

#+begin_src bash :dir ~/dev/my/dotfiles :results output
tree -L 2 -d --noreport | head -20
#+end_src

Key directories:
- =bootstrap/= - System bootstrap scripts
- =configs/= - Stow packages organized by tool
  - =<tool>/= - Cross-platform configs
  - =<tool>_<os>/= - Platform-specific configs
- =tools/= - Utility scripts and tools
  - =dotfiles-health/= - Health check tool
- =test/= - Docker test infrastructure
- =just/= - Just configuration

* Contributing

1. Make changes in appropriate config directory
2. Test using Docker test infrastructure
3. Run health check to verify changes
4. Update package lists if needed
5. Submit PR with description of changes

For more detailed information, see the comprehensive setup guide in [[file:README.old.org][README.old.org]].

* Advanced Usage

** Environment Variables

Control dotfiles behavior with environment variables:

#+begin_src bash :results output
# Check current dotfiles directory
echo "DOTFILES_DIR=${DOTFILES_DIR:-~/dev/my/dotfiles}"

# Check home directory used by health check
echo "DOTFILES_HOME=${DOTFILES_HOME:-$HOME}"
#+end_src

** Logging

Enable detailed logging for troubleshooting:

#+begin_src bash :dir ~/dev/my/dotfiles :results output
# Run health check with logging
# just health-check-log
echo "Run: just health-check-log to save detailed output"
#+end_src

** Testing Individual Packages

Test specific package stowing without affecting others:

#+begin_src bash :dir ~/dev/my/dotfiles/configs :results silent
# Example: Test stowing just git configuration
# stow -n -v git
echo "Use stow -n flag for dry run"
#+end_src