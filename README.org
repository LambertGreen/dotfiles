#+TITLE: Dotfiles
#+AUTHOR: Lambert Green
#+DESCRIPTION: Cross-platform system configuration management and package management system
#+STARTUP: overview

* Introduction

This is a comprehensive cross-platform system configuration management and package management system. It provides a unified approach to managing dotfiles, system packages, and development environments across macOS, Linux (Arch/Ubuntu), and Windows platforms.

** Key Technologies

- **GNU Stow** - Symlink management for dotfiles deployment
- **Just** - Command runner for consistent cross-platform operations
- **Docker** - Automated testing across different platforms and configurations
- **Environment Variables** - Configuration-driven setup system

** Features

- **Auto-Detection** - Intelligent platform detection with manual override
- **Flexible Configuration** - Choose CLI tools, development environment, and GUI applications as needed
- **Work-Friendly** - Granular control to handle corporate restrictions
- **Tested** - Comprehensive Docker test suite validates configurations
- **Health Monitoring** - Built-in health check system validates symlink integrity

* Quick Start

** 1. Clone the Repository

Clone to =~/dev/my/dotfiles= (recommended path):

#+begin_src bash
mkdir -p ~/dev/my
git clone --recursive https://github.com/LambertGreen/dotfiles.git ~/dev/my/dotfiles
cd ~/dev/my/dotfiles
#+end_src

** 2. Configure Your System

Interactive configuration:

#+begin_src bash
./configure.sh
#+end_src

The script will auto-detect your platform and offer to use it, or you can choose manually:
- Platform: =arch=, =ubuntu=, =osx=, =msys2=
- Configuration: Select components that suit your needs
  - *CLI Editors*: Essential text editors (vim, neovim, emacs)
  - *CLI Utils*: Command-line utilities and tools
  - *Development Environment*: Programming languages and development tools
  - *GUI Applications*: Desktop applications (macOS only)

Examples:
- Server setup: Enable CLI editors and development tools
- Developer workstation: Enable all components
- Minimal system: Enable only what you need

Configuration is saved to =.dotfiles.env= for future use.

** 3. Bootstrap Your System

Install essential tools and package managers:

#+begin_src bash
./bootstrap.sh
#+end_src

This reads your configuration and installs the appropriate tools (including =just=).

** 4. Deploy Configurations

Deploy dotfiles using the stow system:

#+begin_src bash
just stow
#+end_src

** 5. Verify Setup

Check that everything is configured correctly:

#+begin_src bash
just check-health
#+end_src

** Alternative: Use Just Commands (if tools already installed)

If you already have =just= installed, you can use the convenience commands:

#+begin_src bash
just configure  # Interactive setup
just bootstrap  # Install tools
just stow       # Deploy configs
#+end_src

* Package Management

After initial setup, the system provides environment-driven package management:

** Package Installation

Install packages using your configured platform and categories:

#+begin_src bash
just install    # Installs packages for your configured platform/categories
#+end_src

This uses your saved configuration (DOTFILES_PLATFORM and category flags) to install the appropriate packages.

** System Updates

Keep your system and packages up to date:

#+begin_src bash
just update     # Updates packages for your configured platform
#+end_src

This updates packages using your configured package managers (brew, pacman, apt, etc.).

* Configuration System

The configuration system provides transparent, opt-in package management organized by functional categories.

** Core Categories

Always enabled for all configurations:
- *basic-core*: Essential shell tools (vim, git, stow, tmux, just)

** Base Categories

*** CLI_EDITORS
Primary command-line editors:
- Neovim with configurations
- Emacs (platform-specific variants)

*** DEV_ENV
Core development environment:
- Python (pyenv, pip packages)
- Node.js (npm packages)
- Language servers and development tools

*** CLI_UTILS
Terminal productivity tools:
- ripgrep, fd, htop
- Development utilities (ctags, gdb, lldb)
- Terminal multiplexers and shell enhancements

*** GUI_APPS
Desktop applications:
- IDEs (JetBrains, VS Code)
- Productivity tools (Alfred, Raycast on macOS)
- Platform-specific GUI applications

** Advanced Categories (Optional)

*** CLI_EDITORS_ADVANCED
Additional editors:
- Helix
- Vim variants
- Editor plugins and extensions

*** DEV_ENV_ADVANCED
Advanced development tools:
- Additional language support (Rust, Go, Java)
- Container tools
- Advanced debugging tools

*** CLI_UTILS_ADVANCED
Specialized command-line tools:
- Network utilities
- System monitoring tools
- Advanced shell utilities

*** GUI_APPS_ADVANCED
Specialized desktop applications:
- Window managers (Yabai, Skhd)
- Advanced productivity tools
- Platform-specific utilities

** Configuration Profiles

Pre-defined combinations for common use cases:

*** Minimal
- basic-core only
- Fastest setup, essential tools only

*** Developer
- basic-core + CLI_EDITORS + DEV_ENV
- Recommended for most development work

*** Workstation
- Developer + CLI_UTILS
- Full command-line productivity suite

*** Desktop
- Workstation + GUI_APPS
- Complete desktop environment

*** Power-user
- Desktop + all advanced categories
- Everything available

* Platform-Specific Notes

** macOS
- Uses Homebrew as primary package manager (brew/cask)
- GUI apps available in GUI_APPS categories
- Emacs via homebrew tap (emacs-plus@31)
- Platform-specific configs: git_osx, shell_osx, gnupg_osx

** Linux (Arch/Ubuntu)
- Arch: pacman (core) + AUR via yay helper
- Ubuntu: apt (core) + Homebrew Linux (additional packages)
- Emacs via AUR (emacs-plus) on Arch, apt on Ubuntu
- Platform-specific configs: git_linux, shell_linux, gnupg_linux

** Windows
- Scoop as primary package manager
- MSYS2 for Unix-like environment and additional packages
- Limited GUI application support
- Platform-specific configs: git_win, shell_msys2, gnupg_win

* Health Check

The health check tool validates your dotfiles setup:

#+begin_src bash
just health-check
#+end_src

It reports:
- Total symlinks managed by stow
- Any broken symlinks that need attention
- Overall system health status

** Cleaning Broken Links

Preview what would be removed:

#+begin_src bash
just cleanup-broken-links
#+end_src

Actually remove broken links:

#+begin_src bash
just cleanup-broken-links --remove
#+end_src

* Testing

Test configurations in Docker before applying to your system:

#+begin_src bash
# Enter test environment to explore all testing options
just test

# AUTOMATED tests (can be run in CI/scripts):
cd test && just test-stow basic arch      # Test through stow stage
cd test && just test-install basic arch   # Test through install stage  
cd test && just test-update basic arch    # Test complete workflow

# INTERACTIVE tests (require human interaction - DO NOT USE IN SCRIPTS):
cd test && just test-run basic arch       # Drops into interactive shell for manual testing
#+end_src

The tests validate the complete workflow: configure → bootstrap → stow → install → update.

* Common Tasks

** Update Package Lists

The configuration system manages packages via TOML files in `tools/package-management/package-definitions/`. To add new packages:

1. Identify the appropriate category (cli-editors, cli-utils, dev-env, gui-apps)
2. Edit the appropriate TOML file
3. Add your package to the correct priority (p1 or p2) and package manager section

Example:
#+begin_src toml
# In cli-utils.toml
[osx.p1.brew]
packages = [
    "fd",
    "ripgrep",
    "your-new-package"  # Add here
]
#+end_src

** Restow Configurations

If you've modified configs, restow to update symlinks:

#+begin_src bash
just stow    # Uses your configured platform automatically
#+end_src

** Show Current Configuration

View your current configuration settings:

#+begin_src bash
just show-config
#+end_src

* Troubleshooting

** Permission Denied Errors
- Ensure you have sudo access for bootstrap phase
- Package installation may require admin privileges

** Symlink Conflicts
- Use health check to identify issues
- Remove conflicting files or use force install
- Common conflicts: =.bashrc=, =.zshrc= from system defaults

** Work Machine Restrictions
- Configure only the components you need on work machines
- GUI applications may require admin access on some systems
- Advanced window managers and system tools are in advanced categories for optional installation

* Project Structure

#+begin_example
dotfiles/
├── bootstrap/           # System bootstrap scripts
├── configs/            # Stow packages organized by tool
│   ├── <tool>/        # Cross-platform configs
│   └── <tool>_<os>/   # Platform-specific configs
├── tools/             # Utility scripts and tools
│   ├── dotfiles-health/   # Health check tool
│   └── package-management/ # Configuration-based package management system
├── test/              # Docker test infrastructure
├── configure.sh       # Interactive configuration
├── bootstrap.sh       # System bootstrap (works with both systems)
└── justfile           # Environment-driven commands
#+end_example

* Contributing

1. Make changes in appropriate config directory (`configs/common/`, `configs/osx_only/`, etc.)
2. Test using Docker test infrastructure: `cd test && just test-stow basic arch`
3. Run health check to verify changes: `just check-health`
4. Update package definitions in `tools/package-management/package-definitions/` if adding new packages
5. Submit PR with description of changes

For more detailed information, see the comprehensive setup guide in [[file:README.old.org][README.old.org]].
