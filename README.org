#+TITLE: Dotfiles
#+AUTHOR: Lambert Green
#+DESCRIPTION: Cross-platform system configuration management and package management system
#+STARTUP: overview


* Introduction

This is a cross-platform dotfiles and unified package management system - think of it as a better, more flexible =Topgrade=. It provides a single interface to manage packages across multiple package managers, while also handling dotfiles deployment and system configuration.

** Key Features

- **Unified Package Management** - Python-based orchestration layer manages all your package managers:
  - System: brew/cask, pacman/AUR, apt, mas, choco, winget, scoop
  - Development: npm, pip, pipx, gem, cargo
  - Applications: zinit (zsh), elpaca (emacs), lazy.nvim (neovim)
- **Cross-Platform** - Consistent experience across macOS, Linux (Arch/Ubuntu), and Windows
- **Work-Friendly** - Separate work/personal contexts to handle corporate restrictions
- **Interactive UX** - TUI-driven flows with sensible timeouts for unattended execution
- **Testable & Automatable** - Test hooks enable CI validation and AI-based execution

** Key Technologies

- **Python** - Unified package management orchestration layer
- **GNU Stow** - Symlink management for dotfiles deployment
- **Just** - Command runner with a clean interface
- **Docker** - Automated testing including multi-package-manager validation
- **Machine Classes** - Package definitions using native package manager formats (Brewfile, packages.txt, requirements.txt)


* Architecture Documentation

- [[file:docs/terminal-spawning.md][Terminal Spawning]] - Interactive package manager execution
- [[file:docs/CLAUDE.md][Claude Code Integration]] - AI assistant workflows and validation
- [[file:test/Testing.org][Testing Documentation]] - Docker-based validation system

* Quick Start

** Quick Reference (returning users)

#+begin_src sh
# Clone (recommended path)
mkdir -p ~/dev/my
git clone --recursive https://github.com/LambertGreen/dotfiles.git ~/dev/my/dotfiles
cd ~/dev/my/dotfiles

# Initial setup (on a fresh machine without 'just')
./configure.sh                   # Configure machine class
./bootstrap.sh                   # Install essential tools (Python, Just, Stow)

# After bootstrap you can use 'just'
just stow                        # Deploy dotfiles
just install                     # Install all packages

# Daily operations
just update                      # Update registries & check for updates
just upgrade                     # Upgrade packages (interactive selection)
just doctor-check-health         # Verify system health

# Package manager information
just show-package-managers       # Show available package managers
just show-package-summary        # Show package counts
just show-package-list           # Show detailed package lists
#+end_src

Note: During configure, select a machine class (e.g., =laptop_work_mac=, =docker_developer_ubuntu=, =desktop_gaming_win=) to match your platform/use case.

* Machine Classes

Machine classes define what to stow and which packages to install for a given machine profile. They are composed along a few dimensions:

- **Platform**: macOS, Linux (Arch/Ubuntu), Windows, Docker/WSL/VM
- **Purpose**: work vs personal
- **Form factor**: laptop vs desktop (plus WSL/VM/Docker variants)

Browse the directory for concrete examples and native package lists:

- `machine-classes/`



* Platform-Specific Notes

** macOS
- Uses Homebrew as primary package manager (brew/cask)
- GUI apps available in GUI_APPS categories
- Emacs via homebrew tap (emacs-plus@31)
- Platform-specific configs: git_osx, shell_osx, gnupg_osx

** Linux (Arch/Ubuntu)
- Arch: pacman (core) + AUR via yay helper
- Ubuntu: apt (core) + Homebrew Linux (additional packages)
- Emacs via AUR (emacs-plus) on Arch, apt on Ubuntu
- Platform-specific configs: git_linux, shell_linux, gnupg_linux

** Windows
- Scoop as primary package manager
- MSYS2 for Unix-like environment and additional packages
- Limited GUI application support
- Platform-specific configs: git_win, shell_msys2, gnupg_win



* Health Check & Debugging

** System Health Validation

The health check validates your dotfiles setup:

#+begin_src sh
just doctor-check-health
#+end_src

It reports:
- Total symlinks managed by stow
- Any broken symlinks that need attention
- Overall system health status

** Advanced

Explore additional commands for diagnostics and fixes:

#+begin_src sh
# Example
just doctor-fix-broken-links

# See full list
just --list | sed -n '1,120p'
#+end_src

* Common Tasks

** Update Package Lists

The configuration system manages packages via machine class directories in `machine-classes/`. Each machine class contains package manager-specific files using native formats. To add new packages:

1. Identify the appropriate machine class (e.g., `docker_developer_ubuntu`, `laptop_personal_mac`)
2. Navigate to the appropriate package manager directory
3. Edit the package manager's native format file

Examples:
#+begin_src sh
# For Homebrew (macOS/Linux) - User packages (no sudo)
echo 'brew "your-new-package"' >> machine-classes/laptop_work_mac/brew/packages.user

# For Homebrew (macOS/Linux) - Admin packages (requires sudo)
echo 'cask "your-gui-app"' >> machine-classes/laptop_work_mac/brew/packages.admin

# For apt packages (Ubuntu)
echo "your-new-package" >> machine-classes/docker_developer_ubuntu/apt/packages.txt

# For pacman (Arch)
echo "your-new-package" >> machine-classes/docker_developer_arch/pacman/packages.txt
#+end_src

** Restow Configurations

If you've modified configs, restow to update symlinks:

#+begin_src sh
just stow    # Uses your configured platform automatically
#+end_src

** Show Current Configuration

View your current configuration settings:

#+begin_src sh
just
#+end_src

* Troubleshooting

** Permission Denied Errors
- Ensure you have sudo access for bootstrap phase
- Package installation may require admin privileges
- Use doctor recipes for diagnostics (e.g., =just doctor-check-health=)

** Symlink Conflicts
- Use =just doctor-check-health= to identify issues
- To fix broken links, run a doctor fix recipe (example below)
- Remove conflicting files or use force install
- Common conflicts: =.bashrc=, =.zshrc= from system defaults

** Package Manager Issues
- Use =just show-package-managers= to see detected PMs
- Use =just doctor-disable-a-package-manager= to enable/disable specific PMs
- Check Python cache: ensure no =__pycache__= directories are tracked

** Work Machine Restrictions
- Configure only the components you need on work machines
- GUI applications may require admin access on some systems
- Advanced window managers and system tools are in advanced categories for optional installation
- Use machine class system to define work-appropriate package sets

* Testing

The dotfiles project includes comprehensive Docker-based testing to validate configurations across multiple platforms and machine classes.

For detailed testing documentation, baselines, and success criteria, see [[file:test/Testing.org][Testing Documentation]].

* Contributing

1. Make changes in appropriate config directory (`configs/common/`, `configs/osx_only/`, etc.)
2. Test using Docker test infrastructure: `cd test && just test-developer-arch`
3. Run health check to verify changes: `just doctor-check-health`
4. Update machine class package lists if adding new packages
5. Submit PR with description of changes

For more detailed information, see the comprehensive setup guide in [[file:README.old.org][README.old.org]].
