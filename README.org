#+TITLE: Dotfiles

Contains config files and setup scripts for 3 platforms:
1. macOS
2. Windows
3. Linux

* Usage
This README provides steps to setup various applications and their associated configurations (the configurations are my own personal ones). To install and setup a specific application simply search this document based on the application name, and one will then get results filtered to the application e.g. if one searches for =Tmux=, then one will find the following: how to install it; how to install the =Tmux Plugin Manager=; how to symlink the config file;

* Install apps
** Install package manager
*** Install =Homebrew= :Linux:macOS:
#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src
** Install packages
*** Install packages using =Homebrew= :Linux:macOS:
**** Create =Brewfile=
***** Add common =Posix= packages
#+begin_src sh
cat << EOF > ./Brewfile
tap "homebrew/bundle"
tap "homebrew/core"

brew "bat"
brew "coreutils"
brew "dust"
brew "fd"
brew "htop"
brew "ispell"
brew "keychain"
brew "neofetch"
brew "neovim"
brew "pstree"
brew "ripgrep"
brew "stow"
brew "tldr"
brew "tree"
brew "tmux"
EOF
#+end_src

***** Add =Posix= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "automake"
brew "clang-format"
brew "cmake"
brew "editorconfig"
brew "python"
brew "direnv"
brew "freetds@0.91", link: true
brew "git"
brew "openjdk"
brew "gradle"
brew "jenv"
brew "jq"
brew "llvm"
brew "ninja"
brew "node"
brew "pyenv"
brew "pyenv-virtualenv"
brew "ruby-build"
brew "rbenv"
brew "rbtools"
brew "ruby"
brew "unixodbc"
EOF
#+end_src

***** Add =Linux= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "bash"
brew "fswatch"
brew "gcc"
brew "perl"
brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
brew "zsh"
EOF
#+end_src

***** Add =macOS= specific packages
#+begin_src
cat << EOF >> ./Brewfile

#tap "d12frosted/emacs-plus"                    -- not sure which one is better
#brew "d12frosted/emacs-plus/emacs-plus@27"     -- not sure which one is better

tap "daviderestivo/emacs-head"
brew "daviderestivo/emacs-head/emacs-head@28", args: ["with-cocoa", "with-modern-icon-elrumo2"]
EOF
#+end_src

***** Add =macOS= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

tap "cartr/qt4"
brew "cartr/qt4/pyqt@4"

cask "docker"
cask "virtualbox"
cask "parallels"

EOF
#+end_src

***** Add =macOS= casks
#+begin_src sh
cat << EOF >> ./Brewfile

tap "homebrew/cask"
tap "homebrew/cask-fonts"

#cask "amethyst"    -- unused - replaced by Hammerspoon
#cask "caffeine"    -- unused - replaced by Hammerspoon
#cask "keycastr"    -- unused - replaced by Hammerspoon

cask "appcleaner"
cask "alfred"
cask "cursorcerer"
# TODO replace Divvy with Hammerspoon
cask "divvy"
cask "font-iosevka-nerd-font"
cask "hammerspoon"
cask "iterm2"
cask "shortcutdetective"
EOF
#+end_src

**** Use =Brewfile=
#+begin_src sh
brew bundle
#+end_src

** Install from sources
Sometime we have to install from sources on systems that have dated packages and that =Homebrew= does not run on e.g. =CentOS 7=.
*** Installing =Tmux=
**** Install =Tmux= from =Github=
#+BEGIN_SRC sh
git clone https://github.com/tmux/tmux.git
cd tmux
sh autogen.sh
./configure
make && sudo make install
#+END_SRC
**** Install =Tmux= from =Sourceforge=
#+BEGIN_SRC sh
# Install libevent
LIBEVENT_VERSION="2.0.21-stable"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget https://github.com/downloads/libevent/libevent/libevent-$LIBEVENT_VERSION.tar.gz
tar zxvf libevent-$LIBEVENT_VERSION.tar.gz
cd libevent-$LIBEVENT_VERSION
./configure --prefix=/usr/local
make && sudo make install

# Install Tmux
TMUX_VERSION="3.2"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget http://downloads.sourceforge.net/tmux/tmux-$TMUX_VERSION.tar.gz
tar zxvf tmux-$TMUX_VERSION.tar.gz
cd tmux-$TMUX_VERSION
LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" ./configure --prefix=/usr/local
make && sudo make install
#+END_SRC
*** Installing =ZSH=
#+BEGIN_SRC sh
ZSH_SRC_LINK="https://sourceforge.net/projects/zsh/files/latest/download"
ZSH_SRC_FILE="zsh.tar.xz"

TMP_DIR=$(mktemp -d) && cd $TMP_DIR
curl -Lo "$ZSH_SRC_FILE" "$ZSH_SRC_LINK"
tar xJvf "$ZSH_SRC_FILE" --strip-components 1
./configure --prefix="/usr/local" \
    CPPFLAGS="-I/usr/local/include" \
    LDFLAGS="-L/usr/local/lib"
make -j && sudo make install
#+END_SRC

*** Installing =fzf= from =Github=
#+BEGIN_SRC sh
git clone --depth 1 https://github.com/junegunn/fzf.git
cd fzf
./install
#+END_SRC
*** Installing =fd= using =Cargo=
#+BEGIN_SRC sh
cargo install fd-find
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
*** Installing =bat= using =Cargo=
#+BEGIN_SRC sh
cargo install bat
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
* Install app specific plugin managers
** Install =Tmux Plugin Manager=
#+begin_src sh
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src

** Install =Zinit= a =Ash= plugin manager :automated:
The ~./shell/dot-zshrc~ checks if =Zinit= is installed and prompts user to run below steps:
#+begin_src sh
mkdir ~/.zinit
git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
#+end_src

* Install app integrations
Some of these are auto-installed, by apps themselves according to their config, but the below are not.
** Shell integrations
*** Install =Fzf=
#+begin_src sh
$(brew --prefix)/opt/fzf/install
#+end_src

** Editor integrations
*** Install =Chemacs 2=
Note: Using =Chemacs= means one has to run modified instructions for installing an Emacs distribution e.g. =Doom= or =Spacemacs=
#+begin_src sh
git clone https://github.com/plexus/chemacs2.git ~/.emacs.d
#+end_src

*** Install =Doom Emacs=
Note: If using =Chemacs= then the below is slightly different from the instructions from the web-site i.e. the target directory should not be ~.emacs.d~ since this is where =Chemacs= will be installed to.
#+begin_src sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.doom
~/.emacs.doom/bin/doom install
#+end_src
* Symlink dotfiles
Initially I had some hand written scripts for doing the symlinking, but am now using =GNU Stow= since it is a more standardized approach.

** Symlink dotfiles using =Gnu Stow=
*** Create =run-stow.sh= file
**** Create initial file
#+begin_src sh
cat << EOF > ./run-stow.sh
gnu_stow() {
    stow -t ~ \$@ --dot
}
EOF
chmod u+x ./run-stow.sh
#+end_src

**** Add =Posix= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell
gnu_stow git
gnu_stow git_my
gnu_stow git_work
gnu_stow tmux
gnu_stow vim
gnu_stow nvim
gnu_stow emacs
EOF
#+end_src

**** Add =macOS= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell_osx
gnu_stow git_osx
gnu_stow hammerspoon
EOF
#+end_src

**** Add =Linux= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell_linux
gnu_stow git_linux
EOF
#+end_src

*** Use =run-stow.sh= file
#+begin_src sh
./run-stow.sh
#+end_src

* TODOs
** TODO Test reproducibility by using =Docker=
** TODO Fix first start of =Nvim= to no show errors [/]
- [ ] It looks like one of the issue is related =gutentags= plugin and absence of =ctags=
