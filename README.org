#+TITLE: Dotfiles

Contains config files and setup scripts for 3 platforms:
1. macOS
2. Windows
3. Linux

* Usage
This README provides steps to setup various applications and their associated configurations (the configurations are my own personal ones). To install and setup a specific application simply search this document based on the application name, and one will then get results filtered to the application e.g. if one searches for =Tmux=, then one will find the following: how to install it; how to install the =Tmux Plugin Manager=; how to symlink the config file;

* Install apps
** Install package manager
*** Install =Homebrew= :Linux:macOS:
#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src
** Install packages
*** Install packages using =Homebrew= :Linux:macOS:
**** Create =Brewfile=
***** Add common =Posix= packages
#+begin_src sh
cat << EOF > ./Brewfile
tap "homebrew/bundle"
tap "homebrew/core"

brew "bat"
brew "coreutils"
brew "dust"
brew "fd"
brew "htop"
brew "ispell"
brew "keychain"
brew "neofetch"
brew "neovim"
brew "pstree"
brew "ripgrep"
brew "stow"
brew "tldr"
brew "tree"
brew "tmux"
EOF
#+end_src

***** Add =Posix= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "automake"
brew "clang-format"
brew "cmake"
brew "editorconfig"
brew "python"
brew "direnv"
brew "freetds@0.91", link: true
brew "git"
brew "openjdk"
brew "gradle"
brew "jenv"
brew "jq"
brew "llvm"
brew "ninja"
brew "node"
brew "pyenv"
brew "pyenv-virtualenv"
brew "ruby-build"
brew "rbenv"
brew "rbtools"
brew "ruby"
brew "unixodbc"
EOF
#+end_src

***** Add =Linux= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "bash"
brew "fswatch"
brew "gcc"
brew "perl"
brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
brew "zsh"
EOF
#+end_src

***** Add =macOS= specific packages
#+begin_src
cat << EOF >> ./Brewfile

tap "d12frosted/emacs-plus"
brew "d12frosted/emacs-plus/emacs-plus@27"
EOF
#+end_src
***** Add =macOS= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

tap "cartr/qt4"
brew "cartr/qt4/pyqt@4"
EOF
#+end_src
***** Add =macOS= casks
#+begin_src sh
cat << EOF >> ./Brewfile

tap "homebrew/cask"
tap "homebrew/cask-fonts"

# cask "amethyst"       -- unused - replaced by Hammerspoon
cask "appcleaner"
#cask "caffeine"        -- unused - replaced by Hammerspoon
cask "cursorcerer"
cask "font-iosevka-nerd-font"
EOF
#+end_src
**** Use =Brewfile=
#+begin_src sh
brew bundle
#+end_src

* Install app specific plugin managers
** Install =Tmux Plugin Manager=
#+begin_src sh
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src
** Install =Zinit= a =Ash= plugin manager :automated:
The ~./shell/dot-zshrc~ checks if =Zinit= is installed and prompts user to run below steps:
#+begin_src sh
mkdir ~/.zinit
git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
#+end_src
* Install app integrations
Some of these are auto-installed, by apps themselves according to their config, but the below are not.
** Shell integrations
*** Install =Fzf=
#+begin_src sh
$(brew --prefix)/opt/fzf/install
#+end_src
** Editor integrations
*** Install =Doom Emacs=
#+begin_src sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_src

* Symlink dotfiles
Initially I had some hand written scripts for doing the symlinking, but am now using =GNU Stow= since it is a more standardized approach.

** Symlink dotfiles using =Gnu Stow=
*** Create =run-stow.sh= file
**** Create initial file
#+begin_src sh
cat << EOF > ./run-stow.sh
gnu_stow() { stow -t ~ $@ --dot }
EOF
chmod u+x ./run-stow.sh
#+end_src
**** Add =Posix= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell
gnu_stow git
gnu_stow git_my
gnu_stow git_work
gnu_stow tmux
gnu_stow vim
gnu_stow nvim
EOF
#+end_src
**** Add =macOS= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell
gnu_stow shell_osx
gnu_stow git_osx
gnu_stow hammerspoon
EOF
#+end_src
**** Add =Linux= config
#+begin_src sh
cat << EOF >> ./run-stow.sh
gnu_stow shell_linux
gnu_stow git_linux
EOF
#+end_src
*** Use =run-stow.sh= file
#+begin_src sh
./run-stow.sh
#+end_src

* TODOs
** TODO Test reproducibility by using =Docker=
** TODO Fix first start of =Nvim= to no show errors [/]
- [ ] It looks like one of the issue is related =gutentags= plugin and absence of =ctags=
