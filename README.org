#+TITLE: Dotfiles

Contains config files and setup scripts for 3 platforms:
1. macOS
2. Windows
3. Linux

* Usage
This README provides steps to setup various applications and their associated configurations (the configurations are my own personal ones). To install and setup a specific application simply search this document based on the application name, and one will then get results filtered to the application e.g. if one searches for =Tmux=, then one will find the following: how to install it; how to install the =Tmux Plugin Manager=; how to symlink the config file;

* Install apps
** Install package manager
*** Install =Homebrew= :Linux:macOS:
#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src
*** Install =Scoop= :Windows:
#+begin_src ps
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
#+end_src
** Install packages
*** Install packages using =Homebrew= :Linux:macOS:
**** Create =Brewfile=
***** Add common =Posix= packages
#+begin_src sh
cat << EOF > ./Brewfile
tap "homebrew/bundle"
tap "homebrew/core"

brew "bat"
brew "coreutils"
brew "dust"
brew "fd"
brew "htop"
brew "ispell"
brew "keychain"
brew "neofetch"
brew "neovim"
brew "pstree"
brew "ripgrep"
brew "stow"
brew "tldr"
brew "tree"
brew "tmux"
brew "isync"
brew "mu"
brew "sword"
EOF
#+end_src

***** Add =Posix= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "automake"
brew "clang-format"
brew "cmake"
brew "editorconfig"
brew "python"
brew "direnv"
brew "freetds@0.91", link: true
brew "git"
brew "openjdk"
brew "gradle"
brew "jenv"
brew "jq"
brew "llvm"
brew "ninja"
brew "node"
brew "pyenv"
brew "pyenv-virtualenv"
brew "ruby-build"
brew "rbenv"
brew "rbtools"
brew "ruby"
brew "unixodbc"
EOF
#+end_src

***** Add =Linux= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

brew "bash"
brew "fswatch"
brew "gcc"
brew "perl"
brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
brew "zsh"
EOF
#+end_src

***** Add =macOS= specific packages
#+begin_src
cat << EOF >> ./Brewfile

#tap "d12frosted/emacs-plus"                    -- not sure which one is better
#brew "d12frosted/emacs-plus/emacs-plus@27"     -- not sure which one is better

tap "daviderestivo/emacs-head"
brew "daviderestivo/emacs-head/emacs-head@28", args: ["with-cocoa", "with-modern-icon-elrumo2"]
EOF
#+end_src

***** Add =macOS= development packages
#+begin_src sh
cat << EOF >> ./Brewfile

tap "cartr/qt4"
brew "cartr/qt4/pyqt@4"
cask "docker"
EOF
#+end_src

***** Add =macOS= casks
#+begin_src sh
cat << EOF >> ./Brewfile

tap "homebrew/cask"
tap "homebrew/cask-fonts"

#cask "amethyst"    -- unused - replaced by Hammerspoon
#cask "caffeine"    -- unused - replaced by Hammerspoon
#cask "keycastr"    -- unused - replaced by Hammerspoon

cask "appcleaner"
cask "alfred"
cask "cursorcerer"
cask "divvy"                        # TODO Replace Divvy with Hammerspoon
cask "lincastor"                    # TODO Replace Lincastor with Hammerspoon
cask "font-iosevka-nerd-font"
cask "hammerspoon"
cask "iterm2"
cask "shortcutdetective"
cask "basictex"
EOF
#+end_src

**** Use =Brewfile=
#+begin_src sh
brew bundle
#+end_src
*** Install packages using =Scoop= :Windows:
#+begin_src ps
#-----------------------
# Command-line utilities
#-----------------------
scoop install ack
scoop install aria2
scoop install bat
scoop install clink
scoop install coreutils
scoop install curl
scoop install dust
scoop install fd
scoop install findutils
scoop install fzf
scoop install neofetch
scoop install ripgrep
scoop install tldr
scoop install wget

#----------
# Terminals
#----------
scoop install alacritty

#--------
# Editors
#--------
scoop install emacs
scoop install neovim
scoop install vscode

#------
# Fonts
#------
scoop install Hack
scoop install iosevka

#-----------------
# System utilities
#-----------------
scoop install 7zip
scoop install everything
scoop install openssh
scoop install processhacker
scoop install rapidee
scoop install sudo
scoop install sysinternals
scoop install windirstat

#------------------
# Desktop utilities
#------------------
scoop install autohotkey
scoop install carnac
scoop install keypirinha
scoop install powertoys
scoop install sumatrapdf
scoop install vlc
scoop install wox

#------------
# Development
#------------
scoop install cmake
scoop install git
scoop install nodejs
scoop install openjdk
scoop install perl
scoop install python
scoop install springboot
scoop install vcredist2015
#+end_src

** Install from sources
Sometime we have to install from sources on systems that have dated packages and that =Homebrew= does not run on e.g. =CentOS 7=.
*** Installing =git=
#+BEGIN_SRC sh
export VER="2.27.0"
wget https://github.com/git/git/archive/v${VER}.tar.gz
tar -xvf v${VER}.tar.gz
rm -f v${VER}.tar.gz
cd git-*
make configure
sudo ./configure --prefix=/usr/local
sudo make
sudo make install
#+END_SRC
*** Installing =curl=
#+BEGIN_SRC sh
export VER="7.67.0"
wget https://curl.haxx.se/download/curl-${VER}.tar.gz
gunzip -c curl-${VER}.tar.gz | tar xvf -
cd curl-${VER}
./configure --with-ssl --prefix=/usr/local
make
sudo make install
#+END_SRC
*** Installing =Tmux=
**** Install =Tmux= from =Github=
#+BEGIN_SRC sh
git clone https://github.com/tmux/tmux.git
cd tmux
sh autogen.sh
./configure
make && sudo make install
#+END_SRC
**** Install =Tmux= from =Sourceforge=
#+BEGIN_SRC sh
# Install libevent
LIBEVENT_VERSION="2.0.21-stable"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget https://github.com/downloads/libevent/libevent/libevent-$LIBEVENT_VERSION.tar.gz
tar zxvf libevent-$LIBEVENT_VERSION.tar.gz
cd libevent-$LIBEVENT_VERSION
./configure --prefix=/usr/local
make && sudo make install

# Install Tmux
TMUX_VERSION="3.2"
[ -d ~/packages ] || mkdir ~/packages; pushd ~/packages;
wget http://downloads.sourceforge.net/tmux/tmux-$TMUX_VERSION.tar.gz
tar zxvf tmux-$TMUX_VERSION.tar.gz
cd tmux-$TMUX_VERSION
LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" ./configure --prefix=/usr/local
make && sudo make install
#+END_SRC
*** Installing =ZSH=
#+BEGIN_SRC sh
ZSH_SRC_LINK="https://sourceforge.net/projects/zsh/files/latest/download"
ZSH_SRC_FILE="zsh.tar.xz"

TMP_DIR=$(mktemp -d) && cd $TMP_DIR
curl -Lo "$ZSH_SRC_FILE" "$ZSH_SRC_LINK"
tar xJvf "$ZSH_SRC_FILE" --strip-components 1
./configure --prefix="/usr/local" \
    CPPFLAGS="-I/usr/local/include" \
    LDFLAGS="-L/usr/local/lib"
make -j && sudo make install
#+END_SRC

*** Installing =fzf= from =Github=
#+BEGIN_SRC sh
git clone --depth 1 https://github.com/junegunn/fzf.git
cd fzf
./install
#+END_SRC
*** Installing =fd= using =Cargo=
#+BEGIN_SRC sh
cargo install fd-find
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
*** Installing =bat= using =Cargo=
#+BEGIN_SRC sh
cargo install bat
ln -s ~/.cargo/bin ~/bin # optional if the cargo bin is default in PATH
#+END_SRC
** Install python apps with =pip=
#+begin_src
python3 -m pip install dploy
python3 -m pip install ntfy
#+end_src
* Install app specific plugin managers
** Install =Tmux Plugin Manager= :automated:
The =Tmux= configuration file checks for the existence of the local directory, and if not present it runs the below command:
#+begin_src sh
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src

** Install =Zinit= a =Zsh= plugin manager :automated:
The ~./shell/dot-zshrc~ checks if =Zinit= is installed and prompts user to run below steps:
#+begin_src sh
mkdir ~/.zinit
git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
#+end_src
** Install =Sword='s =installmgr=
#+begin_src sh
export SWORD_PATH=~/.sword
mkdir -p $SWORD_PATH/mods.d

echo yes |installmgr -init               # create a basic user config file
echo yes |installmgr -sc                 # sync config with list of known remote repos
#+end_src

* Install app integrations
Some of these are auto-installed, by apps themselves according to their config, but the below are not.
** Shell integrations
*** Install =Fzf=
#+begin_src sh
$(brew --prefix)/opt/fzf/install
#+end_src

** Editor integrations
*** =Chemacs 2=
Note: Using =Chemacs= means one has to run modified instructions for installing an Emacs distribution e.g. =Doom= or =Spacemacs=
The install instructions for =Chemacs 2= state to clone the repository, but we add it as a git submodule into the ~dot-emacs.d~ directory, ready for usage with =stow=.

*** Install =Doom Emacs=
Note: If using =Chemacs= then the below is slightly different from the instructions from the web-site i.e. the target directory should not be ~.emacs.d~ since this is where =Chemacs= will be installed to.
#+begin_src sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.doom
~/.emacs.doom/bin/doom install
#+end_src

*** Install =Latex tools=
Note: The system should be installed via a package manager e.g. ~brew install basictex~, which provides the ~tlmgr~, which should then be used:
#+begin_src sh
sudo tlmgr update --self && \
    sudo tlmgr install \
    # for svg images
    dvisvgm \
    # for png images
    dvipng \
    # fonts
    collection-fontsrecommended \
    # source code highlighting
    minted
#+end_src

I am not sure if the below is needed?
#+begin_src sh
sudo tlmgr install wrapfig marvosym wasy wasysym
#+end_src
*** Setup =Email tools=
**** Authentication
***** macOS
****** TODO Fill in gaps via testing on a clean machine
****** Add mail app-password to keychain
******* Add app-password for mbsync from IMAP
#+begin_src sh
security find-generic-password -a lgreen -s mbsync-gmail-password -w <PASS>
#+end_src

******* Add app-password for SMTP server
#+begin_src sh
security add-internet-password -a lambert.green@gmail.com -l smtp.gmail.com -P 587 -r smtp -s smtp.gmail.com -w <PASS> -U
#+end_src
*** Setup =Bible (KJV)=
Dependencies: see installing of =Sword= in earlier section of this document.
#+begin_src sh
echo yes |installmgr -r CrossWire        # refresh remote source
echo yes |installmgr -ri CrossWire KJV   # install module from remote source
installmgr -l                            # list installed modules

#Test
diatheke -b KJV -k Jn 3:16
#+end_src

* Symlink dotfiles
Initially I had some hand written scripts for doing the symlinking, but am now using =GNU Stow= since it is a more standardized approach.

** Symlink dotfiles using =Gnu Stow= :Linux:macOS:
*** Stow =Posix= configs
#+begin_src sh
stow shell git git_my git_work tmux vim nvim emacs
#+end_src

*** Stow =macOS= config
#+begin_src sh
stow shell_osx git_osx alacritty_osx hammerspoon
#+end_src

*** Stow =Linux= config
#+begin_src sh
stow shell_linux git_linux alacritty_linux
#+end_src

** Symlink dotfiles using =Dploy= :Windows:
Unfortunately there is no =Gnu Stow= for =Windows=, but the =dploy= python package comes to the rescue.
#+begin_src ps
# Pre-requisates
# - Install Dploy: ~pip instal dploy~
# - Run the below in an Admin session e.g. ~sudo powershell~

#-------------------
# Windows only stuff
#-------------------
dploy stow ./alacritty_win $home
dploy link ./autohotkey/dot-autohotkey $home/.autohotkey
dploy stow ./Keypirinha $home
dploy stow ./WindowsPowerShell $home
dploy stow ./WindowsTerminal $home

#-------------
# Vim + Neovim
#-------------
dploy link ./vim/dot-vimrc $home/_vimrc
dploy link ./vim/dot-gvimrc $home/_gvimrc
dploy stow ./nvim/.config/nvim $home/appdata/local/nvim

#-------------
# Emacs
#-------------
dploy link ./emacs/dot-emacs-profile $home/.emacs-profile
dploy link ./emacs/dot-emacs-profiles.el $home/.emacs-profiles.el
dploy link ./emacs/dot-emacs.default $home/.emacs.default
dploy link ./emacs/dot-doom.d $home/.doom.d

#-------------
# Git
#-------------
dploy link ./git/dot-gitignore $home/.gitignore
dploy link ./git/dot-common.gitconfig $home/.common.gitconfig
dploy link ./git_my/dot-my.gitconfig $home/.my.gitconfig
dploy link ./git_win/dot-gitconfig $home/.gitconfig
#+end_src
* Special app configurations
** Setting up =tmux-256color= support
I have run into variations of issues trying to setup =24 bit true color= support, and so I am starting to capture specific here.

*** Setup on =macOS=
See https://github.com/htop-dev/htop/issues/251
#+begin_example
Aha. It seems the terminfo for tmux-256color that comes with the latest Homebrew ncurses, or even the one downloaded from invisible-island.net is not configured to work properly with htop. Very strange.

After a bit of looking around, it seems the best one to use is the one provided by the maintainer of tmux, found here: https://gist.github.com/nicm/ea9cf3c93f22e0246ec858122d9abea1

Using that one restores colours in htop for me. It can be installed by downloading the gist and running /usr/bin/tic -x <gist filename>.
#+end_example

The contents of the gist mentioned above are:
#+begin_src
#	Reconstructed via infocmp from file: /usr/share/terminfo/t/tmux-256color
tmux-256color|tmux with 256 colors,
	OTbs, OTpt, am, hs, km, mir, msgr, xenl, AX, G0,
	colors#256, cols#80, it#8, lines#24, pairs#32767, U8#1,
	acsc=++\,\,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~,
	bel=^G, blink=\E[5m, bold=\E[1m, cbt=\E[Z, civis=\E[?25l,
	clear=\E[H\E[J, cnorm=\E[34h\E[?25h, cr=^M,
	csr=\E[%i%p1%d;%p2%dr, cub=\E[%p1%dD, cub1=^H,
	cud=\E[%p1%dB, cud1=^J, cuf=\E[%p1%dC, cuf1=\E[C,
	cup=\E[%i%p1%d;%p2%dH, cuu=\E[%p1%dA, cuu1=\EM,
	cvvis=\E[34l, dch=\E[%p1%dP, dch1=\E[P, dim=\E[2m,
	dl=\E[%p1%dM, dl1=\E[M, dsl=\E]0;\007, ed=\E[J, el=\E[K,
	el1=\E[1K, enacs=\E(B\E)0, flash=\Eg, fsl=^G, home=\E[H,
	ht=^I, hts=\EH, ich=\E[%p1%d@, il=\E[%p1%dL, il1=\E[L,
	ind=^J, is2=\E)0, kDC=\E[3;2~, kEND=\E[1;2F, kHOM=\E[1;2H,
	kIC=\E[2;2~, kLFT=\E[1;2D, kNXT=\E[6;2~, kPRV=\E[5;2~,
	kRIT=\E[1;2C, kbs=\177, kcbt=\E[Z, kcub1=\EOD, kcud1=\EOB,
	kcuf1=\EOC, kcuu1=\EOA, kdch1=\E[3~, kend=\E[4~, kf1=\EOP,
	kf10=\E[21~, kf11=\E[23~, kf12=\E[24~, kf13=\E[1;2P,
	kf14=\E[1;2Q, kf15=\E[1;2R, kf16=\E[1;2S, kf17=\E[15;2~,
	kf18=\E[17;2~, kf19=\E[18;2~, kf2=\EOQ, kf20=\E[19;2~,
	kf21=\E[20;2~, kf22=\E[21;2~, kf23=\E[23;2~,
	kf24=\E[24;2~, kf25=\E[1;5P, kf26=\E[1;5Q, kf27=\E[1;5R,
	kf28=\E[1;5S, kf29=\E[15;5~, kf3=\EOR, kf30=\E[17;5~,
	kf31=\E[18;5~, kf32=\E[19;5~, kf33=\E[20;5~,
	kf34=\E[21;5~, kf35=\E[23;5~, kf36=\E[24;5~,
	kf37=\E[1;6P, kf38=\E[1;6Q, kf39=\E[1;6R, kf4=\EOS,
	kf40=\E[1;6S, kf41=\E[15;6~, kf42=\E[17;6~,
	kf43=\E[18;6~, kf44=\E[19;6~, kf45=\E[20;6~,
	kf46=\E[21;6~, kf47=\E[23;6~, kf48=\E[24;6~,
	kf49=\E[1;3P, kf5=\E[15~, kf50=\E[1;3Q, kf51=\E[1;3R,
	kf52=\E[1;3S, kf53=\E[15;3~, kf54=\E[17;3~,
	kf55=\E[18;3~, kf56=\E[19;3~, kf57=\E[20;3~,
	kf58=\E[21;3~, kf59=\E[23;3~, kf6=\E[17~, kf60=\E[24;3~,
	kf61=\E[1;4P, kf62=\E[1;4Q, kf63=\E[1;4R, kf7=\E[18~,
	kf8=\E[19~, kf9=\E[20~, khome=\E[1~, kich1=\E[2~,
	kind=\E[1;2B, kmous=\E[M, knp=\E[6~, kpp=\E[5~,
	kri=\E[1;2A, nel=\EE, op=\E[39;49m, rc=\E8, rev=\E[7m,
	ri=\EM, ritm=\E[23m, rmacs=^O, rmcup=\E[?1049l, rmir=\E[4l,
	rmkx=\E[?1l\E>, rmso=\E[27m, rmul=\E[24m,
	rs2=\Ec\E[?1000l\E[?25h, sc=\E7,
	setab=\E[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m,
	setaf=\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m,
	sgr=\E[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;%?%p5%t;2%;m%?%p9%t\016%e\017%;,
	sgr0=\E[m\017, sitm=\E[3m, smacs=^N, smcup=\E[?1049h,
	smir=\E[4h, smkx=\E[?1h\E=, smso=\E[7m, smul=\E[4m,
	tbc=\E[3g, tsl=\E]0;, Cr=\E]112\007, Cs=\E]12;%p1%s\007,
	E0=\E(B, Ms=\E]52;%p1%s;%p2%s\007, S0=\E(%p1%c,
	Se=\E[2 q, Ss=\E[%p1%d q, TS=\E]0;, kDC3=\E[3;3~,
	kDC4=\E[3;4~, kDC5=\E[3;5~, kDC6=\E[3;6~, kDC7=\E[3;7~,
	kDN=\E[1;2B, kDN3=\E[1;3B, kDN4=\E[1;4B, kDN5=\E[1;5B,
	kDN6=\E[1;6B, kDN7=\E[1;7B, kEND3=\E[1;3F, kEND4=\E[1;4F,
	kEND5=\E[1;5F, kEND6=\E[1;6F, kEND7=\E[1;7F,
	kHOM3=\E[1;3H, kHOM4=\E[1;4H, kHOM5=\E[1;5H,
	kHOM6=\E[1;6H, kHOM7=\E[1;7H, kIC3=\E[2;3~, kIC4=\E[2;4~,
	kIC5=\E[2;5~, kIC6=\E[2;6~, kIC7=\E[2;7~, kLFT3=\E[1;3D,
	kLFT4=\E[1;4D, kLFT5=\E[1;5D, kLFT6=\E[1;6D,
	kLFT7=\E[1;7D, kNXT3=\E[6;3~, kNXT4=\E[6;4~,
	kNXT5=\E[6;5~, kNXT6=\E[6;6~, kNXT7=\E[6;7~,
	kPRV3=\E[5;3~, kPRV4=\E[5;4~, kPRV5=\E[5;5~,
	kPRV6=\E[5;6~, kPRV7=\E[5;7~, kRIT3=\E[1;3C,
	kRIT4=\E[1;4C, kRIT5=\E[1;5C, kRIT6=\E[1;6C,
	kRIT7=\E[1;7C, kUP=\E[1;2A, kUP3=\E[1;3A, kUP4=\E[1;4A,
	kUP5=\E[1;5A, kUP6=\E[1;6A, kUP7=\E[1;7A, rmxx=\E[29m,
	smxx=\E[9m,
#+end_src

* Testing using Docker
** Pull docker base image
#+begin_src sh
docker pull archlinux/archlinux:base-devel
#+end_src
** Build docker image
#+begin_src sh
docker build --ssh default -t lambertgreen/dotfiles .
#+end_src
** Run docker container
#+begin_src sh
docker run -it lambertgreen/dotfiles
#+end_src

* TODOs
** DONE Test reproducibility by using =Docker=
CLOSED: [2021-06-02 Wed 16:05]
** DONE Fix first start of =Nvim= to no show errors
CLOSED: [2021-06-02 Wed 21:33]
** TODO Replace individual per package calls with combined single line installs
For example ~scoop p1 p2 p3~
** TODO Consider adding =Chemacs2= and =Doom= as sub-modules
So that simply doing ~stow emacs~ get things all done, or provide shorter setup blocks.

*** Notes
I have already added =Chemacs2= as a submodule, and it was convenient, so I think we should simply add =Doom= as well. But then what about =Spacemacs=?

** TODO Consider adding a =Brewfile=
1. This is more automated, and one can run checks on a system against a Brewfile.
2. Less blocks in this README
