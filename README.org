#+TITLE: Dotfiles
#+AUTHOR: Lambert Green
#+DESCRIPTION: Cross-platform system configuration management and package management system
#+STARTUP: overview

* Introduction

This is a comprehensive cross-platform system configuration management and package management system. It provides a unified approach to managing dotfiles, system packages, and development environments across macOS, Linux (Arch/Ubuntu), and Windows platforms.

** Key Technologies

- **GNU Stow** - Symlink management for dotfiles deployment
- **Just** - Command runner for consistent cross-platform operations
- **Docker** - Automated testing across different platforms and configurations
- **Environment Variables** - Configuration-driven setup (DOTFILES_PLATFORM, DOTFILES_LEVEL)

** Features

- **Auto-Detection** - Intelligent platform detection with manual override
- **Tiered Configuration** - Basic (shell), Typical (development), Max (GUI applications)
- **Work-Friendly** - Separate package levels to handle corporate restrictions
- **Tested** - Comprehensive Docker test suite validates configurations
- **Health Monitoring** - Built-in health check system validates symlink integrity

* Quick Start

** 1. Clone the Repository

Clone to =~/dev/my/dotfiles= (recommended path):

#+begin_src bash
mkdir -p ~/dev/my
git clone --recursive https://github.com/LambertGreen/dotfiles.git ~/dev/my/dotfiles
cd ~/dev/my/dotfiles
#+end_src

** 2. Configure Your System

Interactive configuration (runs before any tools are installed):

#+begin_src bash
./configure.sh
#+end_src

The script will auto-detect your platform and offer to use it, or you can choose manually:
- Platform: =arch=, =ubuntu=, =osx=, =msys2=
- Level: =basic=, =typical=, =max=

Configuration is saved to =.dotfiles.env= for future use.

** 3. Bootstrap Your System

Install essential tools and package managers:

#+begin_src bash
./bootstrap.sh
#+end_src

This reads your configuration and installs the appropriate tools (including =just=).

** 4. Deploy Configurations

Deploy dotfiles using the stow system:

#+begin_src bash
just stow
#+end_src

** 5. Verify Setup

Check that everything is configured correctly:

#+begin_src bash
just health-check
#+end_src

** Alternative: Use Just Commands (if tools already installed)

If you already have =just= installed, you can use the convenience commands:

#+begin_src bash
just configure  # Interactive setup
just bootstrap  # Install tools
just stow       # Deploy configs
#+end_src

* Package Management

After initial setup, the system provides environment-driven package management:

** Package Installation

Install packages using your configured platform and level:

#+begin_src bash
just install    # Installs packages for your configured platform/level
#+end_src

This uses your saved configuration (DOTFILES_PLATFORM/DOTFILES_LEVEL) to install the appropriate packages.

** System Updates

Keep your system and packages up to date:

#+begin_src bash
just update     # Updates packages for your configured platform
#+end_src

This updates packages using your configured package managers (brew, pacman, apt, etc.).

* Configuration Levels

** Basic
Essential shell environment and tools:
- Shell configuration (bash, zsh)
- Git configuration
- Tmux configuration
- Package management setup
- Just command runner
- Fortune (command line quotes)

** Typical
Everything in Basic plus terminal productivity tools:
- Text editors (Vim, Neovim)
- Development tools (ctags, ripgrep, fd)
- Email configuration
- Terminal utilities (htop, gdb, lldb)
- Spelling configuration
- macOS-specific: Finicky (default browser picker)

** Max
Everything in Typical plus GUI applications:
- JetBrains IDEs configuration
- macOS-specific: Alfred, Hammerspoon, Karabiner, Raycast
- Linux-specific: X Windows configuration
- Advanced package managers (Nix)
- Window managers (Yabai, Skhd)

* Platform-Specific Notes

** macOS
- Uses Homebrew as primary package manager
- GUI apps available at typical and max levels
- Karabiner/Kanata for keyboard customization (max level only due to work restrictions)

** Linux (Arch/Ubuntu)
- Arch uses yay for AUR packages
- Ubuntu uses apt as primary, Homebrew as secondary
- Both support Nix at max level

** Windows
- Uses Scoop as primary package manager
- MSYS2 for Unix-like environment
- Limited GUI application support

* Health Check

The health check tool validates your dotfiles setup:

#+begin_src bash
just health-check
#+end_src

It reports:
- Total symlinks managed by stow
- Any broken symlinks that need attention
- Overall system health status

** Cleaning Broken Links

Preview what would be removed:

#+begin_src bash
just cleanup-broken-links
#+end_src

Actually remove broken links:

#+begin_src bash
just cleanup-broken-links --remove
#+end_src

* Testing

Test configurations in Docker before applying to your system:

#+begin_src bash
just test-stow basic arch
just test-stow typical ubuntu
#+end_src

* Common Tasks

** Update Package Lists

After installing new packages, export the list:

*** macOS (Homebrew)

#+begin_src bash
brew bundle dump --force --file=~/.package_management/install/Brewfile
#+end_src

*** Arch (pacman/yay)

#+begin_src bash
pacman -Qqen > ~/.package_management/install/packages-pacman.txt
pacman -Qqem > ~/.package_management/install/packages-aur.txt
#+end_src

** Restow Configurations

If you've modified configs, restow to update symlinks:

#+begin_src bash
just osx-stow-typical
#+end_src

** Force Reinstall

If you have conflicts or need a clean reinstall:

#+begin_src bash
just osx-stow-typical-force
#+end_src

* Troubleshooting

** Permission Denied Errors
- Ensure you have sudo access for bootstrap phase
- Package installation may require admin privileges

** Symlink Conflicts
- Use health check to identify issues
- Remove conflicting files or use force install
- Common conflicts: =.bashrc=, =.zshrc= from system defaults

** Work Machine Restrictions
- Use =basic= or =typical= levels on work machines
- =max= level includes tools that may require admin access
- Karabiner/Kanata are specifically in max level due to restrictions

* Project Structure

#+begin_example
dotfiles/
├── bootstrap/           # System bootstrap scripts
├── configs/            # Stow packages organized by tool
│   ├── <tool>/        # Cross-platform configs
│   └── <tool>_<os>/   # Platform-specific configs
├── tools/             # Utility scripts and tools
│   └── dotfiles-health/  # Health check tool
├── test/              # Docker test infrastructure
└── just/              # Just configuration
#+end_example

* Contributing

1. Make changes in appropriate config directory
2. Test using Docker test infrastructure
3. Run health check to verify changes
4. Update package lists if needed
5. Submit PR with description of changes

For more detailed information, see the comprehensive setup guide in [[file:README.old.org][README.old.org]].
