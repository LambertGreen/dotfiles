#!/usr/bin/env just
# -*- mode: just -*-

# Package installation for Ubuntu Linux
# Run once during initial machine setup
# Uses multiple package managers: apt (system) + homebrew + nix

import 'justfile_dev_common'

default:
    @just --list

# 📦 Update system packages (always run first)
update-system:
    sudo apt update && sudo apt upgrade -y

# 🔧 Install essential system packages (Priority 1 - Core)
install-system-core: update-system
    sudo apt install -y \
        build-essential \
        curl \
        wget \
        git \
        stow \
        zsh \
        tmux \
        python3 \
        python3-pip \
        python3-venv \
        nodejs \
        npm \
        ruby \
        ruby-dev \
        rustc \
        cargo \
        gpg \
        ca-certificates

# 🛠️ Install system tools (Priority 2 - Common CLI tools)
install-system-tools: install-system-core
    sudo apt install -y \
        neovim \
        htop \
        tree \
        unzip \
        jq \
        ripgrep \
        fd-find \
        bat

# 🍺 Install Homebrew packages (if homebrew is available)
install-homebrew-packages:
    @if command -v brew >/dev/null 2>&1; then \
        echo "📦 Installing Homebrew packages..."; \
        brew install \
            eza \
            dust \
            just \
            direnv \
            zoxide; \
    else \
        echo "⚠️  Homebrew not available - install with bootstrap-typical or bootstrap-max"; \
    fi

# ❄️ Install Nix packages (if nix is available)
install-nix-packages:
    @if command -v nix >/dev/null 2>&1; then \
        echo "📦 Installing Nix packages..."; \
        nix-env -i \
            ripgrep \
            fd \
            bat; \
    else \
        echo "⚠️  Nix not available - install with bootstrap-max"; \
    fi

# 🔧 Install work-specific tools
install-work-tools: install-system-tools
    sudo apt install -y \
        docker.io \
        docker-compose
    # Add user to docker group
    sudo usermod -aG docker $$USER
    @echo "Log out and back in for docker group to take effect"

# 📧 Install email tools
install-email-tools: install-system-core
    sudo apt install -y \
        isync \
        mu4e \
        msmtp

# 🎨 Install GUI tools (if needed)
install-gui-tools: install-system-core
    sudo apt install -y \
        emacs \
        firefox \
        code

# =============================================================================
# LEVEL-BASED INSTALLATION (matches bootstrap levels)
# =============================================================================

# 🔰 Basic level - system packages only (requires bootstrap-basic)
install-basic: install-system-tools setup-dev-environment
    @echo "✅ Basic Ubuntu install complete (apt packages only)!"

# 🔶 Typical level - system + homebrew packages (requires bootstrap-typical)
install-typical: install-basic install-homebrew-packages install-gui-tools install-email-tools
    @echo "✅ Typical Ubuntu install complete (apt + homebrew packages)!"

# 🔸 Max level - all package managers (requires bootstrap-max)
install-max: install-typical install-nix-packages install-work-tools
    @echo "✅ Max Ubuntu install complete (apt + homebrew + nix packages)!"

# 🔍 Verify installation
verify-installation:
    @echo "Verifying Ubuntu installation..."
    @command -v git >/dev/null && echo "✅ git" || echo "❌ git"
    @command -v stow >/dev/null && echo "✅ stow" || echo "❌ stow"
    @command -v tmux >/dev/null && echo "✅ tmux" || echo "❌ tmux"
    @command -v nvim >/dev/null && echo "✅ neovim" || echo "❌ neovim"
    @command -v zsh >/dev/null && echo "✅ zsh" || echo "❌ zsh"
    @command -v brew >/dev/null && echo "✅ homebrew" || echo "❌ homebrew"
    @just verify-dev-tools

# 📥 Install from requirements file
install-from-requirements file:
    python3 -m pip install -r {{file}}

# 📤 Export current pip packages
export-requirements:
    python3 -m pip freeze > requirements.txt

# 🧪 Install packages for testing environment
install-test: install-system-tools setup-dev-environment
    @echo "✅ Ubuntu test environment ready!"
    @echo "This target is optimized for container testing"