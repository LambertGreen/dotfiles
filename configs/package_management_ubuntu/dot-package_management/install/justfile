#!/usr/bin/env just
# -*- mode: just -*-

# Package installation for Ubuntu Linux
# Run once during initial machine setup
# Uses multiple package managers: apt (system) + homebrew + nix

import 'justfile_dev_common'

default:
    @just --list

# 📦 Update system packages (always run first)
update-system:
    sudo apt update && sudo apt upgrade -y

# 🔧 Install essential system packages (Priority 1 - Core)
install-system-core: update-system
    sudo apt install -y \
        build-essential \
        curl \
        wget \
        git \
        stow \
        zsh \
        tmux \
        python3 \
        python3-pip \
        nodejs \
        npm \
        ruby \
        ruby-dev \
        gpg \
        ca-certificates

# 🛠️ Install system tools (Priority 2 - Common CLI tools)
install-system-tools: install-system-core
    sudo apt install -y \
        neovim \
        htop \
        tree \
        unzip \
        jq \
        ripgrep \
        fd-find \
        bat

# 🍺 Install Homebrew for Linux (Priority 3 - Modern packages)
install-homebrew:
    @echo "Installing Homebrew for Linux..."
    @if ! command -v brew >/dev/null 2>&1; then \
        /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.profile; \
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"; \
    else \
        echo "Homebrew already installed"; \
    fi

# 🍺 Install Homebrew packages (newer versions than apt)
install-homebrew-packages: install-homebrew
    brew install \
        eza \
        dust \
        just \
        direnv \
        zoxide

# ❄️ Install Nix package manager (Priority 4 - Cutting edge)
install-nix:
    @echo "Installing Nix package manager..."
    @if ! command -v nix >/dev/null 2>&1; then \
        sh <(curl -L https://nixos.org/nix/install) --daemon; \
        echo "Restart your shell and run: nix-env -iA nixpkgs.home-manager"; \
    else \
        echo "Nix already installed"; \
    fi

# 🔧 Install work-specific tools
install-work-tools: install-system-tools
    sudo apt install -y \
        docker.io \
        docker-compose
    # Add user to docker group
    sudo usermod -aG docker $$USER
    @echo "Log out and back in for docker group to take effect"

# 📧 Install email tools
install-email-tools: install-system-core
    sudo apt install -y \
        isync \
        mu4e \
        msmtp

# 🎨 Install GUI tools (if needed)
install-gui-tools: install-system-core
    sudo apt install -y \
        emacs \
        firefox \
        code

# 🚀 Essential setup (core + tools + development)
install-essential: install-system-tools install-homebrew-packages setup-dev-environment
    @echo "✅ Essential Ubuntu setup complete!"

# 🏠 Home setup (essential + GUI + email)
install-home: install-essential install-gui-tools install-email-tools
    @echo "✅ Ubuntu home setup complete!"

# 💼 Work setup (essential + work tools)
install-work: install-essential install-work-tools
    @echo "✅ Ubuntu work setup complete!"

# 🧪 Experimental setup (with Nix)
install-experimental: install-essential install-nix
    @echo "✅ Ubuntu experimental setup complete!"
    @echo "Next: Configure Nix home-manager"

# 🔍 Verify installation
verify-installation:
    @echo "Verifying Ubuntu installation..."
    @command -v git >/dev/null && echo "✅ git" || echo "❌ git"
    @command -v stow >/dev/null && echo "✅ stow" || echo "❌ stow"
    @command -v tmux >/dev/null && echo "✅ tmux" || echo "❌ tmux"
    @command -v nvim >/dev/null && echo "✅ neovim" || echo "❌ neovim"
    @command -v zsh >/dev/null && echo "✅ zsh" || echo "❌ zsh"
    @command -v brew >/dev/null && echo "✅ homebrew" || echo "❌ homebrew"
    @just verify-dev-tools

# 📥 Install from requirements file
install-from-requirements file:
    python3 -m pip install -r {{file}}

# 📤 Export current pip packages
export-requirements:
    python3 -m pip freeze > requirements.txt