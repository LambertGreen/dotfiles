#!/usr/bin/env zsh
# NOTE: Only put login session setup here

# * Utillity Functions
uname_cached() {
    if [ -z "${__cached_uname:-}" ]; then
        __cached_uname=$(uname -s 2>/dev/null || echo unknown)
    fi
    printf '%s\n' "$__cached_uname"
}

# * Homebrew
lgreen_setup_homebrew() {
    export HOMEBREW_CASK_OPTS="--appdir=~/Applications"

    if [[ -x /opt/homebrew/bin/brew ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi


    if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
        # TODO: Find a long-term fix for PATH env setting and build systems
        #
        # Instead of prepending linuxbrew we instead append it to
        # the PATH so as not to disrupt some builds that need the
        # system loader first in the path.
        export PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"

        # Homebrew writes out an error if the system versions of curl and git are
        # old (this happens on CentOS 7). However I ran into issues when I installed
        # these binaries via another package manager (e.g. nix/home-manager), where Homebrew
        # could not find the cacerts.  So the workaround is to temporarily disable SSL checking
        # for both curl and git (https://github.com/Linuxbrew/brew/wiki/FAQ#why-does-curl-fail), then
        # use Homebrew to download latest versions, and removing the workaround, then pointing
        # Homebrew to these versions.
        export HOMEBREW_CURL_PATH=/home/linuxbrew/.linuxbrew/bin/curl
        export HOMEBREW_GIT_PATH=/home/linuxbrew/.linuxbrew/bin/git

        # The below will update the shell environment:
        # - Add some HOMEBREW environment variables
        # - Update PATH, MANPATH, INFOPATH to have linuxbrew paths prepended
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

        # Ensure Homebrew's lib is in LD_LIBRARY_PATH without overriding system paths
        DEFAULT_LD_LIBRARY_PATH="/usr/lib:/usr/lib/x86_64-linux-gnu:/lib:/lib/x86_64-linux-gnu"
        export LD_LIBRARY_PATH="$DEFAULT_LD_LIBRARY_PATH:/home/linuxbrew/.linuxbrew/lib"
    fi
}

# * GCC
lgreen_setup_gcc() {
    if command -v brew >/dev/null 2>&1; then
        export CC=$(brew --prefix)/bin/gcc
        export CXX=$(brew --prefix)/bin/g++
    fi
}

# * Agents (SSH/GPG)
lgreen_start_agents() {
    if [ "$(uname_cached)" = "Darwin" ]; then
        # Note: on macOS a one-time step needs to be done for keys with a passphrase:
        # ssh-add --apple-use-keychain ~/.ssh/id_rsa_personal
        if command -v keychain >/dev/null; then
            eval "$(keychain \
                --nogui --quiet --quick --ignore-missing \
                --eval \
                id_rsa_personal id_rsa id_ed25519 \
                --ssh-allow-forwarded \
                --ssh-allow-gpg
            )"
        fi
    elif [ "$(uname_cached)" = "Linux" ]; then
        if command -v keychain >/dev/null; then
            eval "$(keychain \
                --nogui --quiet --quick --ignore-missing \
                --eval \
                id_rsa_personal id_rsa id_ed25519 \
                --ssh-allow-forwarded \
                --ssh-allow-gpg
            )"
        fi
    fi
}

lgreen_export_gpg_tty() {
    export GPG_TTY=$(tty)
}

# * Ripgrep
lgreen_export_ripgrep_config_path() {
    export RIPGREP_CONFIG_PATH=~/.ripgreprc
    export COLORTERM=truecolor
}

# * == MAIN ==
lgreen_setup_homebrew
lgreen_setup_gcc
lgreen_start_agents
lgreen_export_gpg_tty
lgreen_export_ripgrep_config_path
