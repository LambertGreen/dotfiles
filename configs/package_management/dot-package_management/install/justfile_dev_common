#!/usr/bin/env just
# -*- mode: just -*-

# Common development tools installation
# Shared across all platforms - import this into platform-specific justfiles

# 🐍 Install Python development packages (universal)
install-python-dev:
    @echo "Creating Python development tools virtual environment..."
    python3 -m venv ~/.local/share/python-dev-tools-venv
    @echo "Installing Python development packages..."
    ~/.local/share/python-dev-tools-venv/bin/pip install --upgrade pip
    ~/.local/share/python-dev-tools-venv/bin/pip install \
        black \
        pyflakes \
        isort \
        pytest \
        nose \
        pipenv \
        pynvim
    @echo "✅ Dev tools installed in ~/.local/share/python-dev-tools-venv"
    @echo "💡 Add ~/.local/share/python-dev-tools-venv/bin to your PATH or configure your IDE to use this venv"

# 📦 Install Node.js development packages (universal)
install-node-dev:
    @echo "Creating Node.js development tools directory..."
    mkdir -p ~/.local/share/nodejs-dev-tools
    @echo "Installing Node.js development packages locally..."
    cd ~/.local/share/nodejs-dev-tools && npm init -y && npm install \
        neovim \
        typescript \
        typescript-language-server \
        stylelint \
        js-beautify \
        js-tidy \
        prettier
    @echo "✅ Node.js dev tools installed in ~/.local/share/nodejs-dev-tools"
    @echo "💡 Add ~/.local/share/nodejs-dev-tools/node_modules/.bin to your PATH or configure your IDE"

# 💎 Install Ruby development packages (universal)
# TODO: Fix Ruby ERB dependency issue in containerized environments
# FIXME: gem install solargraph fails with "cannot load such file -- erb"
install-ruby-dev:
    @echo "Installing Ruby development packages..."
    @echo "⚠️  Ruby dev tools installation temporarily disabled due to ERB dependency issue"
    @echo "    Run 'gem install solargraph' manually after fixing Ruby environment"
    # gem install solargraph

# 📂 Setup common development directories
setup-dev-dirs:
    @echo "Setting up development directories..."
    mkdir -p ~/dev/{my,work,learning,tools}
    mkdir -p ~/.local/{bin,share}
    mkdir -p ~/.config

# 🔍 Verify development tools installation
verify-dev-tools:
    @echo "Verifying development tools..."
    @command -v python3 >/dev/null && echo "✅ python3" || echo "❌ python3"
    @command -v pip3 >/dev/null && echo "✅ pip3" || echo "❌ pip3"
    @command -v node >/dev/null && echo "✅ node" || echo "❌ node"
    @command -v npm >/dev/null && echo "✅ npm" || echo "❌ npm"
    @command -v ruby >/dev/null && echo "✅ ruby" || echo "❌ ruby"
    @command -v gem >/dev/null && echo "✅ gem" || echo "❌ gem"
    @echo "Verifying Python dev tools venv..."
    @test -f ~/.local/share/python-dev-tools-venv/bin/python && echo "✅ python-dev-tools-venv" || echo "❌ python-dev-tools-venv"
    @test -f ~/.local/share/python-dev-tools-venv/bin/black && echo "✅ black (venv)" || echo "❌ black (venv)"
    @test -f ~/.local/share/python-dev-tools-venv/bin/pynvim && echo "✅ pynvim (venv)" || echo "❌ pynvim (venv)"
    @echo "Verifying Node.js dev tools..."
    @test -f ~/.local/share/nodejs-dev-tools/node_modules/.bin/prettier && echo "✅ prettier (local)" || echo "❌ prettier (local)"
    @test -f ~/.local/share/nodejs-dev-tools/node_modules/.bin/typescript && echo "✅ typescript (local)" || echo "❌ typescript (local)"

# 💡 Show IDE configuration help
show-dev-config:
    @echo "🐍 Python Dev Tools Configuration:"
    @echo "   Virtual Environment: ~/.local/share/python-dev-tools-venv"
    @echo "   Python Executable:  ~/.local/share/python-dev-tools-venv/bin/python"
    @echo ""
    @echo "📦 Node.js Dev Tools Configuration:"
    @echo "   Local Directory: ~/.local/share/nodejs-dev-tools"
    @echo "   Binaries Path:   ~/.local/share/nodejs-dev-tools/node_modules/.bin"
    @echo ""
    @echo "🔧 IDE Configuration:"
    @echo "   Neovim: Set 'g:python3_host_prog' to '~/.local/share/python-dev-tools-venv/bin/python'"
    @echo "   Emacs:  Configure python interpreter path in your config"
    @echo "   VS Code: Set 'python.defaultInterpreterPath' to the venv python"
    @echo ""
    @echo "🚀 Available Python tools:"
    @test -d ~/.local/share/python-dev-tools-venv/bin && ls ~/.local/share/python-dev-tools-venv/bin/ | grep -E "(black|pyflakes|isort|pytest|pynvim)" || echo "   (venv not created yet - run 'just install-python-dev')"
    @echo "🚀 Available Node.js tools:"
    @test -d ~/.local/share/nodejs-dev-tools/node_modules/.bin && ls ~/.local/share/nodejs-dev-tools/node_modules/.bin/ | grep -E "(prettier|typescript|stylelint)" || echo "   (local install not created yet - run 'just install-node-dev')"

# 🚀 Complete development environment setup
setup-dev-environment: setup-dev-dirs install-python-dev install-node-dev install-ruby-dev
    @echo "✅ Common development environment setup complete!"
    @echo ""
    @just show-dev-config

# TODO: SSH key management
# Need to handle work/personal key separation:
# - Different keys for different contexts
# - Key naming conventions (id_ed25519_work, id_ed25519_personal)
# - SSH config management
# - Integration with git config per repo/directory