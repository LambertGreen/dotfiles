#!/usr/bin/env zsh

# * Profiler
lgreen_conditionally_start_profiler() {
    if [ "$ZPROF" = true ]; then
        zmodload zsh/zprof
    fi
}
lgreen_conditionally_stop_profiler() {
    if [ "$ZPROF" = true ]; then
        unset ZPROF
        zprof
    fi
}
lgreen_profile_zsh() {
  shell=${1-$SHELL}
  ZPROF=true $shell -i -c exit
}

# * Prompts
lgreen_setup_p10k() {
    # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
    # Initialization code that may require console input (password prompts, [y/n]
    # confirmations, etc.) must go above this block; everything else may go below.
    if [ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]; then
        source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    fi
}
lgreen_init_p10k() {
    # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
    [ ! -f ~/.p10k.zsh ] || source ~/.p10k.zsh
}
lgreen_init_oh_my_posh() {
    eval "$(oh-my-posh init zsh --config $HOME/.config/oh-my-posh/zen.toml)"
}

# * Completions
lgreen_setup_custom_completions() {
    fpath=(~/.config/zsh/completions $fpath)
}
lgreen_zsh_init_completions() {
    if type brew &>/dev/null; then
        FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
    fi

    # Initialize completions
    autoload -Uz compinit && compinit

    if [ "$(command -v zinit)" ]; then
        zinit cdreplay -q
    fi
}

# * ZSH Settings
lgreen_setup_zsh() {
    # Set zle to use Emacs keybinds
    bindkey -e

    # Homebrew doctor recommends the below
    umask 002

    # Workaround for WSL issue:https://github.com/microsoft/WSL/issues/1887
    #
    if [ "$(uname_cached)" = "Linux" ]; then
        if [ "$(< /proc/version)" = "*@(Microsoft|WSL)*" ]; then
            unsetopt BG_NICE
        fi
    else
        true
    fi

    # We want history, yes, but not shared between shell instances
    unsetopt incappendhistory
    unsetopt sharehistory

    # Enable variable expansion of vars of directories
    # Enables doing:  ls $deep_dir/<tab>
    setopt AUTO_CD
    setopt CDABLE_VARS
}
lgreen_fixup_zsh_autosuggestion_highlight_style() {
    # The original value is `fg=8` but that color is too light for light themes (e.g. doom-one-light)
    # Use the command `fast-theme -p` to print out color values
    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=242"
}
lgreen_zsh_set_history_options() {
   setopt HIST_IGNORE_SPACE
   setopt HIST_IGNORE_DUPS
}
lgreen_zsh_set_title_suffix() {
    ZSH_TAB_TITLE_ADDITIONAL_TERMS='wezterm'
    ZSH_TAB_TITLE_SUFFIX=' - Terminal'
}

# * Plugins
lgreen_setup_zinit() {
#--------------------------------------------
# Zinit:
# https://github.com/zdharma/zinit
#--------------------------------------------
    if [ ! -f "$HOME/.zinit/bin/zinit.zsh" ]; then
        echo
        echo "The ZSH plugin manger, Zinit, is not installed."
        echo "Do you want to install it now? [Y/n] "
        read REPLY
        case $REPLY in
            [Nn]) return;;
        esac

        print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
        command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
        command git clone git@github.com:zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful. Restart shell to load plugins.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"; return
    fi
    source $HOME/.zinit/bin/zinit.zsh

    autoload -Uz _zinit
    (( ${+_comps} )) && _comps[zinit]=_zinit

    # Ice it up?
    #unset ZPLUGIN_ICE
    export ZPLUGIN_ICE=1

    zinit for \
        OMZ::lib/history.zsh \
        OMZ::lib/functions.zsh \
        OMZ::lib/misc.zsh \
        OMZ::lib/completion.zsh \
        OMZ::lib/git.zsh

    # ** Plugin::fzf
    zinit ice from"gh-r" as"program"
    zinit light junegunn/fzf

    # ** Plugin::fzf-history-search
    zinit ice lucid wait'0'
    zinit light joshskidmore/zsh-fzf-history-search

    # ** Plugin::fzf-tab
    zinit light Aloxaf/fzf-tab

    # ** Plugin::colored-man-pages
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid
    zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh

    # ** Plugin::completions
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid blockf
    zinit light zsh-users/zsh-completions

    # ** Plugin::autosuggestions
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" lucid atload"_zsh_autosuggest_start"
    zinit light zsh-users/zsh-autosuggestions

    # ** Plugin::fast-syntax-highlighting
    [ -n "$ZPLUGIN_ICE" ] && zinit ice wait"0" atinit"zpcompinit" lucid
    zinit light zdharma-continuum/fast-syntax-highlighting

    # ** Plugin::powerlevel10k
    zinit ice depth=1
    zinit light romkatv/powerlevel10k

    # ** Plugin::bd
    # Go back up directories without needing to spam `cd ../../..`
    zinit light Tarrasch/zsh-bd

    # ** Plugin::tab-title
    # Set terminal title based on current directory, shell command, etc.
    zinit light trystan2k/zsh-tab-title
}

# * Utility Functions
lgreen_zsh_show_my_functions() {
    print -l ${(k)functions} | fzf -q "^lgreen"
}
lgreen_fix_compaudit_insecure_directories() {
    compaudit
    echo "Removing group write permissions.."
    compaudit | xargs chmod g-w
    echo "Done."
}

# * Source env specific scripts
lgreen_source_local_zsh() {
    # Source local config file if is present
    [ -f "$HOME/.zshrc_local" ] && source $HOME/.zshrc_local
}


# * ==MAIN==
main() {
    # Source common shell script
    [ -f "$HOME/.shell_common" ] && source $HOME/.shell_common

    # Emacs Tramp or non-interactive shell: needs a simple prompt
    # so just setup common shell and return
    if [ "$TERM" = "dumb" ] || [ ! -t 1 ]; then
        lgreen_track_shell_sourced_count
        lgreen_source_profile_if_not_sourced
        lgreen_start_agents
        unsetopt zle && PS1='$ '
        typeset -U path
        return
    fi

# ** Profiler - start if configured
    lgreen_conditionally_start_profiler

# ** Setup
    lgreen_setup_zinit
    lgreen_setup_p10k
    lgreen_setup_zsh
    lgreen_setup_custom_completions

# ** Shell Source Tracking
    lgreen_track_shell_sourced_count
    lgreen_source_profile_if_not_sourced
    lgreen_one_time_system_setup_check

# ** Init Shell Tools
    lgreen_setup_zoxide_for_zsh
    lgreen_setup_fzf
    lgreen_setup_fzf_for_zsh
    lgreen_setup_ntfy

# ** Init Agents
    lgreen_start_agents
    lgreen_setup_gpg_tty

# ** Init Dev Environmets
    lgreen_setup_pyenv
    lgreen_setup_jenv
    lgreen_setup_rbenv
    lgreen_setup_direnv_for_zsh
    lgreen_setup_docker_for_zsh
    lgreen_setup_dev_env_rust
    lgreen_setup_perforce_config

# ** Add to PATH
    lgreen_setup_non_sys_openssl
    lgreen_setup_non_sys_sqlite
    lgreen_setup_dev_env_go
    lgreen_setup_dev_env_clang
    lgreen_setup_chromium_depot_tools

# ** Emacs Integration
    lgreen_setup_running_inside_emacs
    lgreen_setup_running_inside_emacs_eat_for_zsh
    lgreen_setup_emacs_vterm
    lgreen_setup_doom_emacs

# ** Tmux Integration
    lgreen_setup_tmux_all

# ** Shell aliases
    lgreen_setup_aliases

# ** Color Theme
    lgreen_setup_shell_theme_mode

# ** Shell UX
    lgreen_show_fortune_quote

# ** Source env specific scripts
    lgreen_source_os_shell
    lgreen_source_local_shell
    lgreen_source_work_shell
    lgreen_source_local_zsh

# ** Init Prompt
    lgreen_init_p10k

# ** Init Completions
    lgreen_zsh_init_completions

# ** Apply Settings
    lgreen_zsh_set_history_options
    lgreen_zsh_set_title_suffix
    lgreen_fixup_zsh_autosuggestion_highlight_style

# ** Profiler - stop if running
    lgreen_conditionally_stop_profiler

    # Remove any duplicates in the path variable
    # Note: it is best to remove the places where duplicates
    # are being applied, but I like this safety check
    typeset -U path
}

#-------------------
# Run main
#-------------------
main
