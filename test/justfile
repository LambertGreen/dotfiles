# Testing workflows for dotfiles - Machine Class Based Testing

# Default test platform
test_platform := env_var_or_default("DOTFILES_TEST_PLATFORM", "arch")

# Available platforms and machine classes
docker_platforms := "arch ubuntu"
docker_machine_classes := "essential developer gui"

# Show test help
default:
    @echo "🧪 Dotfiles Testing - Machine Class Based"
    @echo ""
    @echo "Essential Tier (minimal system):"
    @echo "  just test-ubuntu-essential      - Ubuntu with apt only"
    @echo "  just test-arch-essential        - Arch with pacman only"
    @echo ""
    @echo "Developer Tier (multi-PM):"
    @echo "  just test-ubuntu-developer      - Ubuntu with apt + pip + npm"
    @echo "  just test-arch-developer        - Arch with pacman + AUR + pip + npm"
    @echo ""
    @echo "GUI Tier (desktop validation):"
    @echo "  just test-ubuntu-gui            - Ubuntu with desktop packages"
    @echo "  just test-arch-gui              - Arch with desktop packages"
    @echo ""
    @echo "Interactive Testing:"
    @echo "  just run-ubuntu-essential       - Interactive shell"
    @echo "  just run-arch-essential         - Interactive shell"
    @echo "  just run-ubuntu-developer       - Interactive shell"
    @echo "  just run-arch-developer         - Interactive shell"
    @echo ""
    @echo "Batch Testing:"
    @echo "  just test-all-ubuntu            - All Ubuntu tiers"
    @echo "  just test-all-arch              - All Arch tiers"
    @echo "  just test-all                   - Everything"
    @echo ""
    @echo "Log Management:"
    @echo "  just show-test-summary          - Show latest test summary"
    @echo "  just show-last-log              - Show most recent test output"
    @echo "  just list-logs                  - List all available logs"
    @echo "  just show-log <filename>        - Show specific log file"

# =============================================================================
# Essential Tier - Minimal system testing
# =============================================================================

# Test Ubuntu essential machine class
test-ubuntu-essential:
    @./test-helpers/docker-test-wrapper.sh docker_essential_ubuntu ubuntu

# Test Arch essential machine class
test-arch-essential:
    @./test-helpers/docker-test-wrapper.sh docker_essential_arch arch

# Interactive Ubuntu essential
run-ubuntu-essential:
    @echo "🐳 Running docker_essential_ubuntu interactive shell..."
    just _run-machine-class docker_essential_ubuntu ubuntu

# Interactive Arch essential
run-arch-essential:
    @echo "🐳 Running docker_essential_arch interactive shell..."
    just _run-machine-class docker_essential_arch arch

# =============================================================================
# Developer Tier - Multi-package manager testing
# =============================================================================

# Test Ubuntu developer machine class
test-ubuntu-developer:
    @./test-helpers/docker-test-wrapper.sh docker_developer_ubuntu ubuntu

# Test Arch developer machine class
test-arch-developer:
    @./test-helpers/docker-test-wrapper.sh docker_developer_arch arch

# Interactive Ubuntu developer
run-ubuntu-developer:
    @echo "🐳 Running docker_developer_ubuntu interactive shell..."
    just _run-machine-class docker_developer_ubuntu ubuntu

# Interactive Arch developer
run-arch-developer:
    @echo "🐳 Running docker_developer_arch interactive shell..."
    just _run-machine-class docker_developer_arch arch

# =============================================================================
# GUI Tier - Desktop environment validation
# =============================================================================

# Test Ubuntu GUI machine class
test-ubuntu-gui:
    @./test-helpers/docker-test-wrapper.sh docker_ubuntu_gui ubuntu

# Test Arch GUI machine class
test-arch-gui:
    @./test-helpers/docker-test-wrapper.sh docker_arch_gui arch

# Interactive Ubuntu GUI
run-ubuntu-gui:
    @echo "🐳 Running docker_ubuntu_gui interactive shell..."
    just _run-machine-class docker_ubuntu_gui ubuntu

# Interactive Arch GUI
run-arch-gui:
    @echo "🐳 Running docker_arch_gui interactive shell..."
    just _run-machine-class docker_arch_gui arch

# =============================================================================
# Batch Testing
# =============================================================================

# Test all Ubuntu tiers
test-all-ubuntu:
    @echo "🧪 Testing all Ubuntu tiers..."
    @echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    just test-ubuntu-essential
    just test-ubuntu-developer
    just test-ubuntu-gui

# Test all Arch tiers
test-all-arch:
    @echo "🧪 Testing all Arch tiers..."
    @echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    just test-arch-essential
    just test-arch-developer
    just test-arch-gui

# Test everything
test-all:
    @echo "🧪 Testing all platforms and tiers..."
    @echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    just test-all-ubuntu
    just test-all-arch

# =============================================================================
# Implementation Helpers
# =============================================================================

# Helper: Build and run machine class test using shared Dockerfile
_test-machine-class machine_class platform:
    @echo "🔨 Building Docker image for {{machine_class}} ({{platform}} platform)..."
    cd .. && docker build --build-arg TZ=$(readlink /etc/localtime | sed 's|.*/zoneinfo/||' 2>/dev/null || date +%Z 2>/dev/null || echo "UTC") --build-arg MACHINE_CLASS={{machine_class}} -f test/dockerfiles/Dockerfile.multi --target {{machine_class}} -t dotfiles-test-{{machine_class}} .
    @echo "🚀 Running test container..."
    docker run --rm dotfiles-test-{{machine_class}}

# Helper: Interactive machine class testing using shared Dockerfile
_run-machine-class machine_class platform:
    @echo "Building image to {{machine_class}} stage first ({{platform}} platform)..."
    cd .. && docker build --build-arg TZ=$(readlink /etc/localtime | sed 's|.*/zoneinfo/||' 2>/dev/null || date +%Z 2>/dev/null || echo "UTC") --build-arg MACHINE_CLASS={{machine_class}} -f test/dockerfiles/Dockerfile.multi --target {{machine_class}} -t dotfiles-test-{{machine_class}} .
    @echo "🚀 Starting interactive shell (type 'exit' to return)..."
    docker run -it --rm dotfiles-test-{{machine_class}}

# =============================================================================
# Log Management
# =============================================================================

# Show the latest test summary
@show-test-summary:
    @if [ -d "test-logs" ]; then \
        latest=$(ls -t test-logs/*/test-summary.md 2>/dev/null | head -1); \
        if [ -n "$$latest" ]; then \
            cat "$$latest"; \
        else \
            echo "No test summaries found"; \
        fi \
    else \
        echo "No test-logs directory found"; \
    fi

# Show the most recent test log
@show-last-log:
    echo "📄 Most recent test log:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━"
    ls -t *-output.log 2>/dev/null | head -1 | xargs -I {} sh -c 'echo "📝 File: {}" && echo "" && tail -50 {}'

# Show all available test logs
@list-logs:
    echo "📄 Available test logs:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━"
    ls -lt *-output.log 2>/dev/null || echo "No log files found"

# Show specific log file (usage: just show-log filename)
@show-log file:
    echo "📄 Showing log: {{file}}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    tail -100 {{file}}

# =============================================================================
# Utility Commands
# =============================================================================

# Show git status
@status:
    echo "📊 Repository Status"
    echo "━━━━━━━━━━━━━━━━━━━━"
    cd .. && git status --short
    echo ""
    echo "📦 Submodules:"
    cd .. && git submodule status

# Update submodules
update:
    cd .. && git submodule update --init --recursive

# Clean up test logs
clean-logs:
    @echo "🧹 Cleaning up test logs..."
    rm -f *-output.log
    @echo "✅ Test logs cleaned"

# Clean up Docker images
clean-docker:
    @echo "🧹 Cleaning up Docker test images..."
    docker images | grep dotfiles-test | awk '{print $3}' | xargs -r docker rmi -f
    @echo "✅ Docker images cleaned"

# Clean everything
clean: clean-logs clean-docker
    @echo "✅ All test artifacts cleaned"