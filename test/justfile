# Testing workflows for dotfiles - Tiered Testing Approach

# Default test platform
test_platform := env_var_or_default("DOTFILES_TEST_PLATFORM", "arch")

# Legacy variable for backward compatibility (deprecated)
test_level := "basic"

# Available platforms and tiers
docker_platforms := "arch ubuntu"
docker_tiers := "min-cli mid-cli mid-dev max-dev"

# Show test help
default:
    @echo "üß™ Dotfiles Testing - Tiered Approach"
    @echo ""
    @echo "Tiered Test Commands (Recommended):"
    @echo "  just test-min-cli [platform]    - Minimal CLI tools (Tier 1)"
    @echo "  just test-mid-cli [platform]    - Extended CLI tools (Tier 2)"  
    @echo "  just test-mid-dev [platform]    - Development environment (Tier 3)"
    @echo "  just test-max-dev [platform]    - Complete development (Tier 4)"
    @echo ""
    @echo "Interactive Testing:"
    @echo "  just test-run-min-cli [platform] - Interactive shell for min-cli"
    @echo "  just test-run-mid-cli [platform] - Interactive shell for mid-cli"
    @echo "  just test-run-mid-dev [platform] - Interactive shell for mid-dev"
    @echo "  just test-run-max-dev [platform] - Interactive shell for max-dev"
    @echo ""
    @echo "Log Management:"
    @echo "  just show-last-log               - Show most recent test output"
    @echo "  just list-logs                  - List all available logs"
    @echo "  just show-log <filename>        - Show specific log file"
    @echo ""
    @echo "Available:"
    @echo "  Platforms: {{docker_platforms}}"
    @echo "  Tiers: {{docker_tiers}}"
    @echo "  Default Platform: {{test_platform}}"

# =============================================================================
# Tiered Test Recipes - Main Testing Interface
# =============================================================================

# Tier 1: Minimal CLI tools only
test-min-cli platform=test_platform:
    @echo "üß™ Testing min-cli tier on {{platform}}..."
    @echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    @echo "üìù Logging to test-min-cli-{{platform}}-output.log"
    just _test-tier-impl min-cli {{platform}} 2>&1 | tee test-min-cli-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ min-cli {{platform}} test PASSED"; \
    else \
        echo "‚ùå min-cli {{platform}} test FAILED"; \
        echo "üìÑ Check test-min-cli-{{platform}}-output.log for details"; \
    fi

# Tier 2: Extended CLI tools
test-mid-cli platform=test_platform:
    @echo "üß™ Testing mid-cli tier on {{platform}}..."
    @echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    @echo "üìù Logging to test-mid-cli-{{platform}}-output.log"
    just _test-tier-impl mid-cli {{platform}} 2>&1 | tee test-mid-cli-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ mid-cli {{platform}} test PASSED"; \
    else \
        echo "‚ùå mid-cli {{platform}} test FAILED"; \
        echo "üìÑ Check test-mid-cli-{{platform}}-output.log for details"; \
    fi

# Tier 3: Development environment (multi-PM testing begins)
test-mid-dev platform=test_platform:
    @echo "üß™ Testing mid-dev tier on {{platform}}..."
    @echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    @echo "üìù Logging to test-mid-dev-{{platform}}-output.log"
    just _test-tier-impl mid-dev {{platform}} 2>&1 | tee test-mid-dev-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ mid-dev {{platform}} test PASSED"; \
    else \
        echo "‚ùå mid-dev {{platform}} test FAILED"; \
        echo "üìÑ Check test-mid-dev-{{platform}}-output.log for details"; \
    fi

# Tier 4: Complete development environment (full multi-PM validation)
test-max-dev platform=test_platform:
    @echo "üß™ Testing max-dev tier on {{platform}}..."
    @echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    @echo "üìù Logging to test-max-dev-{{platform}}-output.log"
    just _test-tier-impl max-dev {{platform}} 2>&1 | tee test-max-dev-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ max-dev {{platform}} test PASSED"; \
    else \
        echo "‚ùå max-dev {{platform}} test FAILED"; \
        echo "üìÑ Check test-max-dev-{{platform}}-output.log for details"; \
    fi

# Interactive testing for tiers
test-run-min-cli platform=test_platform:
    @echo "üê≥ Running min-cli interactive shell on {{platform}}..."
    just _test-tier-interactive min-cli {{platform}}

test-run-mid-cli platform=test_platform:
    @echo "üê≥ Running mid-cli interactive shell on {{platform}}..."
    just _test-tier-interactive mid-cli {{platform}}

test-run-mid-dev platform=test_platform:
    @echo "üê≥ Running mid-dev interactive shell on {{platform}}..."
    just _test-tier-interactive mid-dev {{platform}}

test-run-max-dev platform=test_platform:
    @echo "üê≥ Running max-dev interactive shell on {{platform}}..."
    just _test-tier-interactive max-dev {{platform}}

# =============================================================================
# Implementation Helpers
# =============================================================================

# Helper: Build and run tier test
_test-tier-impl tier platform:
    @echo "üî® Building Docker image for {{tier}} {{platform}}..."
    cd .. && docker build --build-arg TZ=$(readlink /etc/localtime | sed 's|.*/zoneinfo/||' 2>/dev/null || date +%Z 2>/dev/null || echo "UTC") -f test/dockerfiles/Dockerfile.{{platform}}.multi --target update-{{tier}} -t dotfiles-test-{{tier}}-{{platform}} .
    @echo "üöÄ Running test container..."
    docker run --rm dotfiles-test-{{tier}}-{{platform}}

# Helper: Interactive tier testing
_test-tier-interactive tier platform:
    @echo "Building image to update stage first..."
    cd .. && docker build --build-arg TZ=$(readlink /etc/localtime | sed 's|.*/zoneinfo/||' 2>/dev/null || date +%Z 2>/dev/null || echo "UTC") -f test/dockerfiles/Dockerfile.{{platform}}.multi --target update-{{tier}} -t dotfiles-test-{{tier}}-{{platform}} .
    @echo "üöÄ Starting interactive shell (type 'exit' to return)..."
    docker run -it --rm dotfiles-test-{{tier}}-{{platform}}

# =============================================================================
# Legacy Support (will be removed)
# =============================================================================

# Test through install stage (complete workflow) - DEPRECATED
@test-install level=test_level platform=test_platform:
    echo "‚ö†Ô∏è  test-install is deprecated - legacy level system no longer supported"
    echo "üí° Use tiered tests instead:"
    echo "  just test-min-cli {{platform}}  # Basic CLI tools"
    echo "  just test-mid-cli {{platform}}  # Extended CLI tools"
    echo "  just test-mid-dev {{platform}}  # Development environment"
    echo "  just test-max-dev {{platform}}  # Complete development tools"
    @exit 1

# Test through stow stage only - DEPRECATED
@test-stow level=test_level platform=test_platform:
    echo "‚ö†Ô∏è  test-stow is deprecated - legacy level system no longer supported"
    echo "üí° Use tiered interactive tests to explore stow stage:"
    echo "  just test-run-min-cli {{platform}}  # Interactive shell at min-cli tier"
    @exit 1

# Test through update stage (complete workflow) - DEPRECATED
@test-update level=test_level platform=test_platform:
    echo "‚ö†Ô∏è  test-update is deprecated - legacy level system no longer supported"
    echo "üí° Use tiered tests instead:"
    echo "  just test-min-cli {{platform}}  # Basic CLI tools"
    echo "  just test-mid-cli {{platform}}  # Extended CLI tools"
    echo "  just test-mid-dev {{platform}}  # Development environment"
    echo "  just test-max-dev {{platform}}  # Complete development tools"
    @exit 1

# Run interactive shell after update stage - DEPRECATED
test-run level=test_level platform=test_platform:
    @echo "‚ö†Ô∏è  test-run is deprecated - legacy level system no longer supported"
    @echo "üí° Use tiered interactive tests instead:"
    @echo "  just test-run-min-cli {{platform}}  # Interactive min-cli environment"
    @echo "  just test-run-mid-cli {{platform}}  # Interactive mid-cli environment"
    @echo "  just test-run-mid-dev {{platform}}  # Interactive mid-dev environment"
    @echo "  just test-run-max-dev {{platform}}  # Interactive max-dev environment"
    @exit 1

# Backward compatibility alias - DEPRECATED
test level=test_level platform=test_platform:
    @echo "‚ö†Ô∏è  Generic 'test' command is deprecated"
    @echo "üí° Use specific tiered tests instead:"
    @echo "  just test-min-cli {{platform}}  # Minimal CLI setup"
    @echo "  just test-mid-cli {{platform}}  # Extended CLI setup"
    @echo "  just test-mid-dev {{platform}}  # Development environment"
    @echo "  just test-max-dev {{platform}}  # Complete development"
    @exit 1

# Helper: Test through install stage (complete workflow) - BROKEN
test-install-local level platform:
    @echo "‚ùå test-install-local is broken - targets install-{{level}} don't exist"
    @echo "üí° Available targets: install-min-cli, install-mid-cli, install-mid-dev, install-max-dev"
    @exit 1

# Helper: Test through stow stage only - BROKEN
test-stow-local level platform:
    @echo "‚ùå test-stow-local is broken - targets stow-{{level}} don't exist"
    @echo "üí° Available targets: stow-min-cli, stow-mid-cli, stow-mid-dev, stow-max-dev"
    @exit 1

# Helper: Test through update stage (complete workflow) - BROKEN  
test-update-local level platform:
    @echo "‚ùå test-update-local is broken - targets update-{{level}} don't exist"
    @echo "üí° Available targets: update-min-cli, update-mid-cli, update-mid-dev, update-max-dev"
    @exit 1

# Test configure only (configuration generation) - BROKEN
test-configure level platform:
    @echo "‚ùå test-configure is broken - single 'configure' target is legacy"
    @echo "üí° Available targets: configure-min-cli, configure-mid-cli, configure-mid-dev, configure-max-dev"
    @exit 1

# Test bootstrap only (no package installation) - BROKEN
test-bootstrap level platform:
    @echo "‚ùå test-bootstrap is broken - targets bootstrap-{{level}} don't exist"
    @echo "üí° Available targets: bootstrap-min-cli, bootstrap-mid-cli, bootstrap-mid-dev, bootstrap-max-dev"
    @exit 1

# Test with GitHub (full integration test) - BROKEN: no single-platform dockerfiles exist
test-remote platform:
    @echo "‚ùå test-remote is broken - no single-platform dockerfiles exist"
    @echo "üí° Use tiered tests instead: just test-min-cli {{platform}}"
    @exit 1




# Show git status
@status:
    echo "üìä Repository Status"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    cd .. && git status --short
    echo ""
    echo "üì¶ Submodules:"
    cd .. && git submodule status

# Show the most recent test log
@show-last-log:
    echo "üìÑ Most recent test log:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ls -t *-output.log 2>/dev/null | head -1 | xargs -I {} sh -c 'echo "üìù File: {}" && echo "" && tail -50 {}'

# Show all available test logs
@list-logs:
    echo "üìÑ Available test logs:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ls -lt *-output.log 2>/dev/null || echo "No log files found"

# Show specific log file (usage: just show-log filename)
@show-log file:
    echo "üìÑ Showing log: {{file}}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    tail -100 {{file}}

# Update submodules
update:
    cd .. && git submodule update --init --recursive


