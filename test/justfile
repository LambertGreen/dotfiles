# Testing workflows for dotfiles

# Default test platform and level
test_platform := env_var_or_default("DOTFILES_TEST_PLATFORM", "arch")
test_level := env_var_or_default("DOTFILES_TEST_LEVEL", "basic")

# Available Docker platforms and levels
docker_platforms := "arch ubuntu"
docker_levels := "basic typical"

# Show test help
default:
    @echo "üß™ Dotfiles Testing"
    @echo ""
    @echo "Test stages (each builds on previous):"
    @echo "  1. Bootstrap - Install essential tools (stow, package managers)"
    @echo "  2. Stow      - Deploy configs to proper locations"
    @echo "  3. Install   - Install packages using stowed configs"
    @echo "  4. Update    - Update packages and system"
    @echo "  5. Run       - Interactive shell to test environment"
    @echo ""
    @echo "Stage-specific tests:"
    @echo "  just test-configure [level] [platform] - Test configure stage only"
    @echo "  just test-bootstrap [level] [platform] - Test bootstrap stage only"
    @echo "  just test-stow [level] [platform]      - Test through stow stage"
    @echo "  just test-install [level] [platform]   - Test through install stage"
    @echo "  just test-update [level] [platform]    - Test through update stage"
    @echo "  just test-run [level] [platform]       - Run interactive shell"
    @echo ""
    @echo "Batch tests:"
    @echo "  just test-level [level]                 - Test level across platforms"
    @echo "  just test-platform [platform]          - Test platform across levels"
    @echo "  just test-all                          - Test all combinations"
    @echo ""
    @echo "Configuration Tests (Recommended):"
    @echo "  just test-minimal-arch             - Fast Arch validation"
    @echo "  just test-developer-ubuntu         - Ubuntu developer environment"
    @echo "  just test-all-configurations       - Test configuration system across platforms"
    @echo ""
    @echo "Log Management:"
    @echo "  just show-last-log                 - Show most recent test output"
    @echo "  just list-logs                     - List all available logs"
    @echo "  just show-log <filename>           - Show specific log file"
    @echo ""
    @echo "Legacy Tests:"
    @echo "  just test-update basic arch        - Build and test basic Arch (complete)"
    @echo "  just test-run basic arch           - Interactive shell after update"
    @echo ""
    @echo "Available:"
    @echo "  Platforms: {{docker_platforms}}"
    @echo "  Levels: {{docker_levels}}"
    @echo "  Defaults: {{test_level}} {{test_platform}}"

# Test through install stage (complete workflow)
@test-install level=test_level platform=test_platform:
    echo "üê≥ Testing {{level}} {{platform}} install stage with Docker..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-install-{{level}}-{{platform}}-output.log"
    just test-install-local {{level}} {{platform}} 2>&1 | tee test-install-{{level}}-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ {{level}} {{platform}} install test PASSED"; \
    else \
        echo "‚ùå {{level}} {{platform}} install test FAILED"; \
        echo "üìÑ Check test-install-{{level}}-{{platform}}-output.log for details"; \
    fi

# Test through stow stage only
@test-stow level=test_level platform=test_platform:
    echo "üê≥ Testing {{level}} {{platform}} stow stage with Docker..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-stow-{{level}}-{{platform}}-output.log"
    just test-stow-local {{level}} {{platform}} 2>&1 | tee test-stow-{{level}}-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ {{level}} {{platform}} stow test PASSED"; \
    else \
        echo "‚ùå {{level}} {{platform}} stow test FAILED"; \
        echo "üìÑ Check test-stow-{{level}}-{{platform}}-output.log for details"; \
    fi

# Test through update stage (complete workflow)
@test-update level=test_level platform=test_platform:
    echo "üê≥ Testing {{level}} {{platform}} update stage with Docker..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-update-{{level}}-{{platform}}-output.log"
    just test-update-local {{level}} {{platform}} 2>&1 | tee test-update-{{level}}-{{platform}}-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ {{level}} {{platform}} update test PASSED"; \
    else \
        echo "‚ùå {{level}} {{platform}} update test FAILED"; \
        echo "üìÑ Check test-update-{{level}}-{{platform}}-output.log for details"; \
    fi

# Run interactive shell after update stage
test-run level=test_level platform=test_platform:
    @echo "üê≥ Running {{level}} {{platform}} interactive shell..."
    @echo "Building image to update stage first..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target update-{{level}} -t dotfiles-test-{{level}}-{{platform}} .
    @echo "üöÄ Starting interactive shell (type 'exit' to return)..."
    docker run -it --rm dotfiles-test-{{level}}-{{platform}}

# Backward compatibility alias (now uses complete workflow)
test level=test_level platform=test_platform: (test-update level platform)

# Helper: Test through install stage (complete workflow)
test-install-local level platform:
    @echo "üî® Building Docker image for {{level}} {{platform}} install stage..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target install-{{level}} -t dotfiles-test-{{level}}-{{platform}} .
    @echo "üöÄ Running test container..."
    docker run --rm dotfiles-test-{{level}}-{{platform}}

# Helper: Test through stow stage only
test-stow-local level platform:
    @echo "üî® Building Docker image for {{level}} {{platform}} stow stage..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target stow-{{level}} -t dotfiles-stow-{{level}}-{{platform}} .
    @echo "üöÄ Running test container..."
    docker run --rm dotfiles-stow-{{level}}-{{platform}}

# Helper: Test through update stage (complete workflow)
test-update-local level platform:
    @echo "üî® Building Docker image for {{level}} {{platform}} update stage..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target update-{{level}} -t dotfiles-test-{{level}}-{{platform}} .
    @echo "üöÄ Running test container..."
    docker run --rm dotfiles-test-{{level}}-{{platform}}

# Test configure only (configuration generation)
test-configure level platform:
    @echo "üîß Building configure-only Docker image for {{level}} {{platform}}..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target configure -t dotfiles-configure-{{level}}-{{platform}} .
    @echo "üöÄ Running configure test container..."
    docker run --rm dotfiles-configure-{{level}}-{{platform}}

# Test bootstrap only (no package installation)
test-bootstrap level platform:
    @echo "üî® Building bootstrap-only Docker image for {{level}} {{platform}}..."
    cd .. && docker build -f test/dockerfiles/Dockerfile.{{platform}}.multi --target bootstrap-{{level}} -t dotfiles-bootstrap-{{level}}-{{platform}} .
    @echo "üöÄ Running bootstrap test container..."
    docker run --rm dotfiles-bootstrap-{{level}}-{{platform}}

# Test with GitHub (full integration test)
test-remote platform:
    @echo "üî® Building Docker image for {{platform}} (GitHub integration)..."
    docker build \
        -f dockerfiles/Dockerfile.{{platform}} \
        -t dotfiles-test-{{platform}} .
    @echo "üöÄ Running integration test container..."
    docker run --rm dotfiles-test-{{platform}}

# Test specific level across all platforms
@test-level level:
    echo "üß™ Testing {{level}} across all platforms: {{docker_platforms}}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-level-{{level}}-output.log"
    -just test-update {{level}} arch 2>&1 | tee -a test-level-{{level}}-output.log
    -just test-update {{level}} ubuntu 2>&1 | tee -a test-level-{{level}}-output.log
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üèÅ {{level}} level tests completed"
    echo "üìÑ Full log available in test-level-{{level}}-output.log"

# Test specific platform across all levels
@test-platform platform:
    echo "üß™ Testing {{platform}} across all levels: {{docker_levels}}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-platform-{{platform}}-output.log"
    -just test-update basic {{platform}} 2>&1 | tee -a test-platform-{{platform}}-output.log
    -just test-update typical {{platform}} 2>&1 | tee -a test-platform-{{platform}}-output.log
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üèÅ {{platform}} platform tests completed"
    echo "üìÑ Full log available in test-platform-{{platform}}-output.log"

# Test all combinations
@test-all:
    echo "üß™ Testing all combinations"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-all-output.log"
    -just test-update basic arch 2>&1 | tee -a test-all-output.log
    -just test-update basic ubuntu 2>&1 | tee -a test-all-output.log
    -just test-update typical arch 2>&1 | tee -a test-all-output.log
    -just test-update typical ubuntu 2>&1 | tee -a test-all-output.log
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üèÅ All combination tests completed"
    echo "üìÑ Full log available in test-all-output.log"

# Show git status
@status:
    echo "üìä Repository Status"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    cd .. && git status --short
    echo ""
    echo "üì¶ Submodules:"
    cd .. && git submodule status

# Show the most recent test log
@show-last-log:
    echo "üìÑ Most recent test log:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ls -t *-output.log 2>/dev/null | head -1 | xargs -I {} sh -c 'echo "üìù File: {}" && echo "" && tail -50 {}'

# Show all available test logs
@list-logs:
    echo "üìÑ Available test logs:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ls -lt *-output.log 2>/dev/null || echo "No log files found"

# Show specific log file (usage: just show-log filename)
@show-log file:
    echo "üìÑ Showing log: {{file}}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    tail -100 {{file}}

# Update submodules
update:
    cd .. && git submodule update --init --recursive

# Validate everything
@validate:
    echo "üîç Running validations..."
    just test-all
    echo "‚úÖ All validations passed"

# =====================================
# Configuration Testing
# =====================================

# Test minimal configuration on Arch Linux
@test-minimal-arch:
    echo "üß™ Testing minimal configuration on Arch Linux..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-minimal-arch-output.log"
    docker build -f dockerfiles/Dockerfile.arch.multi --target update-basic .. 2>&1 | tee test-minimal-arch-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ Minimal Arch test PASSED"; \
    else \
        echo "‚ùå Minimal Arch test FAILED"; \
        echo "üìÑ Check test-minimal-arch-output.log for details"; \
        exit 1; \
    fi

# Removed platform-specific test recipes - use existing level/platform structure instead

# Test developer configuration on Ubuntu
@test-developer-ubuntu:
    echo "üß™ Testing developer configuration on Ubuntu..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-developer-ubuntu-output.log"
    docker build -f dockerfiles/Dockerfile.ubuntu.multi --target update-basic .. 2>&1 | tee test-developer-ubuntu-output.log; \
    if [ ${PIPESTATUS[0]} -eq 0 ]; then \
        echo "‚úÖ Developer Ubuntu test PASSED"; \
    else \
        echo "‚ùå Developer Ubuntu test FAILED"; \
        echo "üìÑ Check test-developer-ubuntu-output.log for details"; \
        exit 1; \
    fi

# Test configuration system across platforms
@test-all-configurations:
    echo "üß™ Testing configuration system across platforms"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Logging to test-all-configurations-output.log"
    -just test-minimal-arch 2>&1 | tee -a test-all-configurations-output.log
    -just test-developer-ubuntu 2>&1 | tee -a test-all-configurations-output.log
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üèÅ Configuration tests completed"
    echo "üìÑ Full log available in test-all-configurations-output.log"

# Interactive shell for debugging (minimal Arch)
@test-shell-arch:
    echo "üêö Interactive shell - Arch minimal configuration"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üîß Building container and dropping into shell..."
    docker build -f dockerfiles/Dockerfile.arch.multi --target install-basic .. && \
    docker run -it $$(docker build -q -f dockerfiles/Dockerfile.arch.multi --target install-basic ..) /bin/bash

# Interactive shell for debugging (developer Ubuntu)  
@test-shell-ubuntu:
    echo "üêö Interactive shell - Ubuntu developer configuration"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üîß Building container and dropping into shell..."
    docker build -f dockerfiles/Dockerfile.ubuntu.multi --target install-basic .. && \
    docker run -it $$(docker build -q -f dockerfiles/Dockerfile.ubuntu.multi --target install-basic ..) /bin/bash