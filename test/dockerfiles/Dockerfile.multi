# Multi-platform Dockerfile for dotfiles - Truly Shared Architecture
# Single Dockerfile supporting Ubuntu and Arch with shared stages
# Usage: 
#   docker build --build-arg MACHINE_CLASS=docker_essential_ubuntu --target docker_essential_ubuntu
#   docker build --build-arg MACHINE_CLASS=docker_essential_arch --target docker_essential_arch

# =============================================================================
# PLATFORM-SPECIFIC BASE IMAGES
# =============================================================================

FROM ubuntu:22.04 AS base-ubuntu
# Install minimal system requirements for Ubuntu
RUN apt-get update --quiet && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      sudo git openssh-client wget curl ca-certificates build-essential \
      bash zsh locales less && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    useradd -u 1000 --create-home --comment "Ubuntu dotfiles user" user && \
    usermod -aG sudo user && \
    echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    echo 'user:user' | chpasswd && \
    locale-gen en_US.UTF-8 && \
    update-locale LANG=en_US.UTF-8

FROM --platform=linux/amd64 archlinux:latest AS base-arch
# Install minimal system requirements for Arch
RUN pacman -Syu --noconfirm && \
    pacman -S --noconfirm git curl wget sudo base-devel tzdata zsh less && \
    useradd -m -G wheel -s /bin/bash user && \
    echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \
    echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && \
    locale-gen

# =============================================================================
# SHARED SETUP TEMPLATE - Common logic for both platforms
# =============================================================================

# Ubuntu setup path
FROM base-ubuntu AS setup-ubuntu
USER user
WORKDIR /home/user
ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en
ARG TZ
ENV TZ=${TZ:-UTC}
RUN sudo ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
WORKDIR /home/user/dotfiles

# Arch setup path  
FROM base-arch AS setup-arch
USER user
WORKDIR /home/user
ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en
ARG TZ
ENV TZ=${TZ:-UTC}
RUN sudo ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
WORKDIR /home/user/dotfiles

# =============================================================================
# UBUNTU BUILD PATH - Uses ubuntu platform detection
# =============================================================================

FROM setup-ubuntu AS configure-ubuntu
ARG MACHINE_CLASS
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
ENV DOTFILES_PLATFORM=ubuntu

COPY --chown=user:user configure.sh ./
COPY --chown=user:user scripts/package-management/interactive-prompts.sh scripts/package-management/
COPY --chown=user:user machine-classes/ ./machine-classes/

ENV DOTFILES_PROMPT_TIMEOUT=3
RUN ./configure.sh

FROM configure-ubuntu AS bootstrap-ubuntu
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user scripts/bootstrap/ ./scripts/bootstrap/
RUN ./bootstrap.sh

FROM bootstrap-ubuntu AS stow-ubuntu
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user scripts/health/ ./scripts/health/
COPY --chown=user:user scripts/stow/ ./scripts/stow/
COPY --chown=user:user scripts/show-config.sh ./scripts/
RUN just stow

FROM stow-ubuntu AS shell-ubuntu
# Use dotfiles API to initialize shell plugins
COPY --chown=user:user scripts/package-management/init-dev-packages.sh ./scripts/package-management/
COPY --chown=user:user scripts/package-management/verify-dev-package-install.sh ./scripts/package-management/
RUN ./scripts/package-management/init-dev-packages.sh || true

FROM shell-ubuntu AS install-ubuntu
# Copy shared package management utilities first (changes least frequently)
COPY --chown=user:user scripts/package-management/shared/ ./scripts/package-management/shared/
COPY --chown=user:user scripts/package-management/interactive-prompts.sh ./scripts/package-management/

# Install system packages with granular caching per package manager
FROM install-ubuntu AS install-apt-ubuntu
COPY --chown=user:user scripts/package-management/apt/ ./scripts/package-management/apt/
RUN ./scripts/package-management/apt/install-apt-packages.sh || true

FROM install-apt-ubuntu AS install-brew-ubuntu  
COPY --chown=user:user scripts/package-management/brew/ ./scripts/package-management/brew/
RUN ./scripts/package-management/brew/install-brew-packages.sh || true

FROM install-brew-ubuntu AS install-pip-ubuntu
COPY --chown=user:user scripts/package-management/pip/ ./scripts/package-management/pip/
RUN ./scripts/package-management/pip/install-pip-packages.sh || true

FROM install-pip-ubuntu AS install-npm-ubuntu
COPY --chown=user:user scripts/package-management/npm/ ./scripts/package-management/npm/
RUN ./scripts/package-management/npm/install-npm-packages.sh || true

FROM install-npm-ubuntu AS install-gem-ubuntu
COPY --chown=user:user scripts/package-management/gem/ ./scripts/package-management/gem/
RUN ./scripts/package-management/gem/install-gem-packages.sh || true

FROM install-gem-ubuntu AS install-system-ubuntu

# Install dev packages with granular caching per package manager
FROM install-system-ubuntu AS install-emacs-ubuntu
COPY --chown=user:user scripts/package-management/emacs/ ./scripts/package-management/emacs/
RUN ./scripts/package-management/emacs/init-emacs-packages.sh || true

FROM install-emacs-ubuntu AS install-neovim-ubuntu
COPY --chown=user:user scripts/package-management/neovim/ ./scripts/package-management/neovim/
RUN ./scripts/package-management/neovim/init-neovim-packages.sh || true

FROM install-neovim-ubuntu AS install-zsh-ubuntu
COPY --chown=user:user scripts/package-management/zsh/ ./scripts/package-management/zsh/
RUN ./scripts/package-management/zsh/init-zsh-packages.sh || true

FROM install-zsh-ubuntu AS dev-packages-ubuntu

# =============================================================================
# ARCH BUILD PATH - Uses arch platform detection
# =============================================================================

FROM setup-arch AS configure-arch
ARG MACHINE_CLASS
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
ENV DOTFILES_PLATFORM=arch

COPY --chown=user:user configure.sh ./
COPY --chown=user:user scripts/package-management/interactive-prompts.sh scripts/package-management/
COPY --chown=user:user machine-classes/ ./machine-classes/

ENV DOTFILES_PROMPT_TIMEOUT=3
RUN ./configure.sh

FROM configure-arch AS bootstrap-arch
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user scripts/bootstrap/ ./scripts/bootstrap/
RUN ./bootstrap.sh

FROM bootstrap-arch AS stow-arch
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user scripts/health/ ./scripts/health/
COPY --chown=user:user scripts/stow/ ./scripts/stow/
COPY --chown=user:user scripts/show-config.sh ./scripts/
RUN just stow

FROM stow-arch AS shell-arch
# Use dotfiles API to initialize shell plugins
COPY --chown=user:user scripts/package-management/init-dev-packages.sh ./scripts/package-management/
COPY --chown=user:user scripts/package-management/verify-dev-package-install.sh ./scripts/package-management/
RUN ./scripts/package-management/init-dev-packages.sh || true

FROM shell-arch AS install-arch
# Copy shared package management utilities first (changes least frequently)
COPY --chown=user:user scripts/package-management/shared/ ./scripts/package-management/shared/
COPY --chown=user:user scripts/package-management/interactive-prompts.sh ./scripts/package-management/

# Install system packages with granular caching per package manager
FROM install-arch AS install-pacman-arch
COPY --chown=user:user scripts/package-management/pacman/ ./scripts/package-management/pacman/
RUN ./scripts/package-management/pacman/install-pacman-packages.sh || true

FROM install-pacman-arch AS install-pip-arch
COPY --chown=user:user scripts/package-management/pip/ ./scripts/package-management/pip/
RUN ./scripts/package-management/pip/install-pip-packages.sh || true

FROM install-pip-arch AS install-npm-arch
COPY --chown=user:user scripts/package-management/npm/ ./scripts/package-management/npm/
RUN ./scripts/package-management/npm/install-npm-packages.sh || true

FROM install-npm-arch AS install-gem-arch
COPY --chown=user:user scripts/package-management/gem/ ./scripts/package-management/gem/
RUN ./scripts/package-management/gem/install-gem-packages.sh || true

FROM install-gem-arch AS install-cargo-arch
COPY --chown=user:user scripts/package-management/cargo/ ./scripts/package-management/cargo/
RUN ./scripts/package-management/cargo/install-cargo-packages.sh || true

FROM install-cargo-arch AS install-system-arch

# Install dev packages with granular caching per package manager  
FROM install-system-arch AS install-emacs-arch
COPY --chown=user:user scripts/package-management/emacs/ ./scripts/package-management/emacs/
RUN ./scripts/package-management/emacs/init-emacs-packages.sh || true

FROM install-emacs-arch AS install-neovim-arch
COPY --chown=user:user scripts/package-management/neovim/ ./scripts/package-management/neovim/
RUN ./scripts/package-management/neovim/init-neovim-packages.sh || true

FROM install-neovim-arch AS install-zsh-arch
COPY --chown=user:user scripts/package-management/zsh/ ./scripts/package-management/zsh/
RUN ./scripts/package-management/zsh/init-zsh-packages.sh || true

FROM install-zsh-arch AS dev-packages-arch

# =============================================================================
# FINAL MACHINE-SPECIFIC TARGETS
# =============================================================================

# Ubuntu machine classes
FROM dev-packages-ubuntu AS docker_essential_ubuntu
ARG MACHINE_CLASS=docker_essential_ubuntu
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'

FROM dev-packages-ubuntu AS docker_developer_ubuntu
ARG MACHINE_CLASS=docker_developer_ubuntu
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'

FROM dev-packages-ubuntu AS docker_ubuntu_gui
ARG MACHINE_CLASS=docker_ubuntu_gui
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'

# Arch machine classes
FROM dev-packages-arch AS docker_essential_arch
ARG MACHINE_CLASS=docker_essential_arch
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'

FROM dev-packages-arch AS docker_developer_arch
ARG MACHINE_CLASS=docker_developer_arch
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'

FROM dev-packages-arch AS docker_arch_gui
ARG MACHINE_CLASS=docker_arch_gui
ENV DOTFILES_MACHINE_CLASS=${MACHINE_CLASS}
# Copy all remaining package management scripts for final stage
COPY --chown=user:user scripts/package-management/*.sh ./scripts/package-management/
RUN chmod +x ./scripts/package-management/*.sh
# Copy machine class definitions last (touching these invalidates check/upgrade testing)
COPY --chown=user:user machine-classes/ ./machine-classes/
# Test package checking and health
RUN zsh -l -c 'just check-health && just check-packages && just show-package-stats'