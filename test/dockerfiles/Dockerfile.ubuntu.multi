# Multi-stage Dockerfile for Ubuntu dotfiles testing
# Tests complete workflow: configure → bootstrap → stow → install → update

# =============================================================================
# BASE STAGE - Common system setup for all Ubuntu tests
# =============================================================================
FROM ubuntu:22.04 AS base

# Install only minimal system requirements, then use real bootstrap scripts
RUN apt-get update --quiet && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      sudo git openssh-client wget curl ca-certificates build-essential \
      bash zsh && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    useradd -u 1000 --create-home --comment "Ubuntu dotfiles user" user && \
    usermod -aG sudo user && \
    echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    echo 'user:user' | chpasswd

# No additional tools needed - bootstrap.sh will handle everything

USER user
WORKDIR /home/user

# Set timezone from host system (fallback to UTC)
ARG TZ
ENV TZ=${TZ:-UTC}
RUN sudo ln -sf /usr/share/zoneinfo/$TZ /etc/localtime

# Copy dotfiles into container
COPY --chown=user:user . dotfiles/
WORKDIR /home/user/dotfiles

# =============================================================================
# CONFIGURE STAGE - Interactive configuration
# =============================================================================
FROM base AS configure
RUN echo "=== CONFIGURE STAGE ===" && \
    echo "🕐 Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "3\n1\n1\ny\n" | ./configure.sh --no-autodetect && \
    echo "📋 Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "🔍 Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=ubuntu" ~/.dotfiles.env && \
    grep -q "# Selected: min-cli" ~/.dotfiles.env && \
    echo "✅ Configuration verified!" && \
    echo "🕐 Configure end time: $(date)"

# =============================================================================
# BOOTSTRAP STAGE - Tool installation
# =============================================================================
# Tier 1: min-cli configuration
FROM base AS configure-min-cli
RUN echo "=== CONFIGURE min-cli STAGE ===" && \
    echo "🕐 Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "3\n1\n1\ny\n" | ./configure.sh --no-autodetect && \
    echo "📋 Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "🔍 Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=ubuntu" ~/.dotfiles.env && \
    grep -q "# Selected: min-cli" ~/.dotfiles.env && \
    echo "✅ Configuration verified!" && \
    echo "🕐 Configure end time: $(date)"

# Tier 2: mid-cli configuration
FROM base AS configure-mid-cli
RUN echo "=== CONFIGURE mid-cli STAGE ===" && \
    echo "🕐 Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "3\n1\n2\ny\n" | ./configure.sh --no-autodetect && \
    echo "📋 Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "🔍 Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=ubuntu" ~/.dotfiles.env && \
    grep -q "# Selected: mid-cli" ~/.dotfiles.env && \
    echo "✅ Configuration verified!" && \
    echo "🕐 Configure end time: $(date)"

# Tier 3: mid-dev configuration
FROM base AS configure-mid-dev
RUN echo "=== CONFIGURE mid-dev STAGE ===" && \
    echo "🕐 Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "3\n1\n3\ny\n" | ./configure.sh --no-autodetect && \
    echo "📋 Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "🔍 Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=ubuntu" ~/.dotfiles.env && \
    grep -q "# Selected: mid-dev" ~/.dotfiles.env && \
    echo "✅ Configuration verified!" && \
    echo "🕐 Configure end time: $(date)"

# Tier 4: max-dev configuration
FROM base AS configure-max-dev
RUN echo "=== CONFIGURE max-dev STAGE ===" && \
    echo "🕐 Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "3\n1\n4\ny\n" | ./configure.sh --no-autodetect && \
    echo "📋 Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "🔍 Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=ubuntu" ~/.dotfiles.env && \
    grep -q "# Selected: max-dev" ~/.dotfiles.env && \
    echo "✅ Configuration verified!" && \
    echo "🕐 Configure end time: $(date)"

FROM configure-min-cli AS bootstrap-min-cli
RUN echo "=== BOOTSTRAP min-cli STAGE ===" && \
    echo "🕐 Bootstrap start time: $(date)" && \
    echo "🔧 Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "🏥 Health check after bootstrap:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Empty system after bootstrap is expected' && \
    echo "🔍 Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "✅ Bootstrap complete!" && \
    echo "🕐 Bootstrap end time: $(date)"

FROM configure-mid-cli AS bootstrap-mid-cli
RUN echo "=== BOOTSTRAP mid-cli STAGE ===" && \
    echo "🕐 Bootstrap start time: $(date)" && \
    echo "🔧 Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "🏥 Health check after bootstrap:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Empty system after bootstrap is expected' && \
    echo "🔍 Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "✅ Bootstrap complete!" && \
    echo "🕐 Bootstrap end time: $(date)"

FROM configure-mid-dev AS bootstrap-mid-dev
RUN echo "=== BOOTSTRAP mid-dev STAGE ===" && \
    echo "🕐 Bootstrap start time: $(date)" && \
    echo "🔧 Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "🏥 Health check after bootstrap:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Empty system after bootstrap is expected' && \
    echo "🔍 Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "✅ Bootstrap complete!" && \
    echo "🕐 Bootstrap end time: $(date)"

FROM configure-max-dev AS bootstrap-max-dev
RUN echo "=== BOOTSTRAP max-dev STAGE ===" && \
    echo "🕐 Bootstrap start time: $(date)" && \
    echo "🔧 Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "🏥 Health check after bootstrap:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Empty system after bootstrap is expected' && \
    echo "🔍 Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "✅ Bootstrap complete!" && \
    echo "🕐 Bootstrap end time: $(date)"

# =============================================================================
# STOW STAGE - Config deployment
# =============================================================================
FROM bootstrap-min-cli AS stow-min-cli
RUN echo "=== STOW min-cli STAGE ===" && \
    echo "🔍 Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "🧹 Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "🏥 Health check after stow:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Health check after stow - some configs may not create visible symlinks' && \
    echo "✅ Stow complete!"

FROM bootstrap-mid-cli AS stow-mid-cli
RUN echo "=== STOW mid-cli STAGE ===" && \
    echo "🔍 Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "🧹 Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "🏥 Health check after stow:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Health check after stow - some configs may not create visible symlinks' && \
    echo "✅ Stow complete!"

FROM bootstrap-mid-dev AS stow-mid-dev
RUN echo "=== STOW mid-dev STAGE ===" && \
    echo "🔍 Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "🧹 Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "🏥 Health check after stow:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Health check after stow - some configs may not create visible symlinks' && \
    echo "✅ Stow complete!"

FROM bootstrap-max-dev AS stow-max-dev
RUN echo "=== STOW max-dev STAGE ===" && \
    echo "🔍 Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "🧹 Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "🏥 Health check after stow:" && \
    bash tools/dotfiles-health/dotfiles-health.sh || echo '⚠️  Health check after stow - some configs may not create visible symlinks' && \
    echo "✅ Stow complete!"

# =============================================================================
# INSTALL STAGE - Package installation
# =============================================================================
FROM stow-min-cli AS install-min-cli
RUN echo "=== INSTALL min-cli STAGE ===" && \
    echo "📊 Showing configuration:" && \
    just show-config && \
    echo "📦 Installing packages..." && \
    just install && \
    echo "🏥 Health check after install:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "✅ Install complete!"

FROM stow-mid-cli AS install-mid-cli
RUN echo "=== INSTALL mid-cli STAGE ===" && \
    echo "📊 Showing configuration:" && \
    just show-config && \
    echo "📦 Installing packages..." && \
    just install && \
    echo "🏥 Health check after install:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "✅ Install complete!"

FROM stow-mid-dev AS install-mid-dev
RUN echo "=== INSTALL mid-dev STAGE ===" && \
    echo "📊 Showing configuration:" && \
    just show-config && \
    echo "📦 Installing packages..." && \
    just install && \
    echo "🏥 Health check after install:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "✅ Install complete!"

FROM stow-max-dev AS install-max-dev
RUN echo "=== INSTALL max-dev STAGE ===" && \
    echo "📊 Showing configuration:" && \
    just show-config && \
    echo "📦 Installing packages..." && \
    just install && \
    echo "🏥 Health check after install:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "✅ Install complete!"

# =============================================================================
# UPDATE STAGE - Complete workflow
# =============================================================================
FROM install-min-cli AS update-min-cli
RUN echo "=== UPDATE min-cli STAGE ===" && \
    just update-check && \
    echo "🏥 Final health check:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "🧪 Verifying installed packages:" && \
    which git stow && \
    echo "✅ Ubuntu min-cli workflow complete!"

FROM install-mid-cli AS update-mid-cli
RUN echo "=== UPDATE mid-cli STAGE ===" && \
    just update-check && \
    echo "🏥 Final health check:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "🧪 Verifying installed packages:" && \
    which git stow && \
    echo "✅ Ubuntu mid-cli workflow complete!"

FROM install-mid-dev AS update-mid-dev
RUN echo "=== UPDATE mid-dev STAGE ===" && \
    just update-check && \
    echo "🏥 Final health check:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "🧪 Verifying installed packages:" && \
    which git stow && \
    echo "✅ Ubuntu mid-dev workflow complete!"

FROM install-max-dev AS update-max-dev
RUN echo "=== UPDATE max-dev STAGE ===" && \
    just update-check && \
    echo "🏥 Final health check:" && \
    bash tools/dotfiles-health/dotfiles-health.sh && \
    echo "🧪 Verifying installed packages:" && \
    which git stow && \
    echo "✅ Ubuntu max-dev workflow complete!"

# Legacy compatibility targets
FROM update-min-cli AS update-basic