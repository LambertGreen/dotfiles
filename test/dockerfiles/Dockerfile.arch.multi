# Multi-stage Dockerfile for Arch dotfiles testing
# Tests complete workflow: configure ‚Üí bootstrap ‚Üí stow ‚Üí install ‚Üí update

# =============================================================================
# BASE STAGE - Common system setup for all Arch tests
# =============================================================================
FROM --platform=linux/amd64 archlinux:latest AS base

# Install only absolute minimal system requirements - let bootstrap handle the rest
RUN pacman -Syu --noconfirm && \
    pacman -S --noconfirm git curl wget sudo base-devel tzdata zsh && \
    useradd -m -G wheel -s /bin/bash user && \
    echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

USER user
WORKDIR /home/user

# Set timezone from host system (fallback to UTC)
ARG TZ
ENV TZ=${TZ:-UTC}
RUN sudo ln -sf /usr/share/zoneinfo/$TZ /etc/localtime

# Copy only essential files first for better caching
WORKDIR /home/user/dotfiles

# =============================================================================
# CONFIGURE STAGE - Interactive configuration
# =============================================================================
FROM base AS configure
# Copy only configuration script for configure stage
COPY --chown=user:user configure.sh ./
RUN echo "=== CONFIGURE STAGE ===" && \
    echo "üïê Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "2\n1\n1\ny\n" | ./configure.sh --no-autodetect && \
    echo "üìã Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=arch" ~/.dotfiles.env && \
    grep -q "# Selected: min-cli" ~/.dotfiles.env && \
    echo "‚úÖ Configuration verified!" && \
    echo "üïê Configure end time: $(date)"

# =============================================================================
# BOOTSTRAP STAGE - Tool installation
# =============================================================================
# Tier 1: min-cli configuration
FROM base AS configure-min-cli
# Copy only configuration script for configure stage
COPY --chown=user:user configure.sh ./
RUN echo "=== CONFIGURE min-cli STAGE ===" && \
    echo "üïê Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "2\n1\n1\ny\n" | ./configure.sh --no-autodetect && \
    echo "üìã Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=arch" ~/.dotfiles.env && \
    grep -q "# Selected: min-cli" ~/.dotfiles.env && \
    echo "‚úÖ Configuration verified!" && \
    echo "üïê Configure end time: $(date)"

# Tier 2: mid-cli configuration
FROM base AS configure-mid-cli
# Copy only configuration script for configure stage
COPY --chown=user:user configure.sh ./
RUN echo "=== CONFIGURE mid-cli STAGE ===" && \
    echo "üïê Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "2\n1\n2\ny\n" | ./configure.sh --no-autodetect && \
    echo "üìã Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=arch" ~/.dotfiles.env && \
    grep -q "# Selected: mid-cli" ~/.dotfiles.env && \
    echo "‚úÖ Configuration verified!" && \
    echo "üïê Configure end time: $(date)"

# Tier 3: mid-dev configuration
FROM base AS configure-mid-dev
# Copy only configuration script for configure stage
COPY --chown=user:user configure.sh ./
RUN echo "=== CONFIGURE mid-dev STAGE ===" && \
    echo "üïê Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "2\n1\n3\ny\n" | ./configure.sh --no-autodetect && \
    echo "üìã Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=arch" ~/.dotfiles.env && \
    grep -q "# Selected: mid-dev" ~/.dotfiles.env && \
    echo "‚úÖ Configuration verified!" && \
    echo "üïê Configure end time: $(date)"

# Tier 4: max-dev configuration
FROM base AS configure-max-dev
# Copy only configuration script for configure stage
COPY --chown=user:user configure.sh ./
RUN echo "=== CONFIGURE max-dev STAGE ===" && \
    echo "üïê Configure start time: $(date)" && \
    rm -f ~/.dotfiles.env && \
    printf "2\n1\n4\ny\n" | ./configure.sh --no-autodetect && \
    echo "üìã Generated configuration:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Verifying configuration..." && \
    grep -q "DOTFILES_PLATFORM=arch" ~/.dotfiles.env && \
    grep -q "# Selected: max-dev" ~/.dotfiles.env && \
    echo "‚úÖ Configuration verified!" && \
    echo "üïê Configure end time: $(date)"

FROM configure-min-cli AS bootstrap-min-cli
# Copy bootstrap files and health check tools
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user bootstrap/ ./bootstrap/
COPY --chown=user:user tools/dotfiles-health/ ./tools/dotfiles-health/
RUN echo "=== BOOTSTRAP min-cli STAGE ===" && \
    echo "üïê Bootstrap start time: $(date)" && \
    echo "üîß Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "üè• Health check after bootstrap:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Empty system after bootstrap is expected' && \
    echo "üîç Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "‚úÖ Bootstrap complete!" && \
    echo "üïê Bootstrap end time: $(date)"

FROM configure-mid-cli AS bootstrap-mid-cli
# Copy bootstrap files and health check tools
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user bootstrap/ ./bootstrap/
COPY --chown=user:user tools/dotfiles-health/ ./tools/dotfiles-health/
RUN echo "=== BOOTSTRAP mid-cli STAGE ===" && \
    echo "üïê Bootstrap start time: $(date)" && \
    echo "üîß Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "üè• Health check after bootstrap:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Empty system after bootstrap is expected' && \
    echo "üîç Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "‚úÖ Bootstrap complete!" && \
    echo "üïê Bootstrap end time: $(date)"

FROM configure-mid-dev AS bootstrap-mid-dev
# Copy bootstrap files and health check tools
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user bootstrap/ ./bootstrap/
COPY --chown=user:user tools/dotfiles-health/ ./tools/dotfiles-health/
RUN echo "=== BOOTSTRAP mid-dev STAGE ===" && \
    echo "üïê Bootstrap start time: $(date)" && \
    echo "üîß Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "üè• Health check after bootstrap:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Empty system after bootstrap is expected' && \
    echo "üîç Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "‚úÖ Bootstrap complete!" && \
    echo "üïê Bootstrap end time: $(date)"

FROM configure-max-dev AS bootstrap-max-dev
# Copy bootstrap files and health check tools
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user bootstrap/ ./bootstrap/
COPY --chown=user:user tools/dotfiles-health/ ./tools/dotfiles-health/
RUN echo "=== BOOTSTRAP max-dev STAGE ===" && \
    echo "üïê Bootstrap start time: $(date)" && \
    echo "üîß Running actual bootstrap script for system parity..." && \
    ./bootstrap.sh && \
    echo "üè• Health check after bootstrap:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Empty system after bootstrap is expected' && \
    echo "üîç Verifying tools installed by bootstrap scripts..." && \
    which stow && stow --version && \
    which just && just --version && \
    which python3 && python3 --version && \
    echo "‚úÖ Bootstrap complete!" && \
    echo "üïê Bootstrap end time: $(date)"

# =============================================================================
# STOW STAGE - Config deployment
# =============================================================================
FROM bootstrap-min-cli AS stow-min-cli
# Copy configuration files and package management scripts for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== STOW min-cli STAGE ===" && \
    echo "üîç Validating min-cli configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "üîç Asserting expected min-cli config values..." && \
    grep -q "DOTFILES_CLI_UTILS=true" ~/.dotfiles.env && \
    grep -q "DOTFILES_CLI_UTILS_HEAVY=false" ~/.dotfiles.env && \
    grep -q "DOTFILES_CLI_EDITORS=false" ~/.dotfiles.env && \
    grep -q "DOTFILES_DEV_ENV=false" ~/.dotfiles.env && \
    echo "‚úÖ min-cli configuration validated!" && \
    echo "üßπ Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "üîç Checking what symlinks were created:" && \
    find /home/user -maxdepth 2 -type l | head -10 || echo "No symlinks found" && \
    echo "üè• Health check after stow:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Health check after stow - some configs may not create visible symlinks' && \
    echo "‚úÖ Stow complete!"

FROM bootstrap-mid-cli AS stow-mid-cli
# Copy configuration files and package management scripts for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== STOW mid-cli STAGE ===" && \
    echo "üîç Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "üßπ Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "üîç Checking what symlinks were created:" && \
    find /home/user -maxdepth 2 -type l | head -10 || echo "No symlinks found" && \
    echo "üè• Health check after stow:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Health check after stow - some configs may not create visible symlinks' && \
    echo "‚úÖ Stow complete!"

FROM bootstrap-mid-dev AS stow-mid-dev
# Copy configuration files and package management scripts for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== STOW mid-dev STAGE ===" && \
    echo "üîç Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "üßπ Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "üîç Checking what symlinks were created:" && \
    find /home/user -maxdepth 2 -type l | head -10 || echo "No symlinks found" && \
    echo "üè• Health check after stow:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Health check after stow - some configs may not create visible symlinks' && \
    echo "‚úÖ Stow complete!"

FROM bootstrap-max-dev AS stow-max-dev
# Copy configuration files and package management scripts for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== STOW max-dev STAGE ===" && \
    echo "üîç Showing configuration before stow:" && \
    cat ~/.dotfiles.env && \
    echo "üßπ Removing default shell files that conflict with stow..." && \
    rm -f ~/.bash_profile ~/.bashrc && \
    just stow && \
    echo "üîç Checking what symlinks were created:" && \
    find /home/user -maxdepth 2 -type l | head -10 || echo "No symlinks found" && \
    echo "üè• Health check after stow:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" || echo '‚ö†Ô∏è  Health check after stow - some configs may not create visible symlinks' && \
    echo "‚úÖ Stow complete!"

# =============================================================================
# INSTALL STAGE - Package installation
# =============================================================================
FROM stow-min-cli AS install-min-cli
# Copy package management tools
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== INSTALL min-cli STAGE ===" && \
    echo "üìä Showing configuration:" && \
    just show-config && \
    echo "üì¶ Installing packages..." && \
    just install && \
    echo "üè• Health check after install:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "‚úÖ Install complete!"

FROM stow-mid-cli AS install-mid-cli
# Copy package management tools
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== INSTALL mid-cli STAGE ===" && \
    echo "üìä Showing configuration:" && \
    just show-config && \
    echo "üì¶ Installing packages..." && \
    just install && \
    echo "üè• Health check after install:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "‚úÖ Install complete!"

FROM stow-mid-dev AS install-mid-dev
# Copy package management tools
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== INSTALL mid-dev STAGE ===" && \
    echo "üìä Showing configuration:" && \
    just show-config && \
    echo "üì¶ Installing packages..." && \
    just install && \
    echo "üè• Health check after install:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "‚úÖ Install complete!"

FROM stow-max-dev AS install-max-dev
# Copy package management tools
COPY --chown=user:user tools/package-management/ ./tools/package-management/
RUN echo "=== INSTALL max-dev STAGE ===" && \
    echo "üìä Showing configuration:" && \
    just show-config && \
    echo "üì¶ Installing packages..." && \
    just install && \
    echo "üè• Health check after install:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "‚úÖ Install complete!"

# =============================================================================
# UPDATE STAGE - Complete workflow
# =============================================================================
FROM install-min-cli AS update-min-cli
RUN echo "=== UPDATE min-cli STAGE ===" && \
    just update-check && \
    echo "üè• Final health check:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "üß™ Verifying installed packages:" && \
    which git stow && \
    echo "‚úÖ Arch min-cli workflow complete!"

FROM install-mid-cli AS update-mid-cli
RUN echo "=== UPDATE mid-cli STAGE ===" && \
    just update-check && \
    echo "üè• Final health check:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "üß™ Verifying installed packages:" && \
    which git stow && \
    echo "‚úÖ Arch mid-cli workflow complete!"

FROM install-mid-dev AS update-mid-dev
RUN echo "=== UPDATE mid-dev STAGE ===" && \
    just update-check && \
    echo "üè• Final health check:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "üß™ Verifying installed packages:" && \
    which git stow && \
    echo "‚úÖ Arch mid-dev workflow complete!"

FROM install-max-dev AS update-max-dev
RUN echo "=== UPDATE max-dev STAGE ===" && \
    just update-check && \
    echo "üè• Final health check:" && \
    bash -c "set -a && source ~/.dotfiles.env 2>/dev/null && set +a && bash tools/dotfiles-health/dotfiles-health.sh" && \
    echo "üß™ Verifying installed packages:" && \
    which git stow && \
    echo "‚úÖ Arch max-dev workflow complete!"

# Legacy compatibility targets
FROM update-min-cli AS update-basic