# Multi-stage Dockerfile for Arch dotfiles
# Docker as a valid Linux runtime on non-Linux machines

# =============================================================================
# BASE STAGE - Common system setup for all Arch containers
# =============================================================================
FROM --platform=linux/amd64 archlinux:latest AS base

# Install only absolute minimal system requirements - let bootstrap handle the rest
RUN pacman -Syu --noconfirm && \
    pacman -S --noconfirm git curl wget sudo base-devel tzdata zsh && \
    useradd -m -G wheel -s /bin/bash user && \
    echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

USER user
WORKDIR /home/user

# Set timezone from host system (fallback to UTC)
ARG TZ
ENV TZ=${TZ:-UTC}
RUN sudo ln -sf /usr/share/zoneinfo/$TZ /etc/localtime

WORKDIR /home/user/dotfiles

# =============================================================================
# CONFIGURE STAGE - Configuration with efficient caching
# =============================================================================
FROM base AS configure-arch-essential

# Copy only configuration script for better caching
COPY --chown=user:user configure.sh ./
COPY --chown=user:user scripts/package-management/interactive-prompts.sh scripts/package-management/
# Copy only package manager configs needed for configure (not stow configs)
COPY --chown=user:user package-management/machines/docker_arch_essential/pacman/ ./package-management/machines/docker_arch_essential/pacman/
COPY --chown=user:user package-management/machines/docker_arch_essential/brew/ ./package-management/machines/docker_arch_essential/brew/

# Set fast timeout for Docker and pre-select machine class
ENV DOTFILES_PROMPT_TIMEOUT=3
ENV DOTFILES_MACHINE_CLASS=docker_arch_essential

# Configure - real user command with fast timeout
RUN ./configure.sh

# =============================================================================
# BOOTSTRAP STAGE - Install core tools
# =============================================================================
FROM configure-arch-essential AS bootstrap-arch-essential

# Copy only bootstrap files for caching
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user scripts/bootstrap/ ./scripts/bootstrap/

# Bootstrap - real user command  
RUN ./bootstrap.sh

# =============================================================================
# STOW STAGE - Deploy configurations
# =============================================================================
FROM bootstrap-arch-essential AS stow-arch-essential

# Copy configuration files for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user scripts/health/ ./scripts/health/
COPY --chown=user:user scripts/stow/ ./scripts/stow/
# Copy stow configuration for this machine class
COPY --chown=user:user package-management/machines/docker_arch_essential/stow/ ./package-management/machines/docker_arch_essential/stow/

# Remove default shell files that conflict with stow
RUN rm -f /home/user/.bashrc /home/user/.bash_profile /home/user/.profile || true
# Deploy configurations - real user command
RUN just stow

# =============================================================================
# INSTALL STAGE - Package installation
# =============================================================================
FROM stow-arch-essential AS install-arch-essential

# Copy only package management files needed for install stage
COPY --chown=user:user package-management/machines/docker_arch_essential/pacman/ ./package-management/machines/docker_arch_essential/pacman/
COPY --chown=user:user package-management/machines/docker_arch_essential/brew/ ./package-management/machines/docker_arch_essential/brew/
COPY --chown=user:user scripts/package-management/ ./scripts/package-management/
# Create expected directory structure for scripts
RUN mkdir -p ./package-management/scripts/
RUN cp ./scripts/package-management/interactive-prompts.sh ./package-management/scripts/

# Install packages - real user command
RUN just install-packages

# =============================================================================
# FINAL STAGE: docker_arch_essential
# Minimal Arch system with pacman + homebrew for emacs 30+
# =============================================================================
FROM install-arch-essential AS docker_arch_essential

# Final validation - real user commands
RUN just check-health && \
    just show-package-stats

# =============================================================================
# MACHINE CLASS: docker_arch_developer
# Development environment with pacman + AUR/yay + homebrew + pip + npm
# =============================================================================
# Configure stage for developer
FROM base AS configure-arch-developer

# Copy only configuration script and machine definitions for better caching
COPY --chown=user:user configure.sh ./
COPY --chown=user:user scripts/package-management/interactive-prompts.sh scripts/package-management/
COPY --chown=user:user package-management/machines/ ./package-management/machines/

# Set fast timeout for Docker and pre-select machine class
ENV DOTFILES_PROMPT_TIMEOUT=3
ENV DOTFILES_MACHINE_CLASS=docker_arch_developer

# Configure - real user command with fast timeout
RUN ./configure.sh

# Bootstrap stage for developer
FROM configure-arch-developer AS bootstrap-arch-developer

# Copy only bootstrap files for caching
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user scripts/bootstrap/ ./scripts/bootstrap/

# Bootstrap - real user command  
RUN ./bootstrap.sh

# Stow stage for developer
FROM bootstrap-arch-developer AS stow-arch-developer

# Copy configuration files for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user scripts/health/ ./scripts/health/
COPY --chown=user:user scripts/stow/ ./scripts/stow/

# Remove default shell files that conflict with stow
RUN rm -f /home/user/.bashrc /home/user/.bash_profile /home/user/.profile || true
# Deploy configurations - real user command
RUN just stow

# Install stage for developer
FROM stow-arch-developer AS install-arch-developer

# Copy package management system
COPY --chown=user:user package-management/ ./package-management/
COPY --chown=user:user scripts/package-management/ ./scripts/package-management/
# Create expected directory structure for scripts
RUN mkdir -p ./package-management/scripts/
RUN cp ./scripts/package-management/interactive-prompts.sh ./package-management/scripts/

# Install packages - real user command
RUN just install-packages

# Final stage for developer
FROM install-arch-developer AS docker_arch_developer

# Final validation - real user commands
RUN just check-health && \
    just show-package-stats

# =============================================================================
# MACHINE CLASS: docker_arch_gui
# Full desktop environment (validation only)
# =============================================================================
# Configure stage for GUI
FROM base AS configure-arch-gui

# Copy only configuration script and machine definitions for better caching
COPY --chown=user:user configure.sh ./
COPY --chown=user:user scripts/package-management/interactive-prompts.sh scripts/package-management/
COPY --chown=user:user package-management/machines/ ./package-management/machines/

# Set fast timeout for Docker and pre-select machine class
ENV DOTFILES_PROMPT_TIMEOUT=3
ENV DOTFILES_MACHINE_CLASS=docker_arch_gui

# Configure - real user command with fast timeout
RUN ./configure.sh

# Bootstrap stage for GUI
FROM configure-arch-gui AS bootstrap-arch-gui

# Copy only bootstrap files for caching
COPY --chown=user:user bootstrap.sh ./
COPY --chown=user:user scripts/bootstrap/ ./scripts/bootstrap/

# Bootstrap - real user command  
RUN ./bootstrap.sh

# Stow stage for GUI
FROM bootstrap-arch-gui AS stow-arch-gui

# Copy configuration files for stowing
COPY --chown=user:user configs/ ./configs/
COPY --chown=user:user justfile ./
COPY --chown=user:user scripts/health/ ./scripts/health/
COPY --chown=user:user scripts/stow/ ./scripts/stow/

# Remove default shell files that conflict with stow
RUN rm -f /home/user/.bashrc /home/user/.bash_profile /home/user/.profile || true
# Deploy configurations - real user command
RUN just stow

# Install stage for GUI
FROM stow-arch-gui AS install-arch-gui

# Copy package management system
COPY --chown=user:user package-management/ ./package-management/
COPY --chown=user:user scripts/package-management/ ./scripts/package-management/
# Create expected directory structure for scripts
RUN mkdir -p ./package-management/scripts/
RUN cp ./scripts/package-management/interactive-prompts.sh ./package-management/scripts/

# Install packages - real user command
RUN just install-packages

# Final stage for GUI
FROM install-arch-gui AS docker_arch_gui

# Final validation - real user commands
RUN just check-health && \
    just show-package-stats