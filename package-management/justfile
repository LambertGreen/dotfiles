#!/usr/bin/env just --justfile
# Package Management System - Modal Interface
# Provides selective control over package manager operations

set dotenv-load := true
set shell := ["bash", "-uc"]

# Get the package management directory
pm_dir := justfile_directory()
scripts_dir := pm_dir / "scripts"
dotfiles_root := pm_dir / ".."
logs_dir := dotfiles_root / "logs"

# Default: show available commands
default:
    @just --list

# Configure machine class for this system
configure:
    @{{scripts_dir}}/configure-machine-class.sh

# Export current system packages to /tmp
export:
    @{{scripts_dir}}/export.sh

# Preview what will be installed (dry-run)
preview:
    @{{scripts_dir}}/import.sh

# Install dry-run (preview what will be installed)
install-dry-run:
    {{scripts_dir}}/import.sh
    @echo ""
    @echo "To install packages, run:"
    @echo "  just install                    # Install all packages"
    @echo "  just install-brew-packages      # Install only Homebrew packages"
    @echo "  just install-pip-packages       # Install only Python packages"
    @echo "  just install-npm-packages       # Install only NPM packages"

# Install all packages for configured machine class
install:
    {{scripts_dir}}/import.sh --install
    @echo ""
    @echo "View log with: just packages-log (from root) or just show-last-log (from here)"

# ─────────────────────────────────────────────────────────────────────────────
# Modal Interface - Selective Package Manager Commands
# ─────────────────────────────────────────────────────────────────────────────

# Show available install commands
installs:
    @echo "Available install commands:"
    @echo "  just install          # Install all packages"
    @echo "  just install-brew-packages     # Install packages via Homebrew"
    @echo "  just install-apt-packages      # Install packages via APT"
    @echo "  just install-pacman-packages   # Install packages via Pacman"
    @echo "  just install-pip-packages      # Install packages via pip"
    @echo "  just install-npm-packages      # Install packages via NPM"
    @echo "  just install-gem-packages      # Install packages via RubyGems"
    @echo "  just install-cargo-packages    # Install packages via Cargo"
    @echo "  just install-scoop-packages    # Install packages via Scoop"
    @echo "  just install-choco-packages    # Install packages via Chocolatey"
    @echo ""
    @echo "Preview commands (dry-run):"
    @echo "  just install-dry-run  # Preview all packages"
    @echo "  just preview-brew-packages     # Preview Homebrew packages"
    @echo "  just preview-pip-packages      # Preview Python packages"
    @echo "  etc..."
    @echo ""
    @echo "Add 'verbose' to any command for detailed output:"
    @echo "  just install verbose             # Verbose install"
    @echo "  just install-brew-packages verbose  # Verbose Homebrew install"

# Individual package manager installs
install-brew-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm brew {{ if verbose == "verbose" { "--verbose" } else { "" } }}

# Install Homebrew packages that require sudo (Docker Desktop, etc.)
install-brew-sudo:
    #!/usr/bin/env bash
    set -euo pipefail
    machine_class_file="${HOME}/.dotfiles.machine.class.env"
    if [[ ! -f "${machine_class_file}" ]]; then
        echo "Machine class not configured. Run: just configure"
        exit 1
    fi
    source "${machine_class_file}"
    brewfile_sudo="{{pm_dir}}/machines/${DOTFILES_MACHINE_CLASS}/brew/Brewfile.casks-sudo"
    if [[ -f "${brewfile_sudo}" ]]; then
        echo "Installing sudo-required casks (you will be prompted for password)..."
        echo "$ brew bundle install --file=\"${brewfile_sudo}\""
        brew bundle install --file="${brewfile_sudo}"
    else
        echo "No sudo-required Brewfile found at: ${brewfile_sudo}"
    fi

install-apt-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm apt {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-pacman-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm pacman {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-pip-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm pip {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-npm-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm npm {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-gem-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm gem {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-cargo-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm cargo {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-scoop-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm scoop {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-choco-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm choco {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-winget-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm winget {{ if verbose == "verbose" { "--verbose" } else { "" } }}

install-snap-packages verbose="":
    {{scripts_dir}}/import.sh --install --pm snap {{ if verbose == "verbose" { "--verbose" } else { "" } }}

# Preview commands (dry-run for each PM)
preview-brew-packages:
    @{{scripts_dir}}/import.sh --pm brew
    @echo "To install: just install-brew-packages"

preview-apt-packages:
    @{{scripts_dir}}/import.sh --pm apt
    @echo "To install: just install-apt-packages"

preview-pacman-packages:
    @{{scripts_dir}}/import.sh --pm pacman
    @echo "To install: just install-pacman-packages"

preview-pip-packages:
    @{{scripts_dir}}/import.sh --pm pip
    @echo "To install: just install-pip-packages"

preview-npm-packages:
    @{{scripts_dir}}/import.sh --pm npm
    @echo "To install: just install-npm-packages"

preview-gem-packages:
    @{{scripts_dir}}/import.sh --pm gem
    @echo "To install: just install-gem-packages"

preview-cargo-packages:
    @{{scripts_dir}}/import.sh --pm cargo
    @echo "To install: just install-cargo-packages"

preview-scoop-packages:
    @{{scripts_dir}}/import.sh --pm scoop
    @echo "To install: just install-scoop-packages"

preview-choco-packages:
    @{{scripts_dir}}/import.sh --pm choco
    @echo "To install: just install-choco-packages"

preview-winget-packages:
    @{{scripts_dir}}/import.sh --pm winget
    @echo "To install: just install-winget-packages"

preview-snap-packages:
    @{{scripts_dir}}/import.sh --pm snap
    @echo "To install: just install-snap-packages"

# ─────────────────────────────────────────────────────────────────────────────
# Update Commands
# ─────────────────────────────────────────────────────────────────────────────

# Show available check commands
checks:
    @echo "Available check commands:"
    @echo "  just check-all        # Check for updates (all PMs)"
    @echo "  just check-brew       # Check Homebrew updates"
    @echo "  just check-apt        # Check APT updates"
    @echo "  just check-pip        # Check pip updates"
    @echo "  just check-npm        # Check NPM updates"
    @echo "  etc..."

# Show available upgrade commands
upgrades:
    @echo "Available upgrade commands:"
    @echo "  just upgrade-all      # Upgrade all packages"
    @echo "  just upgrade-brew     # Upgrade via Homebrew"
    @echo "  just upgrade-apt      # Upgrade via APT"
    @echo "  just upgrade-pip      # Upgrade via pip"
    @echo "  just upgrade-npm      # Upgrade via NPM"
    @echo "  just upgrade-gem      # Upgrade via RubyGems"
    @echo "  etc..."

# Check for available updates (all package managers)
check-all:
    @echo "Checking for updates across all package managers..."
    @echo ""
    @if command -v brew >/dev/null 2>&1; then \
        echo "=== Homebrew ===" && \
        brew outdated || true; \
    fi
    @if command -v apt >/dev/null 2>&1; then \
        echo "" && \
        echo "=== APT ===" && \
        sudo apt update && apt list --upgradable 2>/dev/null | head -20 || true; \
    fi
    @if command -v pip3 >/dev/null 2>&1; then \
        echo "" && \
        echo "=== Python (pip) ===" && \
        (pip3 list --outdated --user 2>/dev/null | head -20 || pip3 list --outdated 2>/dev/null | head -20) || true; \
    fi
    @if command -v npm >/dev/null 2>&1; then \
        echo "" && \
        echo "=== NPM ===" && \
        npm outdated -g || true; \
    fi

# Individual check commands
check-brew:
    @if command -v brew >/dev/null 2>&1; then \
        echo "=== Homebrew Updates ===" && \
        brew outdated || echo "All packages are up to date"; \
    else \
        echo "Homebrew not installed"; \
    fi

check-apt:
    @if command -v apt >/dev/null 2>&1; then \
        echo "=== APT Updates ===" && \
        sudo apt update >/dev/null 2>&1 && \
        apt list --upgradable 2>/dev/null | head -20 || echo "All packages are up to date"; \
    else \
        echo "APT not available"; \
    fi

check-pip:
    @if command -v pip3 >/dev/null 2>&1; then \
        echo "=== Python (pip) Updates ===" && \
        (pip3 list --outdated --user 2>/dev/null | head -20 || pip3 list --outdated 2>/dev/null | head -20) || echo "All packages are up to date"; \
    else \
        echo "pip3 not installed"; \
    fi

check-npm:
    @if command -v npm >/dev/null 2>&1; then \
        echo "=== NPM Updates ===" && \
        npm outdated -g || echo "All packages are up to date"; \
    else \
        echo "NPM not installed"; \
    fi

# Upgrade all packages
upgrade-all:
    @echo "Upgrading all package managers..."
    @just upgrade-brew || true
    @just upgrade-apt || true
    @just upgrade-pip || true
    @just upgrade-npm || true
    @just upgrade-gem || true

# Individual package manager upgrades
upgrade-brew:
    #!/usr/bin/env bash
    if command -v brew >/dev/null 2>&1; then
        echo "Updating via Homebrew..."
        
        # Try update, if locked skip it and continue
        if brew update --quiet 2>/dev/null; then
            echo "Repository updated successfully"
        else
            echo "Brew update locked or failed, continuing with upgrade using existing repository data..."
        fi
        
        brew upgrade --quiet
        brew cleanup --quiet
    else
        echo "Homebrew not installed"
    fi

upgrade-apt:
    @if command -v apt >/dev/null 2>&1; then \
        echo "Updating via APT..." && \
        sudo apt update && \
        sudo apt upgrade -y && \
        sudo apt autoremove -y; \
    else \
        echo "APT not available"; \
    fi

upgrade-pacman:
    @if command -v pacman >/dev/null 2>&1; then \
        echo "Updating via Pacman..." && \
        sudo pacman -Syu --noconfirm; \
    else \
        echo "Pacman not available"; \
    fi

upgrade-pip:
    @if command -v pip3 >/dev/null 2>&1; then \
        echo "Updating via pip..." && \
        pip3 list --outdated --user --format=freeze 2>/dev/null | cut -d= -f1 | xargs -n1 pip3 install --user -U || \
        pip3 list --outdated --format=freeze | cut -d= -f1 | xargs -n1 pip3 install -U; \
    else \
        echo "pip not installed"; \
    fi

upgrade-npm:
    @if command -v npm >/dev/null 2>&1; then \
        echo "Updating via NPM..." && \
        npm update -g; \
    else \
        echo "NPM not installed"; \
    fi

upgrade-gem:
    #!/usr/bin/env bash
    # Ensure we use Homebrew Ruby if available
    if [ -d "/opt/homebrew/opt/ruby/bin" ]; then
        export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
    fi
    
    if command -v gem >/dev/null 2>&1; then
        echo "Updating via RubyGems (skipping docs for speed)..."
        echo "Using Ruby: $(ruby --version)"
        gem update --no-document || true
    else
        echo "Ruby gems not installed"
    fi

upgrade-cargo:
    @if command -v cargo >/dev/null 2>&1; then \
        echo "Updating via Cargo..." && \
        cargo install-update -a; \
    else \
        echo "Cargo not installed"; \
    fi

# Check commands (show what would be updated)
check-brew-packages:
    @if command -v brew >/dev/null 2>&1; then \
        brew outdated || true; \
    else \
        echo "Homebrew not installed"; \
    fi

check-apt-packages:
    @if command -v apt >/dev/null 2>&1; then \
        sudo apt update && apt list --upgradable 2>/dev/null || true; \
    else \
        echo "APT not available"; \
    fi

check-pip-packages:
    @if command -v pip3 >/dev/null 2>&1; then \
        (pip3 list --outdated --user 2>/dev/null || pip3 list --outdated) || true; \
    else \
        echo "pip not installed"; \
    fi

check-npm-packages:
    @if command -v npm >/dev/null 2>&1; then \
        npm outdated -g || true; \
    else \
        echo "NPM not installed"; \
    fi

# ─────────────────────────────────────────────────────────────────────────────
# Utility Commands
# ─────────────────────────────────────────────────────────────────────────────

# View recent log files
show-logs:
    @echo "Recent package management logs:"
    @ls -lt {{logs_dir}}/package-*.log 2>/dev/null | head -10 || echo "No package logs found"

# View the most recent log
show-last-log:
    @if ls {{logs_dir}}/package-*.log >/dev/null 2>&1; then \
        tail -100 `ls -t {{logs_dir}}/package-*.log | head -1`; \
    else \
        echo "No package logs found"; \
    fi

# Show current machine class configuration
show-config:
    @if [[ -f ~/.dotfiles.machine.class.env ]]; then \
        echo "Current configuration:"; \
        grep "^DOTFILES_MACHINE_CLASS=" ~/.dotfiles.machine.class.env; \
    else \
        echo "No machine class configured. Run: just configure"; \
    fi

# List all available machine classes
list-machines:
    @echo "Available machine classes:"
    @for dir in {{pm_dir}}/machines/*/; do \
        basename "$dir"; \
    done | column

# Show what's installed for current machine class
show-packages PACKAGE_MANAGER="":
    #!/usr/bin/env bash
    set -euo pipefail
    
    if [[ ! -f ~/.dotfiles.machine.class.env ]]; then
        echo "No machine class configured. Run: just configure"
        exit 1
    fi
    
    source ~/.dotfiles.machine.class.env
    machine_dir="{{pm_dir}}/machines/${DOTFILES_MACHINE_CLASS}"
    
    if [[ -n "{{PACKAGE_MANAGER}}" ]]; then
        # Show specific PM
        pm_dir="${machine_dir}/{{PACKAGE_MANAGER}}"
        if [[ -d "${pm_dir}" ]]; then
            echo "=== {{PACKAGE_MANAGER}} packages for ${DOTFILES_MACHINE_CLASS} ==="
            case "{{PACKAGE_MANAGER}}" in
                brew)
                    cat "${pm_dir}/Brewfile" 2>/dev/null || echo "No Brewfile"
                    ;;
                pip)
                    cat "${pm_dir}/requirements.txt" 2>/dev/null || echo "No requirements.txt"
                    ;;
                apt|pacman|npm|cargo|snap)
                    cat "${pm_dir}/packages.txt" 2>/dev/null || echo "No packages.txt"
                    ;;
                gem)
                    cat "${pm_dir}/Gemfile" 2>/dev/null || echo "No Gemfile"
                    ;;
                *)
                    ls -la "${pm_dir}/" 2>/dev/null || echo "Unknown format"
                    ;;
            esac
        else
            echo "No {{PACKAGE_MANAGER}} configuration for ${DOTFILES_MACHINE_CLASS}"
        fi
    else
        # Show all PMs
        echo "Machine class: ${DOTFILES_MACHINE_CLASS}"
        echo "Package managers configured:"
        for pm_dir in "${machine_dir}"/*/; do
            if [[ -d "${pm_dir}" ]]; then
                pm=$(basename "${pm_dir}")
                echo "  - ${pm}"
            fi
        done
    fi

# Clean package manager caches
clean:
    @echo "Cleaning package manager caches..."
    @if command -v brew >/dev/null 2>&1; then \
        echo "Cleaning Homebrew..." && \
        brew cleanup -s && \
        brew cleanup --prune=all; \
    fi
    @if command -v apt >/dev/null 2>&1; then \
        echo "Cleaning APT..." && \
        sudo apt autoremove -y && \
        sudo apt autoclean; \
    fi
    @if command -v npm >/dev/null 2>&1; then \
        echo "Cleaning NPM..." && \
        npm cache clean --force; \
    fi
    @if command -v pip3 >/dev/null 2>&1; then \
        echo "Cleaning pip..." && \
        pip3 cache purge 2>/dev/null || true; \
    fi